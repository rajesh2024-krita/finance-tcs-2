{"file_contents":{"API_DOCUMENTATION.md":{"content":"# Society Management System API Documentation\n\n## Overview\n\nThe Society Management System is a comprehensive backend API that manages hierarchical organizational structures with role-based access control and approval workflows. The system supports multiple societies with a sophisticated approval system where Society Admin changes require unanimous approval from all Users within their society.\n\n## Base URL\n```\nhttp://localhost:3000/api\n```\n\n## Authentication\n\nThe API uses JWT (JSON Web Token) authentication with Bearer token format.\n\n### Headers Required for Protected Endpoints\n```\nAuthorization: Bearer <jwt_token>\nContent-Type: application/json\n```\n\n## User Roles & Permissions\n\n### Role Hierarchy\n1. **Super Admin** (Role: 1)\n   - Full access to all societies\n   - Can create societies and society admins\n   - Changes apply immediately (no approval needed)\n\n2. **Society Admin** (Role: 2)\n   - Manages single society\n   - Can create users and members within their society\n   - Society edits require approval from all Users\n   \n3. **User** (Role: 3)\n   - Belongs to a society\n   - Can create members within their society\n   - Must approve/reject society changes made by Society Admin\n   \n4. **Member** (Role: 4)\n   - Basic profile data\n   - No special access permissions\n\n## API Endpoints\n\n### üîê Authentication Endpoints\n\n#### POST /auth/login\n**Description**: Authenticate user and get JWT token\n\n**Request Body**:\n```json\n{\n  \"username\": \"admin\",\n  \"password\": \"admin\"\n}\n```\n\n**Response** (200 OK):\n```json\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"firstName\": \"Super\",\n    \"lastName\": \"Admin\",\n    \"email\": \"admin@societymanagement.com\",\n    \"phone\": \"\",\n    \"role\": 1,\n    \"societyId\": null,\n    \"societyName\": null,\n    \"createdAt\": \"2025-08-25T17:22:00.009678Z\"\n  }\n}\n```\n\n**Error Response** (401 Unauthorized):\n```json\n{\n  \"message\": \"Invalid username or password\"\n}\n```\n\n#### GET /auth/profile\n**Description**: Get current user profile  \n**Authorization**: Required  \n\n**Response** (200 OK):\n```json\n{\n  \"id\": 1,\n  \"username\": \"admin\",\n  \"firstName\": \"Super\",\n  \"lastName\": \"Admin\",\n  \"email\": \"admin@societymanagement.com\",\n  \"phone\": \"\",\n  \"role\": 1,\n  \"societyId\": null,\n  \"societyName\": null,\n  \"createdAt\": \"2025-08-25T17:22:00.009678Z\"\n}\n```\n\n### üè¢ Society Management Endpoints\n\n#### POST /society\n**Description**: Create new society (Super Admin only)  \n**Authorization**: Super Admin required  \n\n**Request Body**:\n```json\n{\n  \"societyName\": \"Tech Workers Society\",\n  \"registrationNumber\": \"TWS001\",\n  \"address\": \"123 Tech Street\",\n  \"city\": \"Tech City\",\n  \"phone\": \"123-456-7890\",\n  \"fax\": \"123-456-7891\",\n  \"email\": \"info@techworkers.com\",\n  \"website\": \"https://techworkers.com\",\n  \"dividend\": 5.5,\n  \"overdraft\": 10000.00,\n  \"currentDeposit\": 50000.00,\n  \"loan\": 100000.00,\n  \"emergencyLoan\": 25000.00,\n  \"las\": 15000.00,\n  \"shareLimit\": 5000.00,\n  \"loanLimit\": 200000.00,\n  \"emergencyLoanLimit\": 50000.00,\n  \"chequeBounceCharge\": 500.00,\n  \"chequeReturnCharge\": 250.00,\n  \"cash\": 75000.00,\n  \"bonus\": 1000.00,\n  \"adminUsername\": \"societyadmin1\",\n  \"adminPassword\": \"admin123\",\n  \"adminFirstName\": \"John\",\n  \"adminLastName\": \"Doe\",\n  \"adminEmail\": \"john@techworkers.com\",\n  \"adminPhone\": \"123-456-7892\"\n}\n```\n\n**Response** (201 Created):\n```json\n{\n  \"id\": 1,\n  \"societyName\": \"Tech Workers Society\",\n  \"registrationNumber\": \"TWS001\",\n  \"address\": \"123 Tech Street\",\n  \"city\": \"Tech City\",\n  \"phone\": \"123-456-7890\",\n  \"fax\": \"123-456-7891\",\n  \"email\": \"info@techworkers.com\",\n  \"website\": \"https://techworkers.com\",\n  \"dividend\": 5.5,\n  \"overdraft\": 10000.00,\n  \"currentDeposit\": 50000.00,\n  \"loan\": 100000.00,\n  \"emergencyLoan\": 25000.00,\n  \"las\": 15000.00,\n  \"shareLimit\": 5000.00,\n  \"loanLimit\": 200000.00,\n  \"emergencyLoanLimit\": 50000.00,\n  \"chequeBounceCharge\": 500.00,\n  \"chequeReturnCharge\": 250.00,\n  \"cash\": 75000.00,\n  \"bonus\": 1000.00,\n  \"createdAt\": \"2025-08-25T17:22:00.009678Z\",\n  \"updatedAt\": \"2025-08-25T17:22:00.009678Z\",\n  \"hasPendingEdits\": false\n}\n```\n\n#### GET /society\n**Description**: Get all societies (access based on user role)  \n**Authorization**: Super Admin, Society Admin, or User required  \n\n**Response** (200 OK):\n```json\n[\n  {\n    \"id\": 1,\n    \"societyName\": \"Tech Workers Society\",\n    \"registrationNumber\": \"TWS001\",\n    \"address\": \"123 Tech Street\",\n    \"city\": \"Tech City\",\n    \"phone\": \"123-456-7890\",\n    \"fax\": \"123-456-7891\",\n    \"email\": \"info@techworkers.com\",\n    \"website\": \"https://techworkers.com\",\n    \"dividend\": 5.5,\n    \"overdraft\": 10000.00,\n    \"currentDeposit\": 50000.00,\n    \"loan\": 100000.00,\n    \"emergencyLoan\": 25000.00,\n    \"las\": 15000.00,\n    \"shareLimit\": 5000.00,\n    \"loanLimit\": 200000.00,\n    \"emergencyLoanLimit\": 50000.00,\n    \"chequeBounceCharge\": 500.00,\n    \"chequeReturnCharge\": 250.00,\n    \"cash\": 75000.00,\n    \"bonus\": 1000.00,\n    \"createdAt\": \"2025-08-25T17:22:00.009678Z\",\n    \"updatedAt\": \"2025-08-25T17:22:00.009678Z\",\n    \"hasPendingEdits\": false\n  }\n]\n```\n\n#### GET /society/{id}\n**Description**: Get society by ID (access based on user role)  \n**Authorization**: Super Admin, Society Admin, or User required  \n\n**Response** (200 OK): Same as individual society object above\n\n#### PUT /society/{id}\n**Description**: Update society (Super Admin: immediate, Society Admin: pending approval)  \n**Authorization**: Super Admin or Society Admin required  \n\n**Request Body**:\n```json\n{\n  \"societyName\": \"Updated Tech Workers Society\",\n  \"registrationNumber\": \"TWS001-UPD\",\n  \"address\": \"456 New Tech Avenue\",\n  \"city\": \"New Tech City\",\n  \"phone\": \"987-654-3210\",\n  \"fax\": \"987-654-3211\",\n  \"email\": \"newemail@techworkers.com\",\n  \"website\": \"https://newtechworkers.com\",\n  \"dividend\": 6.0,\n  \"overdraft\": 12000.00,\n  \"currentDeposit\": 60000.00,\n  \"loan\": 120000.00,\n  \"emergencyLoan\": 30000.00,\n  \"las\": 18000.00,\n  \"shareLimit\": 6000.00,\n  \"loanLimit\": 250000.00,\n  \"emergencyLoanLimit\": 60000.00,\n  \"chequeBounceCharge\": 600.00,\n  \"chequeReturnCharge\": 300.00,\n  \"cash\": 85000.00,\n  \"bonus\": 1200.00\n}\n```\n\n**Response** (200 OK):\n- **Super Admin**: `{\"message\": \"Society updated successfully\"}`\n- **Society Admin**: `{\"message\": \"Society update submitted for approval\"}`\n\n### üìã Approval Workflow Endpoints\n\n#### GET /society/pending-edits\n**Description**: Get pending society edits for approval  \n**Authorization**: Super Admin or User required  \n\n**Response** (200 OK):\n```json\n[\n  {\n    \"id\": 1,\n    \"societyId\": 1,\n    \"societyName\": \"Tech Workers Society\",\n    \"editedByUserName\": \"Jane Smith\",\n    \"createdAt\": \"2025-08-25T17:22:00.009678Z\",\n    \"isApproved\": false,\n    \"approvals\": [\n      {\n        \"userId\": 3,\n        \"userName\": \"Bob Johnson\",\n        \"isApproved\": true,\n        \"comments\": \"Looks good\",\n        \"approvedAt\": \"2025-08-25T17:25:00.009678Z\"\n      }\n    ],\n    \"pendingChanges\": {\n      \"societyName\": \"Updated Tech Workers Society\",\n      \"registrationNumber\": \"TWS001-UPD\",\n      \"address\": \"456 New Tech Avenue\",\n      \"city\": \"New Tech City\",\n      \"phone\": \"987-654-3210\",\n      \"fax\": \"987-654-3211\",\n      \"email\": \"newemail@techworkers.com\",\n      \"website\": \"https://newtechworkers.com\",\n      \"dividend\": 6.0,\n      \"overdraft\": 12000.00,\n      \"currentDeposit\": 60000.00,\n      \"loan\": 120000.00,\n      \"emergencyLoan\": 30000.00,\n      \"las\": 18000.00,\n      \"shareLimit\": 6000.00,\n      \"loanLimit\": 250000.00,\n      \"emergencyLoanLimit\": 60000.00,\n      \"chequeBounceCharge\": 600.00,\n      \"chequeReturnCharge\": 300.00,\n      \"cash\": 85000.00,\n      \"bonus\": 1200.00\n    }\n  }\n]\n```\n\n#### POST /society/approve-edit/{id}\n**Description**: Approve or reject pending society edit  \n**Authorization**: User role required  \n\n**Request Body**:\n```json\n{\n  \"isApproved\": true,\n  \"comments\": \"Changes look good, approved!\"\n}\n```\n\n**Response** (200 OK):\n```json\n{\n  \"message\": \"Approval submitted successfully\"\n}\n```\n\n### üë• User Management Endpoints\n\n#### POST /user\n**Description**: Create new user (Super Admin or Society Admin)  \n**Authorization**: Super Admin or Society Admin required  \n\n**Request Body**:\n```json\n{\n  \"username\": \"newuser1\",\n  \"password\": \"user123\",\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Johnson\",\n  \"email\": \"alice@techworkers.com\",\n  \"phone\": \"555-123-4567\",\n  \"role\": 3\n}\n```\n\n**Response** (201 Created):\n```json\n{\n  \"id\": 4,\n  \"username\": \"newuser1\",\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Johnson\",\n  \"email\": \"alice@techworkers.com\",\n  \"phone\": \"555-123-4567\",\n  \"role\": 3,\n  \"societyId\": 1,\n  \"societyName\": \"Tech Workers Society\",\n  \"createdAt\": \"2025-08-25T17:22:00.009678Z\"\n}\n```\n\n#### GET /user\n**Description**: Get all users (access based on user role)  \n**Authorization**: Super Admin, Society Admin, or User required  \n\n#### GET /user/{id}\n**Description**: Get user by ID (access based on user role)  \n**Authorization**: Super Admin, Society Admin, or User required  \n\n#### PUT /user/{id}\n**Description**: Update user  \n**Authorization**: Super Admin, Society Admin, or User (own profile) required  \n\n### üë§ Member Management Endpoints\n\n#### POST /member\n**Description**: Create new member  \n**Authorization**: Super Admin, Society Admin, or User required  \n\n**Request Body**:\n```json\n{\n  \"name\": \"John Smith\",\n  \"memberNumber\": \"MEM001\",\n  \"email\": \"john.smith@email.com\",\n  \"phone\": \"555-987-6543\",\n  \"address\": \"789 Member Street\",\n  \"dateOfJoining\": \"2025-08-25T00:00:00Z\"\n}\n```\n\n**Response** (201 Created):\n```json\n{\n  \"id\": 1,\n  \"name\": \"John Smith\",\n  \"memberNumber\": \"MEM001\",\n  \"email\": \"john.smith@email.com\",\n  \"phone\": \"555-987-6543\",\n  \"address\": \"789 Member Street\",\n  \"dateOfJoining\": \"2025-08-25T00:00:00Z\",\n  \"societyId\": 1,\n  \"createdByUserId\": 2,\n  \"createdAt\": \"2025-08-25T17:22:00.009678Z\"\n}\n```\n\n#### GET /member\n**Description**: Get all members (access based on user role)  \n**Authorization**: Super Admin, Society Admin, or User required  \n\n#### GET /member/{id}\n**Description**: Get member by ID (access based on user role)  \n**Authorization**: Super Admin, Society Admin, or User required  \n\n#### PUT /member/{id}\n**Description**: Update member  \n**Authorization**: Super Admin, Society Admin, or User required  \n\n## Error Responses\n\n### Common Error Codes\n\n**400 Bad Request**:\n```json\n{\n  \"message\": \"Error creating society\",\n  \"error\": \"Society name already exists\"\n}\n```\n\n**401 Unauthorized**:\n```json\n{\n  \"message\": \"Authentication required\"\n}\n```\n\n**403 Forbidden**:\n```json\n{\n  \"message\": \"You can only edit your own society\"\n}\n```\n\n**404 Not Found**:\n```json\n{\n  \"message\": \"Society not found\"\n}\n```\n\n## Approval Workflow Logic\n\n### Society Edit Approval Process\n\n1. **Society Admin** submits edit request ‚Üí Creates `SocietyEditPending` record\n2. **All Users** in the society must approve the changes\n3. When **ALL Users** approve ‚Üí Changes automatically apply to the Society\n4. **Super Admin** edits apply immediately (bypass approval)\n\n### Key Business Rules\n\n- Super Admin has full access across all societies\n- Society Admin can only manage their assigned society\n- Users can only access data from their society\n- Members have no administrative access\n- All Society Admin changes require unanimous User approval\n- No delete operations are implemented (Create, Read, Update only)\n\n## Database Schema\n\n### Core Tables\n- **Users**: Stores all system users with role-based access\n- **Societies**: Main society information and financial data\n- **Members**: Individual member profiles linked to users\n- **SocietyEditsPending**: Temporary storage for pending society changes\n- **SocietyEditApprovals**: Tracks individual user approvals for pending changes\n\n### Key Relationships\n- User belongs to Society (nullable for Super Admin)\n- Member belongs to User and Society\n- SocietyEditPending belongs to Society and EditedByUser\n- SocietyEditApproval belongs to PendingEdit and User\n\n## Getting Started\n\n### Default Super Admin Credentials\n```\nUsername: admin\nPassword: admin\n```\n\n### Example API Usage Flow\n\n1. **Login as Super Admin**:\n   ```bash\n   curl -X POST http://localhost:3000/api/auth/login \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"username\":\"admin\",\"password\":\"admin\"}'\n   ```\n\n2. **Create a Society** (use token from login):\n   ```bash\n   curl -X POST http://localhost:3000/api/society \\\n     -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"societyName\":\"Test Society\",\"adminUsername\":\"testadmin\",\"adminPassword\":\"test123\",\"adminFirstName\":\"Test\",\"adminLastName\":\"Admin\",\"adminEmail\":\"test@example.com\"}'\n   ```\n\n3. **Login as Society Admin** and perform operations within your society scope.\n\n## Security Features\n\n- JWT-based stateless authentication\n- Role-based authorization middleware\n- Password hashing using BCrypt\n- SQL injection protection via Entity Framework\n- CORS configuration for cross-origin requests\n- Unique constraints on usernames and society names\n\n## Development Notes\n\n- Built with ASP.NET Core 8.0\n- PostgreSQL database with Entity Framework Core\n- Decimal precision configured for financial fields (18,2)\n- Comprehensive audit trail with CreatedAt/UpdatedAt timestamps\n- Automatic database schema creation and seeding","size_bytes":13208},"Program.cs":{"content":"using Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.IdentityModel.Tokens;\nusing Microsoft.OpenApi.Models;\nusing SocietyManagement.Data;\nusing SocietyManagement.Helpers;\nusing SocietyManagement.Middleware;\nusing SocietyManagement.Services;\nusing System.Text;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\n\n// Add Entity Framework\nvar connectionString = GetConnectionString(builder.Configuration);\nbuilder.Services.AddDbContext<ApplicationDbContext>(options =>\n    options.UseNpgsql(connectionString));\n\nstatic string GetConnectionString(IConfiguration configuration)\n{\n    var databaseUrl = Environment.GetEnvironmentVariable(\"DATABASE_URL\");\n    if (!string.IsNullOrEmpty(databaseUrl))\n    {\n        // Parse DATABASE_URL for PostgreSQL\n        var uri = new Uri(databaseUrl);\n        var host = uri.Host;\n        var port = uri.Port > 0 ? uri.Port : 5432;\n        var database = uri.LocalPath.TrimStart('/');\n        var userInfo = uri.UserInfo.Split(':');\n        var user = userInfo[0];\n        var password = userInfo.Length > 1 ? userInfo[1] : \"\";\n        \n        return $\"Host={host};Port={port};Database={database};Username={user};Password={password};SSL Mode=Prefer;Trust Server Certificate=true\";\n    }\n    \n    return configuration.GetConnectionString(\"DefaultConnection\") ?? \"\";\n}\n\n// Add JWT Authentication\nvar jwtSettings = builder.Configuration.GetSection(\"JwtSettings\");\nvar secretKey = jwtSettings[\"SecretKey\"];\n\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey!)),\n            ValidateIssuer = true,\n            ValidIssuer = jwtSettings[\"Issuer\"],\n            ValidateAudience = true,\n            ValidAudience = jwtSettings[\"Audience\"],\n            ValidateLifetime = true,\n            ClockSkew = TimeSpan.Zero\n        };\n    });\n\n// Add Authorization\nbuilder.Services.AddAuthorization();\n\n// Add CORS\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowAll\", policy =>\n    {\n        policy.AllowAnyOrigin()\n              .AllowAnyMethod()\n              .AllowAnyHeader();\n    });\n});\n\n// Register services\nbuilder.Services.AddScoped<JwtHelper>();\nbuilder.Services.AddScoped<IAuthService, AuthService>();\nbuilder.Services.AddScoped<ISocietyService, SocietyService>();\nbuilder.Services.AddScoped<IUserService, UserService>();\nbuilder.Services.AddScoped<IMemberService, MemberService>();\n\n// Add Swagger\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Society Management API\", Version = \"v1\" });\n    \n    c.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme\n    {\n        Description = \"JWT Authorization header using the Bearer scheme. Enter 'Bearer' [space] and then your token in the text input below.\",\n        Name = \"Authorization\",\n        In = ParameterLocation.Header,\n        Type = SecuritySchemeType.ApiKey,\n        Scheme = \"Bearer\"\n    });\n\n    c.AddSecurityRequirement(new OpenApiSecurityRequirement\n    {\n        {\n            new OpenApiSecurityScheme\n            {\n                Reference = new OpenApiReference\n                {\n                    Type = ReferenceType.SecurityScheme,\n                    Id = \"Bearer\"\n                }\n            },\n            Array.Empty<string>()\n        }\n    });\n});\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\napp.UseSwagger();\napp.UseSwaggerUI(c =>\n{\n    c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Society Management API v1\");\n    c.RoutePrefix = string.Empty; // Set Swagger UI at the app's root\n});\n\n// Enable CORS\napp.UseCors(\"AllowAll\");\n\n// Use HTTPS redirection (disabled for Replit)\n// app.UseHttpsRedirection();\n\n// Use Authentication\napp.UseAuthentication();\n\n// Use custom middleware\napp.UseMiddleware<RoleAuthorizationMiddleware>();\n\n// Use Authorization\napp.UseAuthorization();\n\n// Map controllers\napp.MapControllers();\n\n// Ensure database is created and migrated\nusing (var scope = app.Services.CreateScope())\n{\n    var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();\n    context.Database.EnsureCreated();\n}\n\napp.Run(\"http://0.0.0.0:3000\");\n","size_bytes":4508},"README.md":{"content":"# MyAngularProject\n\nThis project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 17.1.1.\n\n## Development server\n\nRun `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.\n\n## Code scaffolding\n\nRun `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.\n\n## Build\n\nRun `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.\n\n## Running unit tests\n\nRun `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Running end-to-end tests\n\nRun `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.\n","size_bytes":1070},"replit.md":{"content":"# Society Management System\n\n## Overview\n\nThis is a Society Management System built with ASP.NET Core that manages hierarchical organizational structures. The system supports multiple societies with role-based access control, allowing Super Admins to oversee all societies while Society Admins manage their specific organizations. The system features a sophisticated approval workflow where Society Admin changes require unanimous approval from all Users within their society before becoming active.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Backend Architecture\n- **Framework**: ASP.NET Core Web API\n- **Authentication**: JWT (JSON Web Tokens) with custom claims for role-based authorization\n- **Database**: SQL Server with Entity Framework Core (Code-First approach)\n- **Architecture Pattern**: Repository pattern with service layer separation\n\n### Role-Based Hierarchy\nThe system implements a four-tier hierarchical structure:\n1. **Super Admin**: Top-level access across all societies\n2. **Society Admin**: Manages a single society with approval workflow constraints\n3. **User**: Society-specific access with approval responsibilities\n4. **Member**: Basic profile data tied to a specific User\n\n### Approval Workflow System\n- **Immediate Changes**: Super Admin modifications apply instantly\n- **Pending State**: Society Admin changes enter a pending approval state\n- **Unanimous Approval**: All Users within the society must approve before changes become active\n- **Change Tracking**: System maintains audit trail of pending modifications\n\n### Data Access Control\n- Role-based middleware enforces strict data boundaries\n- Society-scoped data access prevents cross-society information leakage\n- JWT claims-based authorization for granular permission control\n\n### Database Design\n- **Main Entities**: Society, User, Member with proper foreign key relationships\n- **Approval System**: Separate tables for tracking pending changes and approval status\n- **Audit Trail**: Change history and approval tracking tables\n\n## External Dependencies\n\n### Core Framework\n- **ASP.NET Core**: Primary web framework\n- **Entity Framework Core**: ORM for database operations\n- **SQL Server**: Primary database engine with trusted connection authentication\n\n### Authentication & Security\n- **JWT Bearer Tokens**: Stateless authentication with 60-minute expiration\n- **Custom JWT Configuration**: Issuer, audience, and secret key validation\n- **Role-based Authorization**: Custom middleware for hierarchical access control\n\n### Configuration Management\n- **appsettings.json**: Connection strings, JWT settings, and logging configuration\n- **Environment-specific**: Separate configuration support for different deployment environments\n\n### Logging & Monitoring\n- **Built-in ASP.NET Core Logging**: Configured for Information level with Warning level for Microsoft components\n- **Structured Logging**: Ready for integration with external logging providers","size_bytes":3000},"server.ts":{"content":"import { APP_BASE_HREF } from '@angular/common';\nimport { CommonEngine } from '@angular/ssr';\nimport express from 'express';\nimport { fileURLToPath } from 'node:url';\nimport { dirname, join, resolve } from 'node:path';\nimport bootstrap from './src/main.server';\n\n// The Express app is exported so that it can be used by serverless Functions.\nexport function app(): express.Express {\n  const server = express();\n  const serverDistFolder = dirname(fileURLToPath(import.meta.url));\n  const browserDistFolder = resolve(serverDistFolder, '../browser');\n  const indexHtml = join(serverDistFolder, 'index.server.html');\n\n  const commonEngine = new CommonEngine();\n\n  server.set('view engine', 'html');\n  server.set('views', browserDistFolder);\n\n  // Example Express Rest API endpoints\n  // server.get('/api/**', (req, res) => { });\n  // Serve static files from /browser\n  server.get('*.*', express.static(browserDistFolder, {\n    maxAge: '1y'\n  }));\n\n  // All regular routes use the Angular engine\n  server.get('*', (req, res, next) => {\n    const { protocol, originalUrl, baseUrl, headers } = req;\n\n    commonEngine\n      .render({\n        bootstrap,\n        documentFilePath: indexHtml,\n        url: `${protocol}://${headers.host}${originalUrl}`,\n        publicPath: browserDistFolder,\n        providers: [{ provide: APP_BASE_HREF, useValue: baseUrl }],\n      })\n      .then((html) => res.send(html))\n      .catch((err) => next(err));\n  });\n\n  return server;\n}\n\nfunction run(): void {\n  const port = process.env['PORT'] || 4000;\n\n  // Start up the Node server\n  const server = app();\n  server.listen(port, () => {\n    console.log(`Node Express server listening on http://localhost:${port}`);\n  });\n}\n\nrun();\n","size_bytes":1703},"tailwind.config.js":{"content":"\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{html,ts}\",\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f4ff',\n          100: '#e5edff',\n          200: '#d0ddff',\n          300: '#b4c2ff',\n          400: '#9199ff',\n          500: '#667eea',\n          600: '#5a67d8',\n          700: '#4c51bf',\n          800: '#434190',\n          900: '#3c366b',\n        },\n        secondary: {\n          50: '#fef7ff',\n          100: '#fdf2ff',\n          200: '#fce7ff',\n          300: '#f9d0ff',\n          400: '#f3a8ff',\n          500: '#e879f9',\n          600: '#d946ef',\n          700: '#c026d3',\n          800: '#a21caf',\n          900: '#86198f',\n        },\n        accent: {\n          50: '#f0fdfa',\n          100: '#ccfbf1',\n          200: '#99f6e4',\n          300: '#5eead4',\n          400: '#2dd4bf',\n          500: '#14b8a6',\n          600: '#0d9488',\n          700: '#0f766e',\n          800: '#115e59',\n          900: '#134e4a',\n        }\n      },\n      backgroundImage: {\n        'gradient-primary': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        'gradient-secondary': 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\n        'gradient-accent': 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',\n        'gradient-dark-primary': 'linear-gradient(135deg, #06ffa5 0%, #00d4ff 100%)',\n        'gradient-dark-secondary': 'linear-gradient(135deg, #ff006e 0%, #8338ec 100%)',\n        'gradient-light-bg': 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)',\n        'gradient-dark-bg': 'linear-gradient(135deg, #0f0c29 0%, #302b63 50%, #24243e 100%)',\n        'gradient-sidebar-light': 'linear-gradient(180deg, #667eea 0%, #764ba2 100%)',\n        'gradient-sidebar-dark': 'linear-gradient(180deg, #1a202c 0%, #2d3748 100%)',\n      },\n      fontFamily: {\n        sans: ['Roboto', 'system-ui', 'sans-serif'],\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n      },\n      animation: {\n        'float': 'float 6s ease-in-out infinite',\n        'gradient': 'gradient-shift 4s ease infinite',\n        'slide-in': 'slideIn 0.5s ease forwards',\n        'fade-in': 'fadeIn 0.6s ease',\n      },\n      boxShadow: {\n        'glass': '0 8px 32px 0 rgba(31, 38, 135, 0.37)',\n        'gradient': '0 10px 40px rgba(102, 126, 234, 0.3)',\n        'dark-gradient': '0 10px 40px rgba(6, 255, 165, 0.3)',\n      },\n      backdropBlur: {\n        xs: '2px',\n      }\n    },\n  },\n  plugins: [],\n}\n","size_bytes":2512},"Attributes/RoleAuthorizationAttribute.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing SocietyManagement.Enums;\nusing System.Security.Claims;\n\nnamespace SocietyManagement.Attributes\n{\n    public class RoleAuthorizationAttribute : ActionFilterAttribute\n    {\n        private readonly UserRole[] _allowedRoles;\n\n        public RoleAuthorizationAttribute(params UserRole[] allowedRoles)\n        {\n            _allowedRoles = allowedRoles;\n        }\n\n        public override void OnActionExecuting(ActionExecutingContext context)\n        {\n            var user = context.HttpContext.User;\n\n            if (!user.Identity?.IsAuthenticated ?? true)\n            {\n                context.Result = new UnauthorizedObjectResult(new { message = \"Authentication required\" });\n                return;\n            }\n\n            var roleClaimValue = user.FindFirst(ClaimTypes.Role)?.Value;\n            if (string.IsNullOrEmpty(roleClaimValue) || !Enum.TryParse<UserRole>(roleClaimValue, out var userRole))\n            {\n                context.Result = new ForbidResult();\n                return;\n            }\n\n            if (!_allowedRoles.Contains(userRole))\n            {\n                context.Result = new ObjectResult(new { message = \"Insufficient permissions\" }) { StatusCode = 403 };\n                return;\n            }\n\n            base.OnActionExecuting(context);\n        }\n    }\n}\n","size_bytes":1375},"Controllers/AuthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing SocietyManagement.Models.DTOs;\nusing SocietyManagement.Services;\n\nnamespace SocietyManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AuthController : ControllerBase\n    {\n        private readonly IAuthService _authService;\n\n        public AuthController(IAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        [HttpPost(\"login\")]\n        public async Task<IActionResult> Login([FromBody] LoginDto loginDto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            var result = await _authService.LoginAsync(loginDto);\n\n            if (result == null)\n            {\n                return Unauthorized(new { message = \"Invalid username or password\" });\n            }\n\n            return Ok(result);\n        }\n\n        [HttpGet(\"profile\")]\n        public async Task<IActionResult> GetProfile()\n        {\n            var userIdClaim = HttpContext.Items[\"UserId\"];\n            if (userIdClaim == null)\n            {\n                return Unauthorized(new { message = \"Authentication required\" });\n            }\n\n            var userId = (int)userIdClaim;\n            var user = await _authService.GetUserByIdAsync(userId);\n\n            if (user == null)\n            {\n                return NotFound(new { message = \"User not found\" });\n            }\n\n            return Ok(user);\n        }\n    }\n}\n","size_bytes":1495},"Controllers/MemberController.cs":{"content":"using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing SocietyManagement.Attributes;\nusing SocietyManagement.Enums;\nusing SocietyManagement.Models.DTOs;\nusing SocietyManagement.Services;\n\nnamespace SocietyManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class MemberController : ControllerBase\n    {\n        private readonly IMemberService _memberService;\n\n        public MemberController(IMemberService memberService)\n        {\n            _memberService = memberService;\n        }\n\n        [HttpPost]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin)]\n        public async Task<IActionResult> CreateMember([FromBody] CreateMemberDto createMemberDto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            var userId = (int?)HttpContext.Items[\"UserId\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            if (!userId.HasValue || !societyId.HasValue)\n            {\n                return BadRequest(new { message = \"User ID and Society ID are required\" });\n            }\n\n            try\n            {\n                var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n                var targetSocietyId = societyId.Value;\n                \n                // Super Admin can specify which society to add member to\n                if (userRole == UserRole.SuperAdmin && createMemberDto.BranchSocietyId.HasValue)\n                {\n                    targetSocietyId = createMemberDto.BranchSocietyId.Value;\n                }\n                \n                var member = await _memberService.CreateMemberAsync(createMemberDto, userId.Value, targetSocietyId);\n                return CreatedAtAction(nameof(GetMember), new { id = member.Id }, member);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { message = \"Error creating member\", error = ex.Message });\n            }\n        }\n\n        [HttpGet]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin, UserRole.User)]\n        public async Task<IActionResult> GetMembers()\n        {\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var userId = (int?)HttpContext.Items[\"UserId\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            List<MemberDto> members;\n\n            if (userRole == UserRole.SuperAdmin)\n            {\n                members = await _memberService.GetMembersAsync();\n            }\n            else if (userRole == UserRole.SocietyAdmin)\n            {\n                members = await _memberService.GetMembersAsync(societyId);\n            }\n            else // User role\n            {\n                members = await _memberService.GetMembersAsync(societyId, userId);\n            }\n\n            return Ok(members);\n        }\n\n        [HttpGet(\"{id}\")]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin, UserRole.User)]\n        public async Task<IActionResult> GetMember(int id)\n        {\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            MemberDto? member;\n\n            if (userRole == UserRole.SuperAdmin)\n            {\n                member = await _memberService.GetMemberByIdAsync(id);\n            }\n            else\n            {\n                member = await _memberService.GetMemberByIdAsync(id, societyId);\n            }\n\n            if (member == null)\n            {\n                return NotFound(new { message = \"Member not found\" });\n            }\n\n            return Ok(member);\n        }\n    }\n}\n","size_bytes":3744},"Controllers/SocietyController.cs":{"content":"using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing SocietyManagement.Attributes;\nusing SocietyManagement.Enums;\nusing SocietyManagement.Models.DTOs;\nusing SocietyManagement.Services;\n\nnamespace SocietyManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class SocietyController : ControllerBase\n    {\n        private readonly ISocietyService _societyService;\n\n        public SocietyController(ISocietyService societyService)\n        {\n            _societyService = societyService;\n        }\n\n        [HttpPost]\n        [RoleAuthorization(UserRole.SuperAdmin)]\n        public async Task<IActionResult> CreateSociety([FromBody] CreateSocietyDto createSocietyDto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            try\n            {\n                var society = await _societyService.CreateSocietyAsync(createSocietyDto);\n                return CreatedAtAction(nameof(GetSociety), new { id = society.Id }, society);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { message = \"Error creating society\", error = ex.Message });\n            }\n        }\n\n        [HttpGet]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin, UserRole.User)]\n        public async Task<IActionResult> GetSocieties()\n        {\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            List<SocietyDto> societies;\n\n            if (userRole == UserRole.SuperAdmin)\n            {\n                societies = await _societyService.GetSocietiesAsync();\n            }\n            else\n            {\n                societies = await _societyService.GetSocietiesAsync(societyId);\n            }\n\n            return Ok(societies);\n        }\n\n        [HttpGet(\"{id}\")]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin, UserRole.User)]\n        public async Task<IActionResult> GetSociety(int id)\n        {\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            SocietyDto? society;\n\n            if (userRole == UserRole.SuperAdmin)\n            {\n                society = await _societyService.GetSocietyByIdAsync(id);\n            }\n            else\n            {\n                society = await _societyService.GetSocietyByIdAsync(id, societyId);\n            }\n\n            if (society == null)\n            {\n                return NotFound(new { message = \"Society not found\" });\n            }\n\n            return Ok(society);\n        }\n\n        [HttpPut(\"{id}\")]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin)]\n        public async Task<IActionResult> UpdateSociety(int id, [FromBody] UpdateSocietyDto updateSocietyDto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var userId = (int?)HttpContext.Items[\"UserId\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            // Check if society admin is trying to edit their own society\n            if (userRole == UserRole.SocietyAdmin && societyId != id)\n            {\n                return Forbid(\"You can only edit your own society\");\n            }\n\n            var success = await _societyService.UpdateSocietyAsync(\n                id, \n                updateSocietyDto, \n                userId!.Value, \n                userRole == UserRole.SuperAdmin\n            );\n\n            if (!success)\n            {\n                return NotFound(new { message = \"Society not found\" });\n            }\n\n            if (userRole == UserRole.SuperAdmin)\n            {\n                return Ok(new { message = \"Society updated successfully\" });\n            }\n            else\n            {\n                return Ok(new { message = \"Society update submitted for approval\" });\n            }\n        }\n\n        [HttpGet(\"pending-edits\")]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.User)]\n        public async Task<IActionResult> GetPendingEdits()\n        {\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            List<PendingEditDto> pendingEdits;\n\n            if (userRole == UserRole.SuperAdmin)\n            {\n                pendingEdits = await _societyService.GetPendingEditsAsync();\n            }\n            else\n            {\n                pendingEdits = await _societyService.GetPendingEditsAsync(societyId);\n            }\n\n            return Ok(pendingEdits);\n        }\n\n        [HttpPost(\"approve-edit/{id}\")]\n        [RoleAuthorization(UserRole.User)]\n        public async Task<IActionResult> ApproveEdit(int id, [FromBody] ApprovalRequestDto approvalRequest)\n        {\n            var userId = (int?)HttpContext.Items[\"UserId\"];\n\n            var success = await _societyService.ApprovePendingEditAsync(\n                id, \n                userId!.Value, \n                approvalRequest.IsApproved, \n                approvalRequest.Comments\n            );\n\n            if (!success)\n            {\n                return NotFound(new { message = \"Pending edit not found or already approved\" });\n            }\n\n            return Ok(new { message = \"Approval submitted successfully\" });\n        }\n    }\n\n    public class ApprovalRequestDto\n    {\n        public bool IsApproved { get; set; }\n        public string? Comments { get; set; }\n    }\n}\n","size_bytes":5713},"Controllers/UserController.cs":{"content":"using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing SocietyManagement.Attributes;\nusing SocietyManagement.Enums;\nusing SocietyManagement.Models.DTOs;\nusing SocietyManagement.Services;\n\nnamespace SocietyManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class UserController : ControllerBase\n    {\n        private readonly IUserService _userService;\n\n        public UserController(IUserService userService)\n        {\n            _userService = userService;\n        }\n\n        [HttpPost]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin)]\n        public async Task<IActionResult> CreateUser([FromBody] CreateUserDto createUserDto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var currentSocietyId = (int?)HttpContext.Items[\"SocietyId\"];\n            \n            int targetSocietyId;\n            bool isSuperAdmin = userRole == UserRole.SuperAdmin;\n            \n            if (isSuperAdmin)\n            {\n                // Super Admin can specify society or it's required in DTO\n                if (!createUserDto.SocietyId.HasValue)\n                {\n                    return BadRequest(new { message = \"Society ID is required for Super Admin\" });\n                }\n                targetSocietyId = createUserDto.SocietyId.Value;\n            }\n            else\n            {\n                // Society Admin can only create users in their own society\n                if (!currentSocietyId.HasValue)\n                {\n                    return BadRequest(new { message = \"Society ID is required\" });\n                }\n                targetSocietyId = currentSocietyId.Value;\n                // Override any society ID provided by Society Admin\n                createUserDto.SocietyId = targetSocietyId;\n            }\n\n            try\n            {\n                var user = await _userService.CreateUserAsync(createUserDto, targetSocietyId, isSuperAdmin);\n                return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { message = \"Error creating user\", error = ex.Message });\n            }\n        }\n\n        [HttpGet]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin)]\n        public async Task<IActionResult> GetUsers()\n        {\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            List<UserDto> users;\n\n            if (userRole == UserRole.SuperAdmin)\n            {\n                users = await _userService.GetUsersAsync();\n            }\n            else\n            {\n                users = await _userService.GetUsersAsync(societyId);\n            }\n\n            return Ok(users);\n        }\n\n        [HttpGet(\"{id}\")]\n        [RoleAuthorization(UserRole.SuperAdmin, UserRole.SocietyAdmin)]\n        public async Task<IActionResult> GetUser(int id)\n        {\n            var userRole = (UserRole?)HttpContext.Items[\"UserRole\"];\n            var societyId = (int?)HttpContext.Items[\"SocietyId\"];\n\n            UserDto? user;\n\n            if (userRole == UserRole.SuperAdmin)\n            {\n                user = await _userService.GetUserByIdAsync(id);\n            }\n            else\n            {\n                user = await _userService.GetUserByIdAsync(id, societyId);\n            }\n\n            if (user == null)\n            {\n                return NotFound(new { message = \"User not found\" });\n            }\n\n            return Ok(user);\n        }\n\n        // New endpoint for Super Admin to get societies for dropdown\n        [HttpGet(\"societies\")]\n        [RoleAuthorization(UserRole.SuperAdmin)]\n        public async Task<IActionResult> GetSocieties()\n        {\n            try\n            {\n                var societies = await _userService.GetSocietiesForDropdownAsync();\n                return Ok(societies);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { message = \"Error retrieving societies\", error = ex.Message });\n            }\n        }\n    }\n}","size_bytes":4325},"Data/ApplicationDbContext.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing SocietyManagement.Models;\nusing SocietyManagement.Enums;\nusing SocietyManagement.Helpers;\n\nnamespace SocietyManagement.Data\n{\n    public class ApplicationDbContext : DbContext\n    {\n        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)\n        {\n        }\n\n        public DbSet<User> Users { get; set; }\n        public DbSet<Society> Societies { get; set; }\n        public DbSet<Member> Members { get; set; }\n        public DbSet<SocietyEditPending> SocietyEditsPending { get; set; }\n        public DbSet<SocietyEditApproval> SocietyEditApprovals { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            // Configure decimal precision for financial fields\n            modelBuilder.Entity<Society>()\n                .Property(s => s.Dividend)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.Overdraft)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.CurrentDeposit)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.Loan)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.EmergencyLoan)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.LAS)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.ShareLimit)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.LoanLimit)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.EmergencyLoanLimit)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.ChequeBounceCharge)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.ChequeReturnCharge)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.Cash)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Society>()\n                .Property(s => s.Bonus)\n                .HasPrecision(18, 2);\n\n            // Configure decimal precision for Member fields\n            modelBuilder.Entity<Member>()\n                .Property(m => m.OpeningBalanceAmount)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Member>()\n                .Property(m => m.ShareDeduction)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Member>()\n                .Property(m => m.WithdrawalDeduction)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Member>()\n                .Property(m => m.GeneralLoanInstalment)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<Member>()\n                .Property(m => m.EmergencyLoanInstalment)\n                .HasPrecision(18, 2);\n\n            // Member unique constraints\n            modelBuilder.Entity<Member>()\n                .HasIndex(m => m.MemberNumber)\n                .IsUnique();\n\n            // Configure precision for pending edits\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.Dividend)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.Overdraft)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.CurrentDeposit)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.Loan)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.EmergencyLoan)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.LAS)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.ShareLimit)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.LoanLimit)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.EmergencyLoanLimit)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.ChequeBounceCharge)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.ChequeReturnCharge)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.Cash)\n                .HasPrecision(18, 2);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .Property(s => s.Bonus)\n                .HasPrecision(18, 2);\n\n            // Configure relationships\n            modelBuilder.Entity<User>()\n                .HasOne(u => u.Society)\n                .WithMany(s => s.Users)\n                .HasForeignKey(u => u.SocietyId)\n                .OnDelete(DeleteBehavior.SetNull);\n\n            modelBuilder.Entity<Member>()\n                .HasOne(m => m.CreatedByUser)\n                .WithMany(u => u.Members)\n                .HasForeignKey(m => m.CreatedByUserId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<Member>()\n                .HasOne(m => m.Society)\n                .WithMany(s => s.Members)\n                .HasForeignKey(m => m.SocietyId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<SocietyEditPending>()\n                .HasOne(sep => sep.Society)\n                .WithMany(s => s.PendingEdits)\n                .HasForeignKey(sep => sep.SocietyId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<SocietyEditApproval>()\n                .HasOne(sea => sea.PendingEdit)\n                .WithMany(sep => sep.Approvals)\n                .HasForeignKey(sea => sea.PendingEditId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<SocietyEditApproval>()\n                .HasOne(sea => sea.User)\n                .WithMany(u => u.EditApprovals)\n                .HasForeignKey(sea => sea.UserId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            // Unique constraints\n            modelBuilder.Entity<User>()\n                .HasIndex(u => u.Username)\n                .IsUnique();\n\n            modelBuilder.Entity<Society>()\n                .HasIndex(s => s.SocietyName)\n                .IsUnique();\n\n            // Seed Super Admin\n            modelBuilder.Entity<User>().HasData(\n                new User\n                {\n                    Id = 1,\n                    Username = \"admin\",\n                    PasswordHash = PasswordHelper.HashPassword(\"admin\"),\n                    FirstName = \"Super\",\n                    LastName = \"Admin\",\n                    Email = \"admin@societymanagement.com\",\n                    Phone = \"\",\n                    Role = UserRole.SuperAdmin,\n                    SocietyId = null,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                }\n            );\n        }\n    }\n}\n","size_bytes":7669},"Enums/UserRole.cs":{"content":"namespace SocietyManagement.Enums\n{\n    public enum UserRole\n    {\n        SuperAdmin = 1,\n        SocietyAdmin = 2,\n        User = 3,\n        Member = 4\n    }\n}\n","size_bytes":162},"Helpers/JwtHelper.cs":{"content":"using Microsoft.IdentityModel.Tokens;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Text;\nusing SocietyManagement.Models;\n\nnamespace SocietyManagement.Helpers\n{\n    public class JwtHelper\n    {\n        private readonly IConfiguration _configuration;\n\n        public JwtHelper(IConfiguration configuration)\n        {\n            _configuration = configuration;\n        }\n\n        public string GenerateToken(User user)\n        {\n            var jwtSettings = _configuration.GetSection(\"JwtSettings\");\n            var secretKey = jwtSettings[\"SecretKey\"];\n            var issuer = jwtSettings[\"Issuer\"];\n            var audience = jwtSettings[\"Audience\"];\n            var expirationInMinutes = int.Parse(jwtSettings[\"ExpirationInMinutes\"] ?? \"60\");\n\n            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey!));\n            var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n            var claims = new List<Claim>\n            {\n                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n                new Claim(ClaimTypes.Name, user.Username),\n                new Claim(ClaimTypes.Role, user.Role.ToString()),\n                new Claim(\"FirstName\", user.FirstName),\n                new Claim(\"LastName\", user.LastName)\n            };\n\n            if (user.SocietyId.HasValue)\n            {\n                claims.Add(new Claim(\"SocietyId\", user.SocietyId.Value.ToString()));\n            }\n\n            var token = new JwtSecurityToken(\n                issuer: issuer,\n                audience: audience,\n                claims: claims,\n                expires: DateTime.UtcNow.AddMinutes(expirationInMinutes),\n                signingCredentials: credentials\n            );\n\n            return new JwtSecurityTokenHandler().WriteToken(token);\n        }\n\n        public ClaimsPrincipal? ValidateToken(string token)\n        {\n            try\n            {\n                var jwtSettings = _configuration.GetSection(\"JwtSettings\");\n                var secretKey = jwtSettings[\"SecretKey\"];\n                var issuer = jwtSettings[\"Issuer\"];\n                var audience = jwtSettings[\"Audience\"];\n\n                var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey!));\n\n                var tokenHandler = new JwtSecurityTokenHandler();\n                var validationParameters = new TokenValidationParameters\n                {\n                    ValidateIssuerSigningKey = true,\n                    IssuerSigningKey = key,\n                    ValidateIssuer = true,\n                    ValidIssuer = issuer,\n                    ValidateAudience = true,\n                    ValidAudience = audience,\n                    ValidateLifetime = true,\n                    ClockSkew = TimeSpan.Zero\n                };\n\n                var principal = tokenHandler.ValidateToken(token, validationParameters, out SecurityToken validatedToken);\n                return principal;\n            }\n            catch\n            {\n                return null;\n            }\n        }\n    }\n}\n","size_bytes":3093},"Helpers/PasswordHelper.cs":{"content":"using BCrypt.Net;\n\nnamespace SocietyManagement.Helpers\n{\n    public static class PasswordHelper\n    {\n        public static string HashPassword(string password)\n        {\n            return BCrypt.Net.BCrypt.HashPassword(password);\n        }\n\n        public static bool VerifyPassword(string password, string hash)\n        {\n            return BCrypt.Net.BCrypt.Verify(password, hash);\n        }\n    }\n}\n","size_bytes":404},"Middleware/RoleAuthorizationMiddleware.cs":{"content":"using System.Security.Claims;\nusing SocietyManagement.Enums;\n\nnamespace SocietyManagement.Middleware\n{\n    public class RoleAuthorizationMiddleware\n    {\n        private readonly RequestDelegate _next;\n\n        public RoleAuthorizationMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public async Task InvokeAsync(HttpContext context)\n        {\n            // Add user context to HttpContext.Items for easy access in controllers\n            if (context.User.Identity?.IsAuthenticated ?? false)\n            {\n                var userIdClaim = context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n                var roleClaim = context.User.FindFirst(ClaimTypes.Role)?.Value;\n                var societyIdClaim = context.User.FindFirst(\"SocietyId\")?.Value;\n\n                if (int.TryParse(userIdClaim, out var userId))\n                {\n                    context.Items[\"UserId\"] = userId;\n                }\n\n                if (Enum.TryParse<UserRole>(roleClaim, out var role))\n                {\n                    context.Items[\"UserRole\"] = role;\n                }\n\n                if (int.TryParse(societyIdClaim, out var societyId))\n                {\n                    context.Items[\"SocietyId\"] = societyId;\n                }\n            }\n\n            await _next(context);\n        }\n    }\n}\n","size_bytes":1348},"Models/Member.cs":{"content":"using System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing SocietyManagement.Enums;\n\nnamespace SocietyManagement.Models\n{\n    public class Member\n    {\n        [Key]\n        public int Id { get; set; }\n\n        // Auto-generated Member Number (MEM_serial)\n        [Required]\n        [StringLength(20)]\n        public string MemberNumber { get; set; } = string.Empty;\n\n        // Basic Information\n        [Required]\n        [StringLength(100)]\n        public string Name { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string FatherHusbandName { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string OfficeAddress { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string City { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string PhoneOffice { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string PhoneResidence { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Mobile { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string Designation { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string ResidenceAddress { get; set; } = string.Empty;\n\n        public DateTime? DateOfBirth { get; set; }\n\n        public DateTime? DateOfJoiningSociety { get; set; }\n\n        [StringLength(255)]\n        public string Email { get; set; } = string.Empty;\n\n        public DateTime DateOfJoining { get; set; } = DateTime.UtcNow;\n\n        public DateTime? DateOfResignation { get; set; }\n\n        // Nominee Information\n        [StringLength(100)]\n        public string NomineeName { get; set; } = string.Empty;\n\n        [StringLength(50)]\n        public string NomineeRelation { get; set; } = string.Empty;\n\n        // Opening Balance\n        public decimal OpeningBalanceAmount { get; set; } = 0;\n\n        [StringLength(10)]\n        public string OpeningBalanceType { get; set; } = \"Cr\"; // Cr, Dr, CD\n\n        // Bank Details\n        [StringLength(100)]\n        public string BankName { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string PayableAt { get; set; } = string.Empty;\n\n        [StringLength(50)]\n        public string AccountNumber { get; set; } = string.Empty;\n\n        // Status and Date\n        public MemberStatus Status { get; set; } = MemberStatus.Active;\n\n        public DateTime StatusDate { get; set; } = DateTime.UtcNow;\n\n        // Deductions\n        public decimal ShareDeduction { get; set; } = 0;\n        public decimal WithdrawalDeduction { get; set; } = 0;\n        public decimal GeneralLoanInstalment { get; set; } = 0;\n        public decimal EmergencyLoanInstalment { get; set; } = 0;\n\n        // File Upload Paths\n        [StringLength(500)]\n        public string PhotoPath { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string SignaturePath { get; set; } = string.Empty;\n\n        // Foreign key to User who created this member\n        [Required]\n        public int CreatedByUserId { get; set; }\n\n        [ForeignKey(\"CreatedByUserId\")]\n        public virtual User CreatedByUser { get; set; } = null!;\n\n        // Foreign key to Society\n        [Required]\n        public int SocietyId { get; set; }\n\n        [ForeignKey(\"SocietyId\")]\n        public virtual Society Society { get; set; } = null!;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n","size_bytes":3577},"Models/Society.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace SocietyManagement.Models\n{\n    public class Society\n    {\n        [Key]\n        public int Id { get; set; }\n\n        [Required]\n        [StringLength(200)]\n        public string SocietyName { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string RegistrationNumber { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string Address { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string City { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Phone { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Fax { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string Email { get; set; } = string.Empty;\n\n        [StringLength(200)]\n        public string Website { get; set; } = string.Empty;\n\n        public decimal Dividend { get; set; }\n        public decimal Overdraft { get; set; }\n        public decimal CurrentDeposit { get; set; }\n        public decimal Loan { get; set; }\n        public decimal EmergencyLoan { get; set; }\n        public decimal LAS { get; set; }\n        public decimal ShareLimit { get; set; }\n        public decimal LoanLimit { get; set; }\n        public decimal EmergencyLoanLimit { get; set; }\n        public decimal ChequeBounceCharge { get; set; }\n        public decimal ChequeReturnCharge { get; set; }\n        public decimal Cash { get; set; }\n        public decimal Bonus { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // Navigation properties\n        public virtual ICollection<User> Users { get; set; } = new List<User>();\n        public virtual ICollection<Member> Members { get; set; } = new List<Member>();\n        public virtual ICollection<SocietyEditPending> PendingEdits { get; set; } = new List<SocietyEditPending>();\n    }\n}\n","size_bytes":1986},"Models/SocietyEditApproval.cs":{"content":"using System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace SocietyManagement.Models\n{\n    public class SocietyEditApproval\n    {\n        [Key]\n        public int Id { get; set; }\n\n        [Required]\n        public int PendingEditId { get; set; }\n\n        [ForeignKey(\"PendingEditId\")]\n        public virtual SocietyEditPending PendingEdit { get; set; } = null!;\n\n        [Required]\n        public int UserId { get; set; }\n\n        [ForeignKey(\"UserId\")]\n        public virtual User User { get; set; } = null!;\n\n        public bool IsApproved { get; set; }\n        public string? Comments { get; set; }\n        public DateTime ApprovedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n","size_bytes":727},"Models/SocietyEditPending.cs":{"content":"using System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace SocietyManagement.Models\n{\n    public class SocietyEditPending\n    {\n        [Key]\n        public int Id { get; set; }\n\n        [Required]\n        public int SocietyId { get; set; }\n\n        [ForeignKey(\"SocietyId\")]\n        public virtual Society Society { get; set; } = null!;\n\n        [Required]\n        public int EditedByUserId { get; set; }\n\n        [ForeignKey(\"EditedByUserId\")]\n        public virtual User EditedByUser { get; set; } = null!;\n\n        // Pending field values (JSON format or individual fields)\n        [StringLength(200)]\n        public string? SocietyName { get; set; }\n\n        [StringLength(100)]\n        public string? RegistrationNumber { get; set; }\n\n        [StringLength(500)]\n        public string? Address { get; set; }\n\n        [StringLength(100)]\n        public string? City { get; set; }\n\n        [StringLength(20)]\n        public string? Phone { get; set; }\n\n        [StringLength(20)]\n        public string? Fax { get; set; }\n\n        [StringLength(100)]\n        public string? Email { get; set; }\n\n        [StringLength(200)]\n        public string? Website { get; set; }\n\n        public decimal? Dividend { get; set; }\n        public decimal? Overdraft { get; set; }\n        public decimal? CurrentDeposit { get; set; }\n        public decimal? Loan { get; set; }\n        public decimal? EmergencyLoan { get; set; }\n        public decimal? LAS { get; set; }\n        public decimal? ShareLimit { get; set; }\n        public decimal? LoanLimit { get; set; }\n        public decimal? EmergencyLoanLimit { get; set; }\n        public decimal? ChequeBounceCharge { get; set; }\n        public decimal? ChequeReturnCharge { get; set; }\n        public decimal? Cash { get; set; }\n        public decimal? Bonus { get; set; }\n\n        public bool IsApproved { get; set; } = false;\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // Navigation properties\n        public virtual ICollection<SocietyEditApproval> Approvals { get; set; } = new List<SocietyEditApproval>();\n    }\n}\n","size_bytes":2140},"Models/User.cs":{"content":"using SocietyManagement.Enums;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace SocietyManagement.Models\n{\n    public class User\n    {\n        [Key]\n        public int Id { get; set; }\n\n        [Required]\n        [StringLength(100)]\n        public string Username { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(255)]\n        public string PasswordHash { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string FirstName { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string LastName { get; set; } = string.Empty;\n\n        [StringLength(255)]\n        public string Email { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Phone { get; set; } = string.Empty;\n\n        [Required]\n        public UserRole Role { get; set; }\n\n        // Foreign key to Society (null for SuperAdmin)\n        public int? SocietyId { get; set; }\n\n        [ForeignKey(\"SocietyId\")]\n        public virtual Society? Society { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // Navigation properties\n        public virtual ICollection<Member> Members { get; set; } = new List<Member>();\n        public virtual ICollection<SocietyEditApproval> EditApprovals { get; set; } = new List<SocietyEditApproval>();\n    }\n}\n","size_bytes":1494},"Services/AuthService.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing SocietyManagement.Data;\nusing SocietyManagement.Helpers;\nusing SocietyManagement.Models.DTOs;\n\nnamespace SocietyManagement.Services\n{\n    public class AuthService : IAuthService\n    {\n        private readonly ApplicationDbContext _context;\n        private readonly JwtHelper _jwtHelper;\n\n        public AuthService(ApplicationDbContext context, JwtHelper jwtHelper)\n        {\n            _context = context;\n            _jwtHelper = jwtHelper;\n        }\n\n        public async Task<LoginResponseDto?> LoginAsync(LoginDto loginDto)\n        {\n            var user = await _context.Users\n                .Include(u => u.Society)\n                .FirstOrDefaultAsync(u => u.Username == loginDto.Username);\n\n            if (user == null || !PasswordHelper.VerifyPassword(loginDto.Password, user.PasswordHash))\n            {\n                return null;\n            }\n\n            var token = _jwtHelper.GenerateToken(user);\n\n            var userDto = new UserDto\n            {\n                Id = user.Id,\n                Username = user.Username,\n                FirstName = user.FirstName,\n                LastName = user.LastName,\n                Email = user.Email,\n                Phone = user.Phone,\n                Role = user.Role,\n                SocietyId = user.SocietyId,\n                SocietyName = user.Society?.SocietyName,\n                CreatedAt = user.CreatedAt\n            };\n\n            return new LoginResponseDto\n            {\n                Token = token,\n                User = userDto\n            };\n        }\n\n        public async Task<UserDto?> GetUserByIdAsync(int userId)\n        {\n            var user = await _context.Users\n                .Include(u => u.Society)\n                .FirstOrDefaultAsync(u => u.Id == userId);\n\n            if (user == null) return null;\n\n            return new UserDto\n            {\n                Id = user.Id,\n                Username = user.Username,\n                FirstName = user.FirstName,\n                LastName = user.LastName,\n                Email = user.Email,\n                Phone = user.Phone,\n                Role = user.Role,\n                SocietyId = user.SocietyId,\n                SocietyName = user.Society?.SocietyName,\n                CreatedAt = user.CreatedAt\n            };\n        }\n    }\n}\n","size_bytes":2330},"Services/IAuthService.cs":{"content":"using SocietyManagement.Models.DTOs;\n\nnamespace SocietyManagement.Services\n{\n    public interface IAuthService\n    {\n        Task<LoginResponseDto?> LoginAsync(LoginDto loginDto);\n        Task<UserDto?> GetUserByIdAsync(int userId);\n    }\n}\n","size_bytes":241},"Services/IMemberService.cs":{"content":"using SocietyManagement.Models.DTOs;\n\nnamespace SocietyManagement.Services\n{\n    public interface IMemberService\n    {\n        Task<MemberDto> CreateMemberAsync(CreateMemberDto createMemberDto, int createdByUserId, int societyId);\n        Task<List<MemberDto>> GetMembersAsync(int? societyId = null, int? createdByUserId = null);\n        Task<MemberDto?> GetMemberByIdAsync(int memberId, int? societyId = null);\n        Task<bool> UpdateMemberAsync(int memberId, UpdateMemberDto updateMemberDto, int? societyId = null);\n        Task<string> GenerateNextMemberNumberAsync(int societyId);\n        Task<bool> UploadMemberPhotoAsync(int memberId, string photoPath);\n        Task<bool> UploadMemberSignatureAsync(int memberId, string signaturePath);\n    }\n}\n","size_bytes":753},"Services/ISocietyService.cs":{"content":"using SocietyManagement.Models.DTOs;\n\nnamespace SocietyManagement.Services\n{\n    public interface ISocietyService\n    {\n        Task<SocietyDto> CreateSocietyAsync(CreateSocietyDto createSocietyDto);\n        Task<List<SocietyDto>> GetSocietiesAsync(int? societyId = null);\n        Task<SocietyDto?> GetSocietyByIdAsync(int societyId, int? userSocietyId = null);\n        Task<bool> UpdateSocietyAsync(int societyId, UpdateSocietyDto updateSocietyDto, int userId, bool isSuperAdmin);\n        Task<List<PendingEditDto>> GetPendingEditsAsync(int? societyId = null);\n        Task<bool> ApprovePendingEditAsync(int pendingEditId, int userId, bool isApproved, string? comments = null);\n    }\n}\n","size_bytes":687},"Services/IUserService.cs":{"content":"using SocietyManagement.Models.DTOs;\n\nnamespace SocietyManagement.Services\n{\n    public interface IUserService\n    {\n        Task<UserDto> CreateUserAsync(CreateUserDto createUserDto, int societyId, bool isSuperAdmin = false);\n        Task<List<UserDto>> GetUsersAsync(int? societyId = null);\n        Task<UserDto?> GetUserByIdAsync(int userId, int? societyId = null);\n        Task<List<SocietyDto>> GetSocietiesForDropdownAsync();\n    }\n}\n","size_bytes":440},"Services/MemberService.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing SocietyManagement.Data;\nusing SocietyManagement.Models;\nusing SocietyManagement.Models.DTOs;\n\nnamespace SocietyManagement.Services\n{\n    public class MemberService : IMemberService\n    {\n        private readonly ApplicationDbContext _context;\n\n        public MemberService(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<string> GenerateNextMemberNumberAsync(int societyId)\n        {\n            // Get the society to access its name or ID for prefix\n            var society = await _context.Societies.FindAsync(societyId);\n            var prefix = society?.SocietyName?.Substring(0, Math.Min(3, society.SocietyName.Length)).ToUpper() ?? \"MEM\";\n\n            // Get the last member number for this society\n            var lastMember = await _context.Members\n                .Where(m => m.SocietyId == societyId && m.MemberNumber.StartsWith(prefix))\n                .OrderByDescending(m => m.MemberNumber)\n                .FirstOrDefaultAsync();\n\n            int nextSerial = 1;\n            if (lastMember != null)\n            {\n                // Extract the numeric part from the last member number\n                var lastNumberPart = lastMember.MemberNumber.Substring(prefix.Length);\n                if (int.TryParse(lastNumberPart, out int lastSerial))\n                {\n                    nextSerial = lastSerial + 1;\n                }\n            }\n\n            return $\"{prefix}{nextSerial:D4}\"; // Format as 4-digit number (e.g., MEM0001)\n        }\n\n        public async Task<MemberDto> CreateMemberAsync(CreateMemberDto createMemberDto, int createdByUserId, int societyId)\n        {\n            // Use the provided societyId or the one from DTO for Super Admin\n            var targetSocietyId = createMemberDto.BranchSocietyId ?? societyId;\n            \n            // Generate the next member number\n            var memberNumber = await GenerateNextMemberNumberAsync(targetSocietyId);\n\n            var member = new Member\n            {\n                MemberNumber = memberNumber,\n                Name = createMemberDto.Name,\n                FatherHusbandName = createMemberDto.FatherHusbandName,\n                OfficeAddress = createMemberDto.OfficeAddress,\n                City = createMemberDto.City,\n                PhoneOffice = createMemberDto.PhoneOffice,\n                PhoneResidence = createMemberDto.PhoneResidence,\n                Mobile = createMemberDto.Mobile,\n                Designation = createMemberDto.Designation,\n                ResidenceAddress = createMemberDto.ResidenceAddress,\n                DateOfBirth = createMemberDto.DateOfBirth,\n                DateOfJoiningSociety = createMemberDto.DateOfJoiningSociety,\n                Email = createMemberDto.Email,\n                DateOfJoining = createMemberDto.DateOfJoining,\n                DateOfResignation = createMemberDto.DateOfResignation,\n                NomineeName = createMemberDto.NomineeName,\n                NomineeRelation = createMemberDto.NomineeRelation,\n                OpeningBalanceAmount = createMemberDto.OpeningBalanceAmount,\n                OpeningBalanceType = createMemberDto.OpeningBalanceType,\n                BankName = createMemberDto.BankName,\n                PayableAt = createMemberDto.PayableAt,\n                AccountNumber = createMemberDto.AccountNumber,\n                Status = createMemberDto.Status,\n                StatusDate = createMemberDto.StatusDate,\n                ShareDeduction = createMemberDto.ShareDeduction,\n                WithdrawalDeduction = createMemberDto.WithdrawalDeduction,\n                GeneralLoanInstalment = createMemberDto.GeneralLoanInstalment,\n                EmergencyLoanInstalment = createMemberDto.EmergencyLoanInstalment,\n                CreatedByUserId = createdByUserId,\n                SocietyId = targetSocietyId\n            };\n\n            _context.Members.Add(member);\n            await _context.SaveChangesAsync();\n\n            return await GetMemberDtoAsync(member);\n        }\n\n        public async Task<List<MemberDto>> GetMembersAsync(int? societyId = null, int? createdByUserId = null)\n        {\n            var query = _context.Members\n                .Include(m => m.CreatedByUser)\n                .Include(m => m.Society)\n                .AsQueryable();\n\n            if (societyId.HasValue)\n            {\n                query = query.Where(m => m.SocietyId == societyId.Value);\n            }\n\n            if (createdByUserId.HasValue)\n            {\n                query = query.Where(m => m.CreatedByUserId == createdByUserId.Value);\n            }\n\n            var members = await query.OrderBy(m => m.MemberNumber).ToListAsync();\n\n            return members.Select(m => MapToMemberDto(m)).ToList();\n        }\n\n        public async Task<MemberDto?> GetMemberByIdAsync(int memberId, int? societyId = null)\n        {\n            var query = _context.Members\n                .Include(m => m.CreatedByUser)\n                .Include(m => m.Society)\n                .Where(m => m.Id == memberId);\n\n            if (societyId.HasValue)\n            {\n                query = query.Where(m => m.SocietyId == societyId.Value);\n            }\n\n            var member = await query.FirstOrDefaultAsync();\n\n            if (member == null) return null;\n\n            return MapToMemberDto(member);\n        }\n\n        public async Task<bool> UpdateMemberAsync(int memberId, UpdateMemberDto updateMemberDto, int? societyId = null)\n        {\n            var query = _context.Members.Where(m => m.Id == memberId);\n            \n            if (societyId.HasValue)\n            {\n                query = query.Where(m => m.SocietyId == societyId.Value);\n            }\n\n            var member = await query.FirstOrDefaultAsync();\n            if (member == null) return false;\n\n            // Update member properties\n            member.Name = updateMemberDto.Name;\n            member.FatherHusbandName = updateMemberDto.FatherHusbandName;\n            member.OfficeAddress = updateMemberDto.OfficeAddress;\n            member.City = updateMemberDto.City;\n            member.PhoneOffice = updateMemberDto.PhoneOffice;\n            member.PhoneResidence = updateMemberDto.PhoneResidence;\n            member.Mobile = updateMemberDto.Mobile;\n            member.Designation = updateMemberDto.Designation;\n            member.ResidenceAddress = updateMemberDto.ResidenceAddress;\n            member.DateOfBirth = updateMemberDto.DateOfBirth;\n            member.DateOfJoiningSociety = updateMemberDto.DateOfJoiningSociety;\n            member.Email = updateMemberDto.Email;\n            member.DateOfJoining = updateMemberDto.DateOfJoining;\n            member.DateOfResignation = updateMemberDto.DateOfResignation;\n            member.NomineeName = updateMemberDto.NomineeName;\n            member.NomineeRelation = updateMemberDto.NomineeRelation;\n            member.OpeningBalanceAmount = updateMemberDto.OpeningBalanceAmount;\n            member.OpeningBalanceType = updateMemberDto.OpeningBalanceType;\n            member.BankName = updateMemberDto.BankName;\n            member.PayableAt = updateMemberDto.PayableAt;\n            member.AccountNumber = updateMemberDto.AccountNumber;\n            member.Status = updateMemberDto.Status;\n            member.StatusDate = updateMemberDto.StatusDate;\n            member.ShareDeduction = updateMemberDto.ShareDeduction;\n            member.WithdrawalDeduction = updateMemberDto.WithdrawalDeduction;\n            member.GeneralLoanInstalment = updateMemberDto.GeneralLoanInstalment;\n            member.EmergencyLoanInstalment = updateMemberDto.EmergencyLoanInstalment;\n            member.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> UploadMemberPhotoAsync(int memberId, string photoPath)\n        {\n            var member = await _context.Members.FindAsync(memberId);\n            if (member == null) return false;\n\n            member.PhotoPath = photoPath;\n            member.UpdatedAt = DateTime.UtcNow;\n            \n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> UploadMemberSignatureAsync(int memberId, string signaturePath)\n        {\n            var member = await _context.Members.FindAsync(memberId);\n            if (member == null) return false;\n\n            member.SignaturePath = signaturePath;\n            member.UpdatedAt = DateTime.UtcNow;\n            \n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        private async Task<MemberDto> GetMemberDtoAsync(Member member)\n        {\n            var createdByUser = await _context.Users.FindAsync(member.CreatedByUserId);\n            var society = await _context.Societies.FindAsync(member.SocietyId);\n\n            return MapToMemberDto(member, createdByUser, society);\n        }\n\n        private static MemberDto MapToMemberDto(Member member, User? createdByUser = null, Society? society = null)\n        {\n            return new MemberDto\n            {\n                Id = member.Id,\n                MemberNumber = member.MemberNumber,\n                Name = member.Name,\n                FatherHusbandName = member.FatherHusbandName,\n                OfficeAddress = member.OfficeAddress,\n                City = member.City,\n                PhoneOffice = member.PhoneOffice,\n                PhoneResidence = member.PhoneResidence,\n                Mobile = member.Mobile,\n                Designation = member.Designation,\n                ResidenceAddress = member.ResidenceAddress,\n                DateOfBirth = member.DateOfBirth,\n                DateOfJoiningSociety = member.DateOfJoiningSociety,\n                Email = member.Email,\n                DateOfJoining = member.DateOfJoining,\n                DateOfResignation = member.DateOfResignation,\n                NomineeName = member.NomineeName,\n                NomineeRelation = member.NomineeRelation,\n                OpeningBalanceAmount = member.OpeningBalanceAmount,\n                OpeningBalanceType = member.OpeningBalanceType,\n                BankName = member.BankName,\n                PayableAt = member.PayableAt,\n                AccountNumber = member.AccountNumber,\n                Status = member.Status,\n                StatusDate = member.StatusDate,\n                ShareDeduction = member.ShareDeduction,\n                WithdrawalDeduction = member.WithdrawalDeduction,\n                GeneralLoanInstalment = member.GeneralLoanInstalment,\n                EmergencyLoanInstalment = member.EmergencyLoanInstalment,\n                PhotoPath = member.PhotoPath,\n                SignaturePath = member.SignaturePath,\n                CreatedByUserId = member.CreatedByUserId,\n                CreatedByUserName = createdByUser != null ? $\"{createdByUser.FirstName} {createdByUser.LastName}\" : member.CreatedByUser != null ? $\"{member.CreatedByUser.FirstName} {member.CreatedByUser.LastName}\" : string.Empty,\n                SocietyId = member.SocietyId,\n                SocietyName = society?.SocietyName ?? member.Society?.SocietyName ?? string.Empty,\n                CreatedAt = member.CreatedAt,\n                UpdatedAt = member.UpdatedAt\n            };\n        }\n    }\n}","size_bytes":11298},"Services/SocietyService.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing SocietyManagement.Data;\nusing SocietyManagement.Models;\nusing SocietyManagement.Models.DTOs;\nusing SocietyManagement.Enums;\nusing SocietyManagement.Helpers;\n\nnamespace SocietyManagement.Services\n{\n    public class SocietyService : ISocietyService\n    {\n        private readonly ApplicationDbContext _context;\n\n        public SocietyService(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<SocietyDto> CreateSocietyAsync(CreateSocietyDto createSocietyDto)\n        {\n            using var transaction = await _context.Database.BeginTransactionAsync();\n\n            try\n            {\n                // Create society\n                var society = new Society\n                {\n                    SocietyName = createSocietyDto.SocietyName,\n                    RegistrationNumber = createSocietyDto.RegistrationNumber,\n                    Address = createSocietyDto.Address,\n                    City = createSocietyDto.City,\n                    Phone = createSocietyDto.Phone,\n                    Fax = createSocietyDto.Fax,\n                    Email = createSocietyDto.Email,\n                    Website = createSocietyDto.Website,\n                    Dividend = createSocietyDto.Dividend,\n                    Overdraft = createSocietyDto.Overdraft,\n                    CurrentDeposit = createSocietyDto.CurrentDeposit,\n                    Loan = createSocietyDto.Loan,\n                    EmergencyLoan = createSocietyDto.EmergencyLoan,\n                    LAS = createSocietyDto.LAS,\n                    ShareLimit = createSocietyDto.ShareLimit,\n                    LoanLimit = createSocietyDto.LoanLimit,\n                    EmergencyLoanLimit = createSocietyDto.EmergencyLoanLimit,\n                    ChequeBounceCharge = createSocietyDto.ChequeBounceCharge,\n                    ChequeReturnCharge = createSocietyDto.ChequeReturnCharge,\n                    Cash = createSocietyDto.Cash,\n                    Bonus = createSocietyDto.Bonus\n                };\n\n                _context.Societies.Add(society);\n                await _context.SaveChangesAsync();\n\n                // Create society admin\n                var admin = new User\n                {\n                    Username = createSocietyDto.AdminUsername,\n                    PasswordHash = PasswordHelper.HashPassword(createSocietyDto.AdminPassword),\n                    FirstName = createSocietyDto.AdminFirstName,\n                    LastName = createSocietyDto.AdminLastName,\n                    Email = createSocietyDto.AdminEmail,\n                    Phone = createSocietyDto.AdminPhone,\n                    Role = UserRole.SocietyAdmin,\n                    SocietyId = society.Id\n                };\n\n                _context.Users.Add(admin);\n                await _context.SaveChangesAsync();\n\n                await transaction.CommitAsync();\n\n                return new SocietyDto\n                {\n                    Id = society.Id,\n                    SocietyName = society.SocietyName,\n                    RegistrationNumber = society.RegistrationNumber,\n                    Address = society.Address,\n                    City = society.City,\n                    Phone = society.Phone,\n                    Fax = society.Fax,\n                    Email = society.Email,\n                    Website = society.Website,\n                    Dividend = society.Dividend,\n                    Overdraft = society.Overdraft,\n                    CurrentDeposit = society.CurrentDeposit,\n                    Loan = society.Loan,\n                    EmergencyLoan = society.EmergencyLoan,\n                    LAS = society.LAS,\n                    ShareLimit = society.ShareLimit,\n                    LoanLimit = society.LoanLimit,\n                    EmergencyLoanLimit = society.EmergencyLoanLimit,\n                    ChequeBounceCharge = society.ChequeBounceCharge,\n                    ChequeReturnCharge = society.ChequeReturnCharge,\n                    Cash = society.Cash,\n                    Bonus = society.Bonus,\n                    CreatedAt = society.CreatedAt,\n                    UpdatedAt = society.UpdatedAt,\n                    HasPendingEdits = false\n                };\n            }\n            catch\n            {\n                await transaction.RollbackAsync();\n                throw;\n            }\n        }\n\n        public async Task<List<SocietyDto>> GetSocietiesAsync(int? societyId = null)\n        {\n            var query = _context.Societies.AsQueryable();\n\n            if (societyId.HasValue)\n            {\n                query = query.Where(s => s.Id == societyId.Value);\n            }\n\n            var societies = await query\n                .Include(s => s.PendingEdits)\n                .ToListAsync();\n\n            return societies.Select(s => new SocietyDto\n            {\n                Id = s.Id,\n                SocietyName = s.SocietyName,\n                RegistrationNumber = s.RegistrationNumber,\n                Address = s.Address,\n                City = s.City,\n                Phone = s.Phone,\n                Fax = s.Fax,\n                Email = s.Email,\n                Website = s.Website,\n                Dividend = s.Dividend,\n                Overdraft = s.Overdraft,\n                CurrentDeposit = s.CurrentDeposit,\n                Loan = s.Loan,\n                EmergencyLoan = s.EmergencyLoan,\n                LAS = s.LAS,\n                ShareLimit = s.ShareLimit,\n                LoanLimit = s.LoanLimit,\n                EmergencyLoanLimit = s.EmergencyLoanLimit,\n                ChequeBounceCharge = s.ChequeBounceCharge,\n                ChequeReturnCharge = s.ChequeReturnCharge,\n                Cash = s.Cash,\n                Bonus = s.Bonus,\n                CreatedAt = s.CreatedAt,\n                UpdatedAt = s.UpdatedAt,\n                HasPendingEdits = s.PendingEdits.Any(pe => !pe.IsApproved)\n            }).ToList();\n        }\n\n        public async Task<SocietyDto?> GetSocietyByIdAsync(int societyId, int? userSocietyId = null)\n        {\n            // If userSocietyId is provided, ensure the user can only access their own society\n            if (userSocietyId.HasValue && societyId != userSocietyId.Value)\n            {\n                return null;\n            }\n\n            var society = await _context.Societies\n                .Include(s => s.PendingEdits)\n                .FirstOrDefaultAsync(s => s.Id == societyId);\n\n            if (society == null) return null;\n\n            return new SocietyDto\n            {\n                Id = society.Id,\n                SocietyName = society.SocietyName,\n                RegistrationNumber = society.RegistrationNumber,\n                Address = society.Address,\n                City = society.City,\n                Phone = society.Phone,\n                Fax = society.Fax,\n                Email = society.Email,\n                Website = society.Website,\n                Dividend = society.Dividend,\n                Overdraft = society.Overdraft,\n                CurrentDeposit = society.CurrentDeposit,\n                Loan = society.Loan,\n                EmergencyLoan = society.EmergencyLoan,\n                LAS = society.LAS,\n                ShareLimit = society.ShareLimit,\n                LoanLimit = society.LoanLimit,\n                EmergencyLoanLimit = society.EmergencyLoanLimit,\n                ChequeBounceCharge = society.ChequeBounceCharge,\n                ChequeReturnCharge = society.ChequeReturnCharge,\n                Cash = society.Cash,\n                Bonus = society.Bonus,\n                CreatedAt = society.CreatedAt,\n                UpdatedAt = society.UpdatedAt,\n                HasPendingEdits = society.PendingEdits.Any(pe => !pe.IsApproved)\n            };\n        }\n\n        public async Task<bool> UpdateSocietyAsync(int societyId, UpdateSocietyDto updateSocietyDto, int userId, bool isSuperAdmin)\n        {\n            var society = await _context.Societies.FindAsync(societyId);\n            if (society == null) return false;\n\n            if (isSuperAdmin)\n            {\n                // Super admin changes apply immediately\n                if (!string.IsNullOrEmpty(updateSocietyDto.SocietyName))\n                    society.SocietyName = updateSocietyDto.SocietyName;\n                if (!string.IsNullOrEmpty(updateSocietyDto.RegistrationNumber))\n                    society.RegistrationNumber = updateSocietyDto.RegistrationNumber;\n                if (!string.IsNullOrEmpty(updateSocietyDto.Address))\n                    society.Address = updateSocietyDto.Address;\n                if (!string.IsNullOrEmpty(updateSocietyDto.City))\n                    society.City = updateSocietyDto.City;\n                if (!string.IsNullOrEmpty(updateSocietyDto.Phone))\n                    society.Phone = updateSocietyDto.Phone;\n                if (!string.IsNullOrEmpty(updateSocietyDto.Fax))\n                    society.Fax = updateSocietyDto.Fax;\n                if (!string.IsNullOrEmpty(updateSocietyDto.Email))\n                    society.Email = updateSocietyDto.Email;\n                if (!string.IsNullOrEmpty(updateSocietyDto.Website))\n                    society.Website = updateSocietyDto.Website;\n\n                if (updateSocietyDto.Dividend.HasValue) society.Dividend = updateSocietyDto.Dividend.Value;\n                if (updateSocietyDto.Overdraft.HasValue) society.Overdraft = updateSocietyDto.Overdraft.Value;\n                if (updateSocietyDto.CurrentDeposit.HasValue) society.CurrentDeposit = updateSocietyDto.CurrentDeposit.Value;\n                if (updateSocietyDto.Loan.HasValue) society.Loan = updateSocietyDto.Loan.Value;\n                if (updateSocietyDto.EmergencyLoan.HasValue) society.EmergencyLoan = updateSocietyDto.EmergencyLoan.Value;\n                if (updateSocietyDto.LAS.HasValue) society.LAS = updateSocietyDto.LAS.Value;\n                if (updateSocietyDto.ShareLimit.HasValue) society.ShareLimit = updateSocietyDto.ShareLimit.Value;\n                if (updateSocietyDto.LoanLimit.HasValue) society.LoanLimit = updateSocietyDto.LoanLimit.Value;\n                if (updateSocietyDto.EmergencyLoanLimit.HasValue) society.EmergencyLoanLimit = updateSocietyDto.EmergencyLoanLimit.Value;\n                if (updateSocietyDto.ChequeBounceCharge.HasValue) society.ChequeBounceCharge = updateSocietyDto.ChequeBounceCharge.Value;\n                if (updateSocietyDto.ChequeReturnCharge.HasValue) society.ChequeReturnCharge = updateSocietyDto.ChequeReturnCharge.Value;\n                if (updateSocietyDto.Cash.HasValue) society.Cash = updateSocietyDto.Cash.Value;\n                if (updateSocietyDto.Bonus.HasValue) society.Bonus = updateSocietyDto.Bonus.Value;\n\n                society.UpdatedAt = DateTime.UtcNow;\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            else\n            {\n                // Society admin changes go to pending state\n                var pendingEdit = new SocietyEditPending\n                {\n                    SocietyId = societyId,\n                    EditedByUserId = userId,\n                    SocietyName = updateSocietyDto.SocietyName,\n                    RegistrationNumber = updateSocietyDto.RegistrationNumber,\n                    Address = updateSocietyDto.Address,\n                    City = updateSocietyDto.City,\n                    Phone = updateSocietyDto.Phone,\n                    Fax = updateSocietyDto.Fax,\n                    Email = updateSocietyDto.Email,\n                    Website = updateSocietyDto.Website,\n                    Dividend = updateSocietyDto.Dividend,\n                    Overdraft = updateSocietyDto.Overdraft,\n                    CurrentDeposit = updateSocietyDto.CurrentDeposit,\n                    Loan = updateSocietyDto.Loan,\n                    EmergencyLoan = updateSocietyDto.EmergencyLoan,\n                    LAS = updateSocietyDto.LAS,\n                    ShareLimit = updateSocietyDto.ShareLimit,\n                    LoanLimit = updateSocietyDto.LoanLimit,\n                    EmergencyLoanLimit = updateSocietyDto.EmergencyLoanLimit,\n                    ChequeBounceCharge = updateSocietyDto.ChequeBounceCharge,\n                    ChequeReturnCharge = updateSocietyDto.ChequeReturnCharge,\n                    Cash = updateSocietyDto.Cash,\n                    Bonus = updateSocietyDto.Bonus\n                };\n\n                _context.SocietyEditsPending.Add(pendingEdit);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n        }\n\n        public async Task<List<PendingEditDto>> GetPendingEditsAsync(int? societyId = null)\n        {\n            var query = _context.SocietyEditsPending\n                .Include(pe => pe.Society)\n                .Include(pe => pe.EditedByUser)\n                .Include(pe => pe.Approvals)\n                    .ThenInclude(a => a.User)\n                .Where(pe => !pe.IsApproved);\n\n            if (societyId.HasValue)\n            {\n                query = query.Where(pe => pe.SocietyId == societyId.Value);\n            }\n\n            var pendingEdits = await query.ToListAsync();\n\n            return pendingEdits.Select(pe => new PendingEditDto\n            {\n                Id = pe.Id,\n                SocietyId = pe.SocietyId,\n                SocietyName = pe.Society.SocietyName,\n                EditedByUserName = $\"{pe.EditedByUser.FirstName} {pe.EditedByUser.LastName}\",\n                CreatedAt = pe.CreatedAt,\n                IsApproved = pe.IsApproved,\n                Approvals = pe.Approvals.Select(a => new ApprovalDto\n                {\n                    UserId = a.UserId,\n                    UserName = $\"{a.User.FirstName} {a.User.LastName}\",\n                    IsApproved = a.IsApproved,\n                    Comments = a.Comments,\n                    ApprovedAt = a.ApprovedAt\n                }).ToList(),\n                PendingChanges = new UpdateSocietyDto\n                {\n                    SocietyName = pe.SocietyName,\n                    RegistrationNumber = pe.RegistrationNumber,\n                    Address = pe.Address,\n                    City = pe.City,\n                    Phone = pe.Phone,\n                    Fax = pe.Fax,\n                    Email = pe.Email,\n                    Website = pe.Website,\n                    Dividend = pe.Dividend,\n                    Overdraft = pe.Overdraft,\n                    CurrentDeposit = pe.CurrentDeposit,\n                    Loan = pe.Loan,\n                    EmergencyLoan = pe.EmergencyLoan,\n                    LAS = pe.LAS,\n                    ShareLimit = pe.ShareLimit,\n                    LoanLimit = pe.LoanLimit,\n                    EmergencyLoanLimit = pe.EmergencyLoanLimit,\n                    ChequeBounceCharge = pe.ChequeBounceCharge,\n                    ChequeReturnCharge = pe.ChequeReturnCharge,\n                    Cash = pe.Cash,\n                    Bonus = pe.Bonus\n                }\n            }).ToList();\n        }\n\n        public async Task<bool> ApprovePendingEditAsync(int pendingEditId, int userId, bool isApproved, string? comments = null)\n        {\n            var pendingEdit = await _context.SocietyEditsPending\n                .Include(pe => pe.Society)\n                .Include(pe => pe.Approvals)\n                .FirstOrDefaultAsync(pe => pe.Id == pendingEditId);\n\n            if (pendingEdit == null || pendingEdit.IsApproved) return false;\n\n            // Check if user already approved/rejected this edit\n            var existingApproval = pendingEdit.Approvals.FirstOrDefault(a => a.UserId == userId);\n            if (existingApproval != null)\n            {\n                existingApproval.IsApproved = isApproved;\n                existingApproval.Comments = comments;\n                existingApproval.ApprovedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                var approval = new SocietyEditApproval\n                {\n                    PendingEditId = pendingEditId,\n                    UserId = userId,\n                    IsApproved = isApproved,\n                    Comments = comments\n                };\n                _context.SocietyEditApprovals.Add(approval);\n            }\n\n            await _context.SaveChangesAsync();\n\n            // Check if all users of the society have approved\n            var societyUsers = await _context.Users\n                .Where(u => u.SocietyId == pendingEdit.SocietyId && u.Role == UserRole.User)\n                .CountAsync();\n\n            var approvedCount = await _context.SocietyEditApprovals\n                .Where(a => a.PendingEditId == pendingEditId && a.IsApproved)\n                .CountAsync();\n\n            if (approvedCount == societyUsers && societyUsers > 0)\n            {\n                // Apply the changes to the society\n                var society = pendingEdit.Society;\n                \n                if (!string.IsNullOrEmpty(pendingEdit.SocietyName))\n                    society.SocietyName = pendingEdit.SocietyName;\n                if (!string.IsNullOrEmpty(pendingEdit.RegistrationNumber))\n                    society.RegistrationNumber = pendingEdit.RegistrationNumber;\n                if (!string.IsNullOrEmpty(pendingEdit.Address))\n                    society.Address = pendingEdit.Address;\n                if (!string.IsNullOrEmpty(pendingEdit.City))\n                    society.City = pendingEdit.City;\n                if (!string.IsNullOrEmpty(pendingEdit.Phone))\n                    society.Phone = pendingEdit.Phone;\n                if (!string.IsNullOrEmpty(pendingEdit.Fax))\n                    society.Fax = pendingEdit.Fax;\n                if (!string.IsNullOrEmpty(pendingEdit.Email))\n                    society.Email = pendingEdit.Email;\n                if (!string.IsNullOrEmpty(pendingEdit.Website))\n                    society.Website = pendingEdit.Website;\n\n                if (pendingEdit.Dividend.HasValue) society.Dividend = pendingEdit.Dividend.Value;\n                if (pendingEdit.Overdraft.HasValue) society.Overdraft = pendingEdit.Overdraft.Value;\n                if (pendingEdit.CurrentDeposit.HasValue) society.CurrentDeposit = pendingEdit.CurrentDeposit.Value;\n                if (pendingEdit.Loan.HasValue) society.Loan = pendingEdit.Loan.Value;\n                if (pendingEdit.EmergencyLoan.HasValue) society.EmergencyLoan = pendingEdit.EmergencyLoan.Value;\n                if (pendingEdit.LAS.HasValue) society.LAS = pendingEdit.LAS.Value;\n                if (pendingEdit.ShareLimit.HasValue) society.ShareLimit = pendingEdit.ShareLimit.Value;\n                if (pendingEdit.LoanLimit.HasValue) society.LoanLimit = pendingEdit.LoanLimit.Value;\n                if (pendingEdit.EmergencyLoanLimit.HasValue) society.EmergencyLoanLimit = pendingEdit.EmergencyLoanLimit.Value;\n                if (pendingEdit.ChequeBounceCharge.HasValue) society.ChequeBounceCharge = pendingEdit.ChequeBounceCharge.Value;\n                if (pendingEdit.ChequeReturnCharge.HasValue) society.ChequeReturnCharge = pendingEdit.ChequeReturnCharge.Value;\n                if (pendingEdit.Cash.HasValue) society.Cash = pendingEdit.Cash.Value;\n                if (pendingEdit.Bonus.HasValue) society.Bonus = pendingEdit.Bonus.Value;\n\n                society.UpdatedAt = DateTime.UtcNow;\n                pendingEdit.IsApproved = true;\n\n                await _context.SaveChangesAsync();\n            }\n\n            return true;\n        }\n    }\n}\n","size_bytes":19463},"Services/UserService.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing SocietyManagement.Data;\nusing SocietyManagement.Models;\nusing SocietyManagement.Models.DTOs;\nusing SocietyManagement.Enums;\nusing SocietyManagement.Helpers;\n\nnamespace SocietyManagement.Services\n{\n    public class UserService : IUserService\n    {\n        private readonly ApplicationDbContext _context;\n\n        public UserService(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<UserDto> CreateUserAsync(CreateUserDto createUserDto, int societyId, bool isSuperAdmin = false)\n        {\n            var user = new User\n            {\n                Username = createUserDto.Username,\n                PasswordHash = PasswordHelper.HashPassword(createUserDto.Password),\n                FirstName = createUserDto.FirstName,\n                LastName = createUserDto.LastName,\n                Email = createUserDto.Email,\n                Phone = createUserDto.Phone,\n                Role = isSuperAdmin ? createUserDto.Role : UserRole.User,\n                SocietyId = societyId\n            };\n\n            _context.Users.Add(user);\n            await _context.SaveChangesAsync();\n\n            var society = await _context.Societies.FindAsync(societyId);\n\n            return new UserDto\n            {\n                Id = user.Id,\n                Username = user.Username,\n                FirstName = user.FirstName,\n                LastName = user.LastName,\n                Email = user.Email,\n                Phone = user.Phone,\n                Role = user.Role,\n                SocietyId = user.SocietyId,\n                SocietyName = society?.SocietyName,\n                CreatedAt = user.CreatedAt\n            };\n        }\n\n        public async Task<List<UserDto>> GetUsersAsync(int? societyId = null)\n        {\n            var query = _context.Users\n                .Include(u => u.Society)\n                .Where(u => u.Role != UserRole.SuperAdmin);\n\n            if (societyId.HasValue)\n            {\n                query = query.Where(u => u.SocietyId == societyId.Value);\n            }\n\n            var users = await query.ToListAsync();\n\n            return users.Select(u => new UserDto\n            {\n                Id = u.Id,\n                Username = u.Username,\n                FirstName = u.FirstName,\n                LastName = u.LastName,\n                Email = u.Email,\n                Phone = u.Phone,\n                Role = u.Role,\n                SocietyId = u.SocietyId,\n                SocietyName = u.Society?.SocietyName,\n                CreatedAt = u.CreatedAt\n            }).ToList();\n        }\n\n        public async Task<UserDto?> GetUserByIdAsync(int userId, int? societyId = null)\n        {\n            var query = _context.Users\n                .Include(u => u.Society)\n                .Where(u => u.Id == userId);\n\n            if (societyId.HasValue)\n            {\n                query = query.Where(u => u.SocietyId == societyId.Value);\n            }\n\n            var user = await query.FirstOrDefaultAsync();\n\n            if (user == null) return null;\n\n            return new UserDto\n            {\n                Id = user.Id,\n                Username = user.Username,\n                FirstName = user.FirstName,\n                LastName = user.LastName,\n                Email = user.Email,\n                Phone = user.Phone,\n                Role = user.Role,\n                SocietyId = user.SocietyId,\n                SocietyName = user.Society?.SocietyName,\n                CreatedAt = user.CreatedAt\n            };\n        }\n\n        public async Task<List<SocietyDto>> GetSocietiesForDropdownAsync()\n        {\n            var societies = await _context.Societies\n                .OrderBy(s => s.SocietyName)\n                .ToListAsync();\n\n            return societies.Select(s => new SocietyDto\n            {\n                Id = s.Id,\n                SocietyName = s.SocietyName,\n                RegistrationNumber = s.RegistrationNumber,\n                Address = s.Address,\n                City = s.City,\n                Phone = s.Phone,\n                Fax = s.Fax,\n                Email = s.Email,\n                Website = s.Website,\n                Dividend = s.Dividend,\n                Overdraft = s.Overdraft,\n                CurrentDeposit = s.CurrentDeposit,\n                Loan = s.Loan,\n                EmergencyLoan = s.EmergencyLoan,\n                LAS = s.LAS,\n                ShareLimit = s.ShareLimit,\n                LoanLimit = s.LoanLimit,\n                EmergencyLoanLimit = s.EmergencyLoanLimit,\n                ChequeBounceCharge = s.ChequeBounceCharge,\n                ChequeReturnCharge = s.ChequeReturnCharge,\n                Cash = s.Cash,\n                Bonus = s.Bonus,\n                CreatedAt = s.CreatedAt,\n                UpdatedAt = s.UpdatedAt\n            }).ToList();\n        }\n    }\n}","size_bytes":4873},"src/main.server.ts":{"content":"import { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { config } from './app/app.config.server';\n\nconst bootstrap = () => bootstrapApplication(AppComponent, config);\n\nexport default bootstrap;\n","size_bytes":264},"src/main.ts":{"content":"import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));\n","size_bytes":250},"src/styles.css":{"content":"\r\n@import '@angular/material/prebuilt-themes/indigo-pink.css';\r\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\r\n\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n/* Professional Design System - Metronic Style */\r\n:root {\r\n  /* Primary Color Palette - Professional Blues & Purples */\r\n  --color-primary-50: #eff6ff;\r\n  --color-primary-100: #dbeafe;\r\n  --color-primary-200: #bfdbfe;\r\n  --color-primary-300: #93c5fd;\r\n  --color-primary-400: #60a5fa;\r\n  --color-primary-500: #3b82f6;\r\n  --color-primary-600: #2563eb;\r\n  --color-primary-700: #1d4ed8;\r\n  --color-primary-800: #1e40af;\r\n  --color-primary-900: #1e3a8a;\r\n\r\n  /* Secondary Color Palette - Professional Purples */\r\n  --color-secondary-50: #faf5ff;\r\n  --color-secondary-100: #f3e8ff;\r\n  --color-secondary-200: #e9d5ff;\r\n  --color-secondary-300: #d8b4fe;\r\n  --color-secondary-400: #c084fc;\r\n  --color-secondary-500: #a855f7;\r\n  --color-secondary-600: #9333ea;\r\n  --color-secondary-700: #7c3aed;\r\n  --color-secondary-800: #6b21a8;\r\n  --color-secondary-900: #581c87;\r\n\r\n  /* Success, Warning, Danger Colors */\r\n  --color-success-500: #10b981;\r\n  --color-success-600: #059669;\r\n  --color-warning-500: #f59e0b;\r\n  --color-warning-600: #d97706;\r\n  --color-danger-500: #ef4444;\r\n  --color-danger-600: #dc2626;\r\n  --color-info-500: #06b6d4;\r\n  --color-info-600: #0891b2;\r\n\r\n  /* Professional Gradients - Metronic Style */\r\n  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\r\n  --gradient-success: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\r\n  --gradient-warning: linear-gradient(135deg, #fa709a 0%, #fee140 100%);\r\n  --gradient-sidebar: linear-gradient(180deg, #1a202c 0%, #2d3748 50%, #1a202c 100%);\r\n  --gradient-header: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\r\n  --gradient-card-header: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\r\n\r\n  /* Light Theme Variables */\r\n  --color-bg-primary: #ffffff;\r\n  --color-bg-secondary: #f8fafc;\r\n  --color-bg-tertiary: #f1f5f9;\r\n  --color-bg-card: #ffffff;\r\n  --color-bg-input: #ffffff;\r\n  \r\n  --color-text-primary: #1e293b;\r\n  --color-text-secondary: #475569;\r\n  --color-text-muted: #64748b;\r\n  --color-text-light: #94a3b8;\r\n  --color-text-inverse: #ffffff;\r\n  \r\n  --color-border-primary: #e2e8f0;\r\n  --color-border-secondary: #cbd5e1;\r\n  --color-border-focus: #3b82f6;\r\n  --color-border-error: #ef4444;\r\n  \r\n  /* Professional Shadows */\r\n  --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);\r\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\r\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);\r\n  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);\r\n  \r\n  /* Professional Border Radius */\r\n  --radius-sm: 6px;\r\n  --radius-md: 8px;\r\n  --radius-lg: 12px;\r\n  --radius-xl: 16px;\r\n  --radius-2xl: 24px;\r\n  \r\n  /* Professional Spacing */\r\n  --spacing-xs: 4px;\r\n  --spacing-sm: 8px;\r\n  --spacing-md: 16px;\r\n  --spacing-lg: 24px;\r\n  --spacing-xl: 32px;\r\n  --spacing-2xl: 48px;\r\n  --spacing-3xl: 64px;\r\n}\r\n\r\n/* Dark Theme Variables */\r\n.dark {\r\n  --color-bg-primary: #1e293b;\r\n  --color-bg-secondary: #0f172a;\r\n  --color-bg-tertiary: #334155;\r\n  --color-bg-card: #1e293b;\r\n  --color-bg-input: #334155;\r\n  \r\n  --color-text-primary: #f1f5f9;\r\n  --color-text-secondary: #cbd5e1;\r\n  --color-text-muted: #94a3b8;\r\n  --color-text-light: #64748b;\r\n  --color-text-inverse: #1e293b;\r\n  \r\n  --color-border-primary: #334155;\r\n  --color-border-secondary: #475569;\r\n  --color-border-focus: #60a5fa;\r\n  --color-border-error: #f87171;\r\n\r\n  --gradient-sidebar: linear-gradient(180deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);\r\n  --gradient-header: linear-gradient(90deg, #1e293b 0%, #334155 100%);\r\n}\r\n\r\n/* Base Styles */\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n  scroll-behavior: smooth;\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n  color: var(--color-text-primary);\r\n  background-color: var(--color-bg-secondary);\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n/* Professional Typography Scale */\r\n.text-display {\r\n  font-size: 2rem;\r\n  font-weight: 800;\r\n  line-height: 1.2;\r\n  letter-spacing: -0.025em;\r\n}\r\n\r\n.text-page-title {\r\n  font-size: 1.25rem;\r\n  font-weight: 700;\r\n  line-height: 1.3;\r\n  letter-spacing: -0.02em;\r\n}\r\n\r\n.text-section-header {\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  line-height: 1.4;\r\n  letter-spacing: -0.01em;\r\n}\r\n\r\n.text-body {\r\n  font-size: 0.875rem;\r\n  font-weight: 400;\r\n  line-height: 1.6;\r\n}\r\n\r\n.text-body-sm {\r\n  font-size: 0.8125rem;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n}\r\n\r\n.text-caption {\r\n  font-size: 0.75rem;\r\n  font-weight: 500;\r\n  line-height: 1.4;\r\n  letter-spacing: 0.025em;\r\n}\r\n\r\n.text-label {\r\n  font-size: 0.6875rem;\r\n  font-weight: 600;\r\n  line-height: 1.3;\r\n  letter-spacing: 0.05em;\r\n  text-transform: uppercase;\r\n}\r\n\r\n/* Professional Layout Components */\r\n@layer components {\r\n  \r\n  /* Page Layout */\r\n  .page-container {\r\n    min-height: 100vh;\r\n    background: var(--color-bg-secondary);\r\n  }\r\n\r\n  .content-area {\r\n    padding: var(--spacing-lg);\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  .content-header {\r\n    margin-bottom: var(--spacing-xl);\r\n    padding-bottom: var(--spacing-md);\r\n    border-bottom: 1px solid var(--color-border-primary);\r\n  }\r\n\r\n  .breadcrumb {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-sm);\r\n    margin-bottom: var(--spacing-md);\r\n    font-size: 0.875rem;\r\n    color: var(--color-text-muted);\r\n  }\r\n\r\n  .breadcrumb-separator {\r\n    color: var(--color-text-light);\r\n  }\r\n\r\n  .breadcrumb-active {\r\n    color: var(--color-text-primary);\r\n    font-weight: 500;\r\n  }\r\n\r\n  /* Professional Cards */\r\n  .card {\r\n    background: var(--color-bg-card);\r\n    /* border: 1px solid var(--color-border-primary); */\r\n    border-radius: var(--radius-lg);\r\n    box-shadow: var(--shadow-sm);\r\n    overflow: hidden;\r\n    transition: all 0.2s ease-in-out;\r\n    margin-bottom: var(--spacing-lg);\r\n  }\r\n\r\n  .card:hover {\r\n    box-shadow: var(--shadow-md);\r\n    transform: translateY(-2px);\r\n  }\r\n\r\n  .card-header {\r\n    background: var(--gradient-card-header);\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    color: var(--color-text-inverse);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .card-title {\r\n    font-size: 1rem;\r\n    font-weight: 600;\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-sm);\r\n  }\r\n\r\n  .card-content {\r\n    padding: var(--spacing-lg);\r\n  }\r\n\r\n  .card-actions {\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    background: var(--color-bg-tertiary);\r\n    border-top: 1px solid var(--color-border-primary);\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: var(--spacing-sm);\r\n  }\r\n\r\n  /* Professional Form System */\r\n  .form-container {\r\n    display: grid;\r\n    gap: var(--spacing-lg);\r\n  }\r\n\r\n  .form-section {\r\n    background: var(--color-bg-card);\r\n    /* border: 1px solid var(--color-border-primary); */\r\n    /* border-radius: var(--radius-lg); */\r\n    /* box-shadow: var(--shadow-sm); */\r\n    overflow: hidden;\r\n  }\r\n\r\n  .form-section-header {\r\n    /* background: var(--gradient-card-header); */\r\n    /* padding: var(--spacing-md) var(--spacing-lg); */\r\n    color: var(--color-text-inverse);\r\n    font-weight: 600;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-sm);\r\n  }\r\n\r\n  .form-section-content {\r\n    padding: var(--spacing-lg);\r\n  }\r\n\r\n  .form-grid {\r\n    display: grid;\r\n    gap: var(--spacing-md);\r\n  }\r\n\r\n  .form-grid-1 { grid-template-columns: 1fr; }\r\n  .form-grid-2 { grid-template-columns: repeat(2, 1fr); }\r\n  .form-grid-3 { grid-template-columns: repeat(3, 1fr); }\r\n  .form-grid-4 { grid-template-columns: repeat(4, 1fr); }\r\n\r\n  @media (max-width: 1024px) {\r\n    .form-grid-4 { grid-template-columns: repeat(2, 1fr); }\r\n    .form-grid-3 { grid-template-columns: repeat(2, 1fr); }\r\n  }\r\n\r\n  @media (max-width: 640px) {\r\n    .form-grid-4,\r\n    .form-grid-3,\r\n    .form-grid-2 { \r\n      grid-template-columns: 1fr; \r\n    }\r\n  }\r\n\r\n  /* Professional Form Fields */\r\n  .form-field {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--spacing-xs);\r\n  }\r\n\r\n  .form-label {\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    color: var(--color-text-secondary);\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.05em;\r\n    margin-bottom: var(--spacing-xs);\r\n  }\r\n\r\n  .form-label-required::after {\r\n    content: \" *\";\r\n    color: var(--color-danger-500);\r\n    font-weight: 700;\r\n  }\r\n\r\n  .form-input,\r\n  .form-select,\r\n  .form-textarea {\r\n    width: 100%;\r\n    padding: 12px 16px;\r\n    font-size: 14px;\r\n    font-family: inherit;\r\n    color: var(--color-text-primary);\r\n    background: var(--color-bg-input);\r\n    border: 1px solid var(--color-border-primary);\r\n    border-radius: var(--radius-md);\r\n    outline: none;\r\n    transition: all 0.2s ease-in-out;\r\n    box-shadow: var(--shadow-xs);\r\n  }\r\n\r\n  .form-input:hover,\r\n  .form-select:hover,\r\n  .form-textarea:hover {\r\n    border-color: var(--color-border-secondary);\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .form-input:focus,\r\n  .form-select:focus,\r\n  .form-textarea:focus {\r\n    border-color: var(--color-border-focus);\r\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\r\n    background: var(--color-bg-primary);\r\n  }\r\n\r\n  .form-input:disabled,\r\n  .form-select:disabled,\r\n  .form-textarea:disabled {\r\n    background: var(--color-bg-tertiary);\r\n    color: var(--color-text-muted);\r\n    cursor: not-allowed;\r\n    opacity: 0.6;\r\n  }\r\n\r\n  .form-input.error,\r\n  .form-select.error,\r\n  .form-textarea.error {\r\n    border-color: var(--color-border-error);\r\n    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);\r\n  }\r\n\r\n  .form-select {\r\n    cursor: pointer;\r\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\r\n    background-position: right 12px center;\r\n    background-repeat: no-repeat;\r\n    background-size: 16px;\r\n    padding-right: 40px;\r\n  }\r\n\r\n  .form-textarea {\r\n    resize: vertical;\r\n    min-height: 80px;\r\n    line-height: 1.5;\r\n  }\r\n\r\n  .form-error {\r\n    font-size: 0.75rem;\r\n    color: var(--color-danger-500);\r\n    font-weight: 500;\r\n    margin-top: var(--spacing-xs);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-xs);\r\n  }\r\n\r\n  .form-help {\r\n    font-size: 0.75rem;\r\n    color: var(--color-text-muted);\r\n    margin-top: var(--spacing-xs);\r\n  }\r\n\r\n  /* Professional Buttons */\r\n  .btn {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: var(--spacing-sm);\r\n    padding: 10px 20px;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    font-family: inherit;\r\n    border-radius: var(--radius-md);\r\n    border: 1px solid transparent;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease-in-out;\r\n    text-decoration: none;\r\n    white-space: nowrap;\r\n    outline: none;\r\n    position: relative;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .btn:disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .btn-primary {\r\n    background: var(--gradient-primary);\r\n    color: white;\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-primary:hover:not(:disabled) {\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-md);\r\n    filter: brightness(1.05);\r\n  }\r\n\r\n  .btn-secondary {\r\n    background: var(--color-bg-card);\r\n    color: var(--color-text-primary);\r\n    border-color: var(--color-border-primary);\r\n    box-shadow: var(--shadow-xs);\r\n  }\r\n\r\n  .btn-secondary:hover:not(:disabled) {\r\n    background: var(--color-bg-tertiary);\r\n    border-color: var(--color-primary-500);\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-outline {\r\n    background: transparent;\r\n    color: var(--color-primary-600);\r\n    border-color: var(--color-primary-600);\r\n  }\r\n\r\n  .btn-outline:hover:not(:disabled) {\r\n    background: var(--color-primary-600);\r\n    color: white;\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-success {\r\n    background: var(--color-success-500);\r\n    color: white;\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-success:hover:not(:disabled) {\r\n    background: var(--color-success-600);\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n\r\n  .btn-warning {\r\n    background: var(--color-warning-500);\r\n    color: white;\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-warning:hover:not(:disabled) {\r\n    background: var(--color-warning-600);\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n\r\n  .btn-danger {\r\n    background: var(--color-danger-500);\r\n    color: white;\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-danger:hover:not(:disabled) {\r\n    background: var(--color-danger-600);\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n\r\n  .btn-sm {\r\n    padding: 6px 12px;\r\n    font-size: 12px;\r\n  }\r\n\r\n  .btn-lg {\r\n    padding: 14px 28px;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .btn-icon {\r\n    padding: 8px;\r\n    width: 36px;\r\n    height: 36px;\r\n  }\r\n\r\n  /* Professional Tables */\r\n  .table-container {\r\n    background: var(--color-bg-card);\r\n    border-radius: var(--radius-lg);\r\n    overflow: hidden;\r\n    box-shadow: var(--shadow-sm);\r\n    border: 1px solid var(--color-border-primary);\r\n  }\r\n\r\n  .table-header {\r\n    background: var(--gradient-card-header);\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    color: var(--color-text-inverse);\r\n    font-weight: 600;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .table-filters {\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    background: var(--color-bg-tertiary);\r\n    border-bottom: 1px solid var(--color-border-primary);\r\n    display: flex;\r\n    gap: var(--spacing-md);\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  /* Status Badges */\r\n  .badge {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    gap: var(--spacing-xs);\r\n    padding: 4px 12px;\r\n    border-radius: var(--radius-xl);\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n    border: 1px solid transparent;\r\n  }\r\n\r\n  .badge-success {\r\n    background: rgba(16, 185, 129, 0.1);\r\n    color: var(--color-success-600);\r\n    border-color: rgba(16, 185, 129, 0.2);\r\n  }\r\n\r\n  .badge-warning {\r\n    background: rgba(245, 158, 11, 0.1);\r\n    color: var(--color-warning-600);\r\n    border-color: rgba(245, 158, 11, 0.2);\r\n  }\r\n\r\n  .badge-danger {\r\n    background: rgba(239, 68, 68, 0.1);\r\n    color: var(--color-danger-600);\r\n    border-color: rgba(239, 68, 68, 0.2);\r\n  }\r\n\r\n  .badge-info {\r\n    background: rgba(6, 182, 212, 0.1);\r\n    color: var(--color-info-600);\r\n    border-color: rgba(6, 182, 212, 0.2);\r\n  }\r\n\r\n  .badge-secondary {\r\n    background: rgba(107, 114, 128, 0.1);\r\n    color: var(--color-text-muted);\r\n    border-color: rgba(107, 114, 128, 0.2);\r\n  }\r\n\r\n  /* Professional Sidebar */\r\n  .sidebar {\r\n    background: var(--gradient-sidebar);\r\n    width: 280px;\r\n    height: 100vh;\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 1000;\r\n    overflow-y: auto;\r\n    border-right: 1px solid var(--color-border-primary);\r\n  }\r\n\r\n  .sidebar-header {\r\n    padding: var(--spacing-lg);\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n    text-align: center;\r\n  }\r\n\r\n  .sidebar-logo {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: var(--spacing-md);\r\n    color: white;\r\n    font-weight: 700;\r\n    font-size: 1.125rem;\r\n  }\r\n\r\n  .sidebar-nav {\r\n    padding: var(--spacing-lg) var(--spacing-md);\r\n  }\r\n\r\n  .nav-section {\r\n    margin-bottom: var(--spacing-xl);\r\n  }\r\n\r\n  .nav-section-title {\r\n    color: rgba(255, 255, 255, 0.6);\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.05em;\r\n    margin-bottom: var(--spacing-md);\r\n    padding: 0 var(--spacing-md);\r\n  }\r\n\r\n  .nav-item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-md);\r\n    padding: 12px var(--spacing-md);\r\n    margin: 2px 0;\r\n    border-radius: var(--radius-md);\r\n    color: rgba(255, 255, 255, 0.8);\r\n    text-decoration: none;\r\n    transition: all 0.2s ease-in-out;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n  }\r\n\r\n  .nav-item:hover {\r\n    background: rgba(255, 255, 255, 0.1);\r\n    color: white;\r\n    transform: translateX(4px);\r\n  }\r\n\r\n  .nav-item.active {\r\n    background: rgba(255, 255, 255, 0.15);\r\n    color: white;\r\n    font-weight: 600;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .nav-submenu {\r\n    margin-left: var(--spacing-xl);\r\n    margin-top: var(--spacing-sm);\r\n  }\r\n\r\n  .nav-submenu .nav-item {\r\n    font-size: 13px;\r\n    padding: 8px var(--spacing-md);\r\n  }\r\n\r\n  /* Main Content Area */\r\n  .main-content {\r\n    margin-left: 280px;\r\n    min-height: 100vh;\r\n    background: var(--color-bg-secondary);\r\n  }\r\n\r\n  .header {\r\n    background: var(--color-bg-card);\r\n    border-bottom: 1px solid var(--color-border-primary);\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 100;\r\n  }\r\n\r\n  .header-content {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .header-left {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-lg);\r\n  }\r\n\r\n  .header-right {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-md);\r\n  }\r\n\r\n  /* Theme Toggle */\r\n  .theme-toggle {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-sm);\r\n    padding: var(--spacing-sm) var(--spacing-md);\r\n    background: var(--color-bg-tertiary);\r\n    border-radius: var(--radius-lg);\r\n    border: 1px solid var(--color-border-primary);\r\n  }\r\n\r\n  /* Responsive Design */\r\n  @media (max-width: 1024px) {\r\n    .sidebar {\r\n      transform: translateX(-100%);\r\n      transition: transform 0.3s ease-in-out;\r\n    }\r\n\r\n    .sidebar.open {\r\n      transform: translateX(0);\r\n    }\r\n\r\n    .main-content {\r\n      margin-left: 0;\r\n    }\r\n\r\n    .mobile-overlay {\r\n      position: fixed;\r\n      inset: 0;\r\n      background: rgba(0, 0, 0, 0.5);\r\n      z-index: 999;\r\n      backdrop-filter: blur(4px);\r\n    }\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .content-area {\r\n      padding: var(--spacing-md);\r\n    }\r\n\r\n    .card-content,\r\n    .form-section-content {\r\n      padding: var(--spacing-md);\r\n    }\r\n\r\n    .btn {\r\n      padding: 8px 16px;\r\n      font-size: 13px;\r\n    }\r\n\r\n    .text-display { font-size: 1.75rem; }\r\n    .text-page-title { font-size: 1.125rem; }\r\n    .text-section-header { font-size: 0.9375rem; }\r\n  }\r\n\r\n  /* Animations */\r\n  .animate-fade-in {\r\n    animation: fadeIn 0.4s ease-out forwards;\r\n  }\r\n\r\n  .animate-slide-in {\r\n    animation: slideIn 0.3s ease-out forwards;\r\n  }\r\n\r\n  .animate-slide-up {\r\n    animation: slideUp 0.3s ease-out forwards;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; transform: translateY(10px); }\r\n    to { opacity: 1; transform: translateY(0); }\r\n  }\r\n\r\n  @keyframes slideIn {\r\n    from { opacity: 0; transform: translateX(-20px); }\r\n    to { opacity: 1; transform: translateX(0); }\r\n  }\r\n\r\n  @keyframes slideUp {\r\n    from { opacity: 0; transform: translateY(20px); }\r\n    to { opacity: 1; transform: translateY(0); }\r\n  }\r\n\r\n  /* Loading States */\r\n  .loading-shimmer {\r\n    background: linear-gradient(90deg, \r\n      var(--color-bg-secondary) 25%, \r\n      var(--color-bg-tertiary) 50%, \r\n      var(--color-bg-secondary) 75%);\r\n    background-size: 200% 100%;\r\n    animation: shimmer 1.5s infinite;\r\n    border-radius: var(--radius-md);\r\n  }\r\n\r\n  @keyframes shimmer {\r\n    0% { background-position: -200% 0; }\r\n    100% { background-position: 200% 0; }\r\n  }\r\n}\r\n\r\n/* Angular Material Overrides for Professional Look */\r\n\r\n/* Form Fields */\r\n.mat-mdc-form-field {\r\n  width: 100% !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n.mat-mdc-form-field-appearance-outline .mdc-notched-outline {\r\n  border-color: var(--color-border-primary) !important;\r\n  border-radius: var(--radius-md) !important;\r\n}\r\n\r\n.mat-mdc-form-field-appearance-outline .mdc-text-field--focused .mdc-notched-outline {\r\n  border-color: var(--color-border-focus) !important;\r\n  border-width: 2px !important;\r\n}\r\n\r\n.mat-mdc-form-field .mat-mdc-input-element {\r\n  padding: 14px 16px !important;\r\n  font-size: 14px !important;\r\n  color: var(--color-text-primary) !important;\r\n  background: var(--color-bg-input) !important;\r\n}\r\n\r\n.mat-mdc-form-field .mat-mdc-floating-label {\r\n  color: var(--color-text-secondary) !important;\r\n  font-size: 12px !important;\r\n  font-weight: 600 !important;\r\n  text-transform: uppercase !important;\r\n  letter-spacing: 0.05em !important;\r\n}\r\n\r\n/* Buttons */\r\n.mat-mdc-button,\r\n.mat-mdc-raised-button,\r\n.mat-mdc-outlined-button {\r\n  border-radius: var(--radius-md) !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n  font-weight: 500 !important;\r\n  text-transform: none !important;\r\n  transition: all 0.2s ease-in-out !important;\r\n}\r\n\r\n.mat-mdc-raised-button {\r\n  background: var(--gradient-primary) !important;\r\n  color: white !important;\r\n  box-shadow: var(--shadow-sm) !important;\r\n}\r\n\r\n.mat-mdc-raised-button:hover {\r\n  transform: translateY(-1px) !important;\r\n  box-shadow: var(--shadow-md) !important;\r\n}\r\n\r\n/* Cards */\r\n.mat-mdc-card {\r\n  background: var(--color-bg-card) !important;\r\n  border: 1px solid var(--color-border-primary) !important;\r\n  box-shadow: var(--shadow-sm) !important;\r\n  border-radius: var(--radius-lg) !important;\r\n  transition: all 0.2s ease-in-out !important;\r\n}\r\n\r\n.mat-mdc-card:hover {\r\n  box-shadow: var(--shadow-md) !important;\r\n  transform: translateY(-2px) !important;\r\n}\r\n\r\n/* Tables */\r\n.mat-mdc-table {\r\n  background: var(--color-bg-card) !important;\r\n  border-radius: var(--radius-lg) !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n.mat-mdc-header-row {\r\n  background: var(--gradient-card-header) !important;\r\n  height: 56px !important;\r\n}\r\n\r\n.mat-mdc-header-cell {\r\n  color: white !important;\r\n  font-weight: 600 !important;\r\n  font-size: 14px !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n.mat-mdc-cell {\r\n  font-size: 14px !important;\r\n  color: var(--color-text-primary) !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n.mat-mdc-row {\r\n  height: 56px !important;\r\n  border-bottom: 1px solid var(--color-border-primary) !important;\r\n  transition: all 0.2s ease-in-out !important;\r\n}\r\n\r\n.mat-mdc-row:hover {\r\n  background: var(--color-bg-tertiary) !important;\r\n}\r\n\r\n.mat-mdc-row:nth-child(even) {\r\n  background: rgba(248, 250, 252, 0.3) !important;\r\n}\r\n\r\n/* Select Panels */\r\n.mat-mdc-select-panel {\r\n  background: var(--color-bg-card) !important;\r\n  border: 1px solid var(--color-border-primary) !important;\r\n  border-radius: var(--radius-md) !important;\r\n  box-shadow: var(--shadow-lg) !important;\r\n}\r\n\r\n.mat-mdc-option {\r\n  font-family: 'Inter', sans-serif !important;\r\n  color: var(--color-text-primary) !important;\r\n  padding: 12px 16px !important;\r\n}\r\n\r\n.mat-mdc-option:hover {\r\n  background: var(--color-bg-tertiary) !important;\r\n}\r\n\r\n/* Sidenav */\r\n.mat-sidenav {\r\n  background: var(--gradient-sidebar) !important;\r\n  border-right: 1px solid var(--color-border-primary) !important;\r\n  width: 280px !important;\r\n}\r\n\r\n.mat-toolbar {\r\n  background: var(--color-bg-card) !important;\r\n  color: var(--color-text-primary) !important;\r\n  border-bottom: 1px solid var(--color-border-primary) !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n/* Scrollbar */\r\n::-webkit-scrollbar {\r\n  width: 6px;\r\n  height: 6px;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n  background: var(--color-bg-tertiary);\r\n  border-radius: 3px;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background: var(--color-border-secondary);\r\n  border-radius: 3px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: var(--color-text-muted);\r\n}\r\n\r\n/* Print Styles */\r\n@media print {\r\n  .sidebar,\r\n  .header,\r\n  .btn,\r\n  .no-print {\r\n    display: none !important;\r\n  }\r\n\r\n  .main-content {\r\n    margin-left: 0 !important;\r\n  }\r\n\r\n  .card {\r\n    /* box-shadow: none !important; */\r\n    /* border: 1px solid #ddd !important; */\r\n  }\r\n}\r\n\r\n/* Focus Styles for Accessibility */\r\n.btn:focus-visible,\r\n.form-input:focus-visible,\r\n.form-select:focus-visible,\r\n.form-textarea:focus-visible,\r\n.nav-item:focus-visible {\r\n  outline: 2px solid var(--color-primary-500);\r\n  outline-offset: 2px;\r\n}\r\n\r\n/* High Contrast Mode */\r\n@media (prefers-contrast: high) {\r\n  :root {\r\n    --color-border-primary: #000000;\r\n    --color-text-primary: #000000;\r\n    --color-bg-card: #ffffff;\r\n  }\r\n  \r\n  .dark {\r\n    --color-border-primary: #ffffff;\r\n    --color-text-primary: #ffffff;\r\n    --color-bg-card: #000000;\r\n  }\r\n}\r\n\r\n/* Reduced Motion */\r\n@media (prefers-reduced-motion: reduce) {\r\n  * {\r\n    animation-duration: 0.01ms !important;\r\n    animation-iteration-count: 1 !important;\r\n    transition-duration: 0.01ms !important;\r\n  }\r\n}\r\n","size_bytes":25452},"Models/DTOs/CreateMemberDto.cs":{"content":"using System.ComponentModel.DataAnnotations;\nusing SocietyManagement.Enums;\n\nnamespace SocietyManagement.Models.DTOs\n{\n    public class CreateMemberDto\n    {\n        // Basic Information\n        [Required]\n        [StringLength(100)]\n        public string Name { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string FatherHusbandName { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string OfficeAddress { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string City { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string PhoneOffice { get; set; } = string.Empty;\n\n        // Branch/Society - handled by controller based on user role\n        public int? BranchSocietyId { get; set; }\n\n        [StringLength(20)]\n        public string PhoneResidence { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Mobile { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string Designation { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string ResidenceAddress { get; set; } = string.Empty;\n\n        public DateTime? DateOfBirth { get; set; }\n\n        public DateTime? DateOfJoiningSociety { get; set; }\n\n        [StringLength(255)]\n        [EmailAddress]\n        public string Email { get; set; } = string.Empty;\n\n        public DateTime DateOfJoining { get; set; } = DateTime.UtcNow;\n\n        public DateTime? DateOfResignation { get; set; }\n\n        // Nominee Information\n        [StringLength(100)]\n        public string NomineeName { get; set; } = string.Empty;\n\n        [StringLength(50)]\n        public string NomineeRelation { get; set; } = string.Empty;\n\n        // Opening Balance\n        public decimal OpeningBalanceAmount { get; set; } = 0;\n\n        [StringLength(10)]\n        public string OpeningBalanceType { get; set; } = \"Cr\"; // Cr, Dr, CD\n\n        // Bank Details\n        [StringLength(100)]\n        public string BankName { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string PayableAt { get; set; } = string.Empty;\n\n        [StringLength(50)]\n        public string AccountNumber { get; set; } = string.Empty;\n\n        // Status\n        public MemberStatus Status { get; set; } = MemberStatus.Active;\n\n        public DateTime StatusDate { get; set; } = DateTime.UtcNow;\n\n        // Deductions\n        public decimal ShareDeduction { get; set; } = 0;\n        public decimal WithdrawalDeduction { get; set; } = 0;\n        public decimal GeneralLoanInstalment { get; set; } = 0;\n        public decimal EmergencyLoanInstalment { get; set; } = 0;\n\n        // Note: Photo and Signature will be handled via separate file upload endpoints\n    }\n}\n","size_bytes":2772},"Models/DTOs/CreateSocietyDto.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace SocietyManagement.Models.DTOs\n{\n    public class CreateSocietyDto\n    {\n        [Required]\n        [StringLength(200)]\n        public string SocietyName { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string RegistrationNumber { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string Address { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string City { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Phone { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Fax { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string Email { get; set; } = string.Empty;\n\n        [StringLength(200)]\n        public string Website { get; set; } = string.Empty;\n\n        public decimal Dividend { get; set; }\n        public decimal Overdraft { get; set; }\n        public decimal CurrentDeposit { get; set; }\n        public decimal Loan { get; set; }\n        public decimal EmergencyLoan { get; set; }\n        public decimal LAS { get; set; }\n        public decimal ShareLimit { get; set; }\n        public decimal LoanLimit { get; set; }\n        public decimal EmergencyLoanLimit { get; set; }\n        public decimal ChequeBounceCharge { get; set; }\n        public decimal ChequeReturnCharge { get; set; }\n        public decimal Cash { get; set; }\n        public decimal Bonus { get; set; }\n\n        // Society Admin details\n        [Required]\n        [StringLength(100)]\n        public string AdminUsername { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string AdminPassword { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string AdminFirstName { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string AdminLastName { get; set; } = string.Empty;\n\n        [StringLength(255)]\n        public string AdminEmail { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string AdminPhone { get; set; } = string.Empty;\n    }\n}\n","size_bytes":2169},"Models/DTOs/CreateUserDto.cs":{"content":"using System.ComponentModel.DataAnnotations;\nusing SocietyManagement.Enums;\n\nnamespace SocietyManagement.Models.DTOs\n{\n    public class CreateUserDto\n    {\n        [Required]\n        [StringLength(100)]\n        public string Username { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string Password { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string FirstName { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string LastName { get; set; } = string.Empty;\n\n        [StringLength(255)]\n        public string Email { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Phone { get; set; } = string.Empty;\n\n        // Role for Super Admin to specify (defaults to User for Society Admin)\n        public UserRole Role { get; set; } = UserRole.User;\n\n        // Society ID for Super Admin to specify which society to add user to\n        public int? SocietyId { get; set; }\n    }\n}\n","size_bytes":1037},"Models/DTOs/LoginDto.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace SocietyManagement.Models.DTOs\n{\n    public class LoginDto\n    {\n        [Required]\n        public string Username { get; set; } = string.Empty;\n\n        [Required]\n        public string Password { get; set; } = string.Empty;\n    }\n\n    public class LoginResponseDto\n    {\n        public string Token { get; set; } = string.Empty;\n        public UserDto User { get; set; } = null!;\n    }\n}\n","size_bytes":445},"Models/DTOs/MemberDto.cs":{"content":"using SocietyManagement.Enums;\n\nnamespace SocietyManagement.Models.DTOs\n{\n    public class MemberDto\n    {\n        public int Id { get; set; }\n        public string MemberNumber { get; set; } = string.Empty;\n        public string Name { get; set; } = string.Empty;\n        public string FatherHusbandName { get; set; } = string.Empty;\n        public string OfficeAddress { get; set; } = string.Empty;\n        public string City { get; set; } = string.Empty;\n        public string PhoneOffice { get; set; } = string.Empty;\n        public string PhoneResidence { get; set; } = string.Empty;\n        public string Mobile { get; set; } = string.Empty;\n        public string Designation { get; set; } = string.Empty;\n        public string ResidenceAddress { get; set; } = string.Empty;\n        public DateTime? DateOfBirth { get; set; }\n        public DateTime? DateOfJoiningSociety { get; set; }\n        public string Email { get; set; } = string.Empty;\n        public DateTime DateOfJoining { get; set; }\n        public DateTime? DateOfResignation { get; set; }\n        public string NomineeName { get; set; } = string.Empty;\n        public string NomineeRelation { get; set; } = string.Empty;\n        public decimal OpeningBalanceAmount { get; set; }\n        public string OpeningBalanceType { get; set; } = string.Empty;\n        public string BankName { get; set; } = string.Empty;\n        public string PayableAt { get; set; } = string.Empty;\n        public string AccountNumber { get; set; } = string.Empty;\n        public MemberStatus Status { get; set; }\n        public DateTime StatusDate { get; set; }\n        public decimal ShareDeduction { get; set; }\n        public decimal WithdrawalDeduction { get; set; }\n        public decimal GeneralLoanInstalment { get; set; }\n        public decimal EmergencyLoanInstalment { get; set; }\n        public string PhotoPath { get; set; } = string.Empty;\n        public string SignaturePath { get; set; } = string.Empty;\n        public int CreatedByUserId { get; set; }\n        public string CreatedByUserName { get; set; } = string.Empty;\n        public int SocietyId { get; set; }\n        public string SocietyName { get; set; } = string.Empty;\n        public DateTime CreatedAt { get; set; }\n        public DateTime UpdatedAt { get; set; }\n    }\n}\n","size_bytes":2294},"Models/DTOs/PendingEditDto.cs":{"content":"namespace SocietyManagement.Models.DTOs\n{\n    public class PendingEditDto\n    {\n        public int Id { get; set; }\n        public int SocietyId { get; set; }\n        public string SocietyName { get; set; } = string.Empty;\n        public string EditedByUserName { get; set; } = string.Empty;\n        public DateTime CreatedAt { get; set; }\n        public bool IsApproved { get; set; }\n        public List<ApprovalDto> Approvals { get; set; } = new List<ApprovalDto>();\n        public UpdateSocietyDto PendingChanges { get; set; } = new UpdateSocietyDto();\n    }\n\n    public class ApprovalDto\n    {\n        public int UserId { get; set; }\n        public string UserName { get; set; } = string.Empty;\n        public bool IsApproved { get; set; }\n        public string? Comments { get; set; }\n        public DateTime? ApprovedAt { get; set; }\n    }\n}\n","size_bytes":848},"Models/DTOs/SocietyDto.cs":{"content":"namespace SocietyManagement.Models.DTOs\n{\n    public class SocietyDto\n    {\n        public int Id { get; set; }\n        public string SocietyName { get; set; } = string.Empty;\n        public string RegistrationNumber { get; set; } = string.Empty;\n        public string Address { get; set; } = string.Empty;\n        public string City { get; set; } = string.Empty;\n        public string Phone { get; set; } = string.Empty;\n        public string Fax { get; set; } = string.Empty;\n        public string Email { get; set; } = string.Empty;\n        public string Website { get; set; } = string.Empty;\n        public decimal Dividend { get; set; }\n        public decimal Overdraft { get; set; }\n        public decimal CurrentDeposit { get; set; }\n        public decimal Loan { get; set; }\n        public decimal EmergencyLoan { get; set; }\n        public decimal LAS { get; set; }\n        public decimal ShareLimit { get; set; }\n        public decimal LoanLimit { get; set; }\n        public decimal EmergencyLoanLimit { get; set; }\n        public decimal ChequeBounceCharge { get; set; }\n        public decimal ChequeReturnCharge { get; set; }\n        public decimal Cash { get; set; }\n        public decimal Bonus { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime UpdatedAt { get; set; }\n        public bool HasPendingEdits { get; set; }\n    }\n}\n","size_bytes":1377},"Models/DTOs/UpdateSocietyDto.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace SocietyManagement.Models.DTOs\n{\n    public class UpdateSocietyDto\n    {\n        [StringLength(200)]\n        public string? SocietyName { get; set; }\n\n        [StringLength(100)]\n        public string? RegistrationNumber { get; set; }\n\n        [StringLength(500)]\n        public string? Address { get; set; }\n\n        [StringLength(100)]\n        public string? City { get; set; }\n\n        [StringLength(20)]\n        public string? Phone { get; set; }\n\n        [StringLength(20)]\n        public string? Fax { get; set; }\n\n        [StringLength(100)]\n        public string? Email { get; set; }\n\n        [StringLength(200)]\n        public string? Website { get; set; }\n\n        public decimal? Dividend { get; set; }\n        public decimal? Overdraft { get; set; }\n        public decimal? CurrentDeposit { get; set; }\n        public decimal? Loan { get; set; }\n        public decimal? EmergencyLoan { get; set; }\n        public decimal? LAS { get; set; }\n        public decimal? ShareLimit { get; set; }\n        public decimal? LoanLimit { get; set; }\n        public decimal? EmergencyLoanLimit { get; set; }\n        public decimal? ChequeBounceCharge { get; set; }\n        public decimal? ChequeReturnCharge { get; set; }\n        public decimal? Cash { get; set; }\n        public decimal? Bonus { get; set; }\n    }\n}\n","size_bytes":1370},"Models/DTOs/UserDto.cs":{"content":"using SocietyManagement.Enums;\n\nnamespace SocietyManagement.Models.DTOs\n{\n    public class UserDto\n    {\n        public int Id { get; set; }\n        public string Username { get; set; } = string.Empty;\n        public string FirstName { get; set; } = string.Empty;\n        public string LastName { get; set; } = string.Empty;\n        public string Email { get; set; } = string.Empty;\n        public string Phone { get; set; } = string.Empty;\n        public UserRole Role { get; set; }\n        public int? SocietyId { get; set; }\n        public string? SocietyName { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n}\n","size_bytes":633},"src/app/app.component.css":{"content":"\n.app-container {\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n}\n\n/* Ensure consistent theming */\n.app-container {\n  background: var(--color-bg-secondary);\n  color: var(--color-text-primary);\n}\n","size_bytes":202},"src/app/app.component.spec.ts":{"content":"import { TestBed } from '@angular/core/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('AppComponent', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [AppComponent],\n    }).compileComponents();\n  });\n\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it(`should have the 'my-angular-project' title`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('my-angular-project');\n  });\n\n  it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement as HTMLElement;\n    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, my-angular-project');\n  });\n});\n","size_bytes":952},"src/app/app.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    CommonModule\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title = 'Financial Management System';\n}\n","size_bytes":398},"src/app/app.config.server.ts":{"content":"import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';\nimport { provideServerRendering } from '@angular/platform-server';\nimport { appConfig } from './app.config';\n\nconst serverConfig: ApplicationConfig = {\n  providers: [\n    provideServerRendering()\n  ]\n};\n\nexport const config = mergeApplicationConfig(appConfig, serverConfig);\n","size_bytes":350},"src/app/app.config.ts":{"content":"import { ApplicationConfig, importProvidersFrom, provideZoneChangeDetection } from '@angular/core';\r\nimport { provideRouter } from '@angular/router';\r\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\r\n\r\nimport { routes } from './app.routes';\r\nimport { provideClientHydration } from '@angular/platform-browser';\r\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideClientHydration(),\r\n    provideAnimationsAsync(),\r\n    importProvidersFrom(BrowserAnimationsModule),\r\n    provideHttpClient(withInterceptorsFromDi())\r\n  ]\r\n};","size_bytes":834},"src/app/app.routes.ts":{"content":"import { Routes } from '@angular/router';\nimport { AuthGuard } from './guards/auth.guard';\nimport { RoleGuard } from './guards/role.guard';\nimport { MainLayoutComponent } from './components/layout/main-layout.component';\n\nexport const routes: Routes = [\n  // Login route (no layout)\n  {\n    path: 'login',\n    loadComponent: () => import('./components/auth/login/login.component').then(m => m.LoginComponent)\n  },\n\n  // All other routes use MainLayoutComponent wrapper\n  {\n    path: '',\n    component: MainLayoutComponent,\n    canActivate: [AuthGuard],\n    children: [\n      { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\n      // Dashboard\n      {\n        path: 'dashboard',\n        loadComponent: () => import('./components/dashboard/dashboard.component').then(m => m.DashboardComponent)\n      },\n\n      // User Management (Super Admin only)\n      {\n        path: 'user-management',\n        loadComponent: () => import('./components/user-management/user-management.component').then(m => m.UserManagementComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin'] }\n      },\n\n      // File Management\n      {\n        path: 'file/society',\n        loadComponent: () => import('./components/file/society/society.component').then(m => m.SocietyComponent)\n      },\n      {\n        path: 'file/create-new-year',\n        loadComponent: () => import('./components/file/create-new-year/create-new-year.component').then(m => m.CreateNewYearComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin', 'society_admin'] }\n      },\n      {\n        path: 'file/edit-opening-balance',\n        loadComponent: () => import('./components/file/edit-opening-balance/edit-opening-balance.component').then(m => m.EditOpeningBalanceComponent)\n      },\n\n      // Security\n      {\n        path: 'file/security/authority',\n        loadComponent: () => import('./components/file/security/authority/authority.component').then(m => m.AuthorityComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin'] }\n      },\n      {\n        path: 'file/security/new-user',\n        loadComponent: () => import('./components/file/security/new-user/new-user.component').then(m => m.NewUserComponent)\n      },\n      {\n        path: 'file/security/retrieve-password',\n        loadComponent: () => import('./components/file/security/retrieve-password/retrieve-password.component').then(m => m.RetrievePasswordComponent)\n      },\n      {\n        path: 'file/security/change-password',\n        loadComponent: () => import('./components/file/security/change-password/change-password.component').then(m => m.ChangePasswordComponent)\n      },\n      {\n        path: 'file/security/admin-handover',\n        loadComponent: () => import('./components/file/security/admin-handover/admin-handover.component').then(m => m.AdminHandoverComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin'] }\n      },\n\n      // Master Data\n      {\n        path: 'master/member-details',\n        loadComponent: () => import('./components/master/member-details/member-details.component').then(m => m.MemberDetailsComponent)\n      },\n      {\n        path: 'master/table',\n        loadComponent: () => import('./components/master/table/table.component').then(m => m.TableComponent)\n      },\n      {\n        path: 'master/deposit-scheme',\n        loadComponent: () => import('./components/master/deposit-scheme/deposit-scheme.component').then(m => m.DepositSchemeComponent)\n      },\n      {\n        path: 'master/interest-master',\n        loadComponent: () => import('./components/master/interest-master/interest-master.component').then(m => m.InterestMasterComponent)\n      },\n\n      // Transactions\n      {\n        path: 'transaction/loan-taken',\n        loadComponent: () => import('./components/transaction/loan-taken/loan-taken.component').then(m => m.LoanTakenComponent)\n      },\n      {\n        path: 'transaction/monthly-demand',\n        loadComponent: () => import('./components/transaction/monthly-demand/monthly-demand.component').then(m => m.MonthlyDemandComponent)\n      },\n      {\n        path: 'transaction/demand-process',\n        loadComponent: () => import('./components/transaction/demand-process/demand-process.component').then(m => m.DemandProcessComponent)\n      },\n      {\n        path: 'transaction/account-closure',\n        loadComponent: () => import('./components/transaction/account-closure/account-closure.component').then(m => m.AccountClosureComponent)\n      },\n      {\n        path: 'transaction/deposit-receipt',\n        loadComponent: () => import('./components/transaction/deposit-receipt/deposit-receipt.component').then(m => m.DepositReceiptComponent)\n      },\n      {\n        path: 'transaction/deposit-renew',\n        loadComponent: () => import('./components/transaction/deposit-renew/deposit-renew.component').then(m => m.DepositRenewComponent)\n      },\n      {\n        path: 'transaction/deposit-slip',\n        loadComponent: () => import('./components/transaction/deposit-slip/deposit-slip.component').then(m => m.DepositSlipComponent)\n      },\n      {\n        path: 'transaction/deposit-payment',\n        loadComponent: () => import('./components/transaction/deposit-payment/deposit-payment.component').then(m => m.DepositPaymentComponent)\n      },\n\n      // Accounts\n      {\n        path: 'accounts/group',\n        loadComponent: () => import('./components/accounts/group/group.component').then(m => m.GroupComponent)\n      },\n      {\n        path: 'accounts/ledger',\n        loadComponent: () => import('./components/accounts/ledger/ledger.component').then(m => m.LedgerComponent)\n      },\n      {\n        path: 'accounts/cash-book',\n        loadComponent: () => import('./components/accounts/cash-book/cash-book.component').then(m => m.CashBookComponent)\n      },\n      {\n        path: 'accounts/day-book',\n        loadComponent: () => import('./components/accounts/day-book/day-book.component').then(m => m.DayBookComponent)\n      },\n      {\n        path: 'accounts/voucher',\n        loadComponent: () => import('./components/accounts/voucher/voucher.component').then(m => m.VoucherComponent)\n      },\n      {\n        path: 'accounts/voucher-creation',\n        loadComponent: () => import('./components/accounts/voucher-creation/voucher-creation.component').then(m => m.VoucherCreationComponent)\n      },\n      {\n        path: 'accounts/loan-receipt',\n        loadComponent: () => import('./components/accounts/loan-receipt/loan-receipt.component').then(m => m.LoanReceiptComponent)\n      },\n      {\n        path: 'accounts/trial-balance',\n        loadComponent: () => import('./components/accounts/trial-balance/trial-balance.component').then(m => m.TrialBalanceComponent)\n      },\n      {\n        path: 'accounts/balance-sheet',\n        loadComponent: () => import('./components/accounts/balance-sheet/balance-sheet.component').then(m => m.BalanceSheetComponent)\n      },\n      {\n        path: 'accounts/profit-loss',\n        loadComponent: () => import('./components/accounts/profit-loss/profit-loss.component').then(m => m.ProfitLossComponent)\n      },\n      {\n        path: 'accounts/receipt-payment',\n        loadComponent: () => import('./components/accounts/receipt-payment/receipt-payment.component').then(m => m.ReceiptPaymentComponent)\n      },\n\n      // Reports\n      {\n        path: 'reports/employees',\n        loadComponent: () => import('./components/reports/employees/employees.component').then(m => m.EmployeesComponent)\n      },\n      {\n        path: 'reports/voucher',\n        loadComponent: () => import('./components/reports/voucher/voucher.component').then(m => m.VoucherReportComponent)\n      },\n      {\n        path: 'reports/opening-balance',\n        loadComponent: () => import('./components/reports/opening-balance/opening-balance.component').then(m => m.OpeningBalanceComponent)\n      },\n      {\n        path: 'reports/closing-balance',\n        loadComponent: () => import('./components/reports/closing-balance/closing-balance.component').then(m => m.ClosingBalanceComponent)\n      },\n      {\n        path: 'reports/loan',\n        loadComponent: () => import('./components/reports/loan/loan.component').then(m => m.LoanReportComponent)\n      },\n\n      // System\n      {\n        path: 'statement',\n        loadComponent: () => import('./components/statement/statement.component').then(m => m.StatementComponent)\n      },\n      {\n        path: 'backup',\n        loadComponent: () => import('./components/backup/backup.component').then(m => m.BackupComponent)\n      },\n      {\n        path: 'admin',\n        loadComponent: () => import('./components/admin/admin.component').then(m => m.AdminComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin'] }\n      },\n      {\n        path: 'new-year',\n        loadComponent: () => import('./components/new-year/new-year.component').then(m => m.NewYearComponent)\n      },\n\n      // Member Details View\n      {\n        path: 'member/:id',\n        loadComponent: () => import('./components/member-details-view/member-details-view.component').then(m => m.MemberDetailsViewComponent)\n      },\n\n      // Unauthorized\n      {\n        path: 'unauthorized',\n        loadComponent: () => import('./components/unauthorized/unauthorized.component').then(m => m.UnauthorizedComponent)\n      }\n    ]\n  },\n\n  // Wildcard route\n  { path: '**', redirectTo: '/login' }\n];","size_bytes":9435},"src/app/create-components.ts":{"content":"\n// This file will generate all remaining placeholder components\n\n// File Security Components\nexport const securityComponents = [\n  'src/app/components/file/security/authority/authority.component.ts',\n  'src/app/components/file/security/my-rights/my-rights.component.ts',\n  'src/app/components/file/security/new-user/new-user.component.ts',\n  'src/app/components/file/security/retrieve-password/retrieve-password.component.ts',\n  'src/app/components/file/security/change-password/change-password.component.ts',\n  'src/app/components/file/security/admin-handover/admin-handover.component.ts'\n];\n\n// Template for placeholder components\nconst createPlaceholderComponent = (name: string, title: string) => `\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-${name}',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: \\`\n    <div class=\"page-container\">\n      <h1>${title}</h1>\n      <mat-card>\n        <mat-card-content>\n          <p>${title} functionality will be implemented here.</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  \\`,\n  styles: [\\`\n    .page-container { max-width: 800px; margin: 0 auto; }\n  \\`]\n})\nexport class ${name.charAt(0).toUpperCase() + name.slice(1)}Component {}\n`;\n","size_bytes":1356},"src/app/create-remaining-components.sh":{"content":"\n#!/bin/bash\n\n# Create remaining essential component directories and files\n\n# Transaction components\nmkdir -p src/app/components/transaction/{account-closure,deposit-receipt,deposit-renew,deposit-slip,deposit-payment}\n\n# Accounts components  \nmkdir -p src/app/components/accounts/{group,ledger,cash-book,day-book,voucher,loan-receipt,trial-balance,balance-sheet,profit-loss,receipt-payment}\n\n# Reports components\nmkdir -p src/app/components/reports/{employees,voucher,opening-balance,closing-balance,loan}\n\necho \"Component directories created\"\n","size_bytes":544},"attached_assets/extracted_frontend/fintcs/README.md":{"content":"# MyAngularProject\n\nThis project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 17.1.1.\n\n## Development server\n\nRun `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.\n\n## Code scaffolding\n\nRun `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.\n\n## Build\n\nRun `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.\n\n## Running unit tests\n\nRun `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Running end-to-end tests\n\nRun `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.\n","size_bytes":1070},"attached_assets/extracted_frontend/fintcs/server.ts":{"content":"import { APP_BASE_HREF } from '@angular/common';\nimport { CommonEngine } from '@angular/ssr';\nimport express from 'express';\nimport { fileURLToPath } from 'node:url';\nimport { dirname, join, resolve } from 'node:path';\nimport bootstrap from './src/main.server';\n\n// The Express app is exported so that it can be used by serverless Functions.\nexport function app(): express.Express {\n  const server = express();\n  const serverDistFolder = dirname(fileURLToPath(import.meta.url));\n  const browserDistFolder = resolve(serverDistFolder, '../browser');\n  const indexHtml = join(serverDistFolder, 'index.server.html');\n\n  const commonEngine = new CommonEngine();\n\n  server.set('view engine', 'html');\n  server.set('views', browserDistFolder);\n\n  // Example Express Rest API endpoints\n  // server.get('/api/**', (req, res) => { });\n  // Serve static files from /browser\n  server.get('*.*', express.static(browserDistFolder, {\n    maxAge: '1y'\n  }));\n\n  // All regular routes use the Angular engine\n  server.get('*', (req, res, next) => {\n    const { protocol, originalUrl, baseUrl, headers } = req;\n\n    commonEngine\n      .render({\n        bootstrap,\n        documentFilePath: indexHtml,\n        url: `${protocol}://${headers.host}${originalUrl}`,\n        publicPath: browserDistFolder,\n        providers: [{ provide: APP_BASE_HREF, useValue: baseUrl }],\n      })\n      .then((html) => res.send(html))\n      .catch((err) => next(err));\n  });\n\n  return server;\n}\n\nfunction run(): void {\n  const port = process.env['PORT'] || 4000;\n\n  // Start up the Node server\n  const server = app();\n  server.listen(port, () => {\n    console.log(`Node Express server listening on http://localhost:${port}`);\n  });\n}\n\nrun();\n","size_bytes":1703},"attached_assets/extracted_frontend/fintcs/tailwind.config.js":{"content":"\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{html,ts}\",\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f4ff',\n          100: '#e5edff',\n          200: '#d0ddff',\n          300: '#b4c2ff',\n          400: '#9199ff',\n          500: '#667eea',\n          600: '#5a67d8',\n          700: '#4c51bf',\n          800: '#434190',\n          900: '#3c366b',\n        },\n        secondary: {\n          50: '#fef7ff',\n          100: '#fdf2ff',\n          200: '#fce7ff',\n          300: '#f9d0ff',\n          400: '#f3a8ff',\n          500: '#e879f9',\n          600: '#d946ef',\n          700: '#c026d3',\n          800: '#a21caf',\n          900: '#86198f',\n        },\n        accent: {\n          50: '#f0fdfa',\n          100: '#ccfbf1',\n          200: '#99f6e4',\n          300: '#5eead4',\n          400: '#2dd4bf',\n          500: '#14b8a6',\n          600: '#0d9488',\n          700: '#0f766e',\n          800: '#115e59',\n          900: '#134e4a',\n        }\n      },\n      backgroundImage: {\n        'gradient-primary': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        'gradient-secondary': 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\n        'gradient-accent': 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',\n        'gradient-dark-primary': 'linear-gradient(135deg, #06ffa5 0%, #00d4ff 100%)',\n        'gradient-dark-secondary': 'linear-gradient(135deg, #ff006e 0%, #8338ec 100%)',\n        'gradient-light-bg': 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)',\n        'gradient-dark-bg': 'linear-gradient(135deg, #0f0c29 0%, #302b63 50%, #24243e 100%)',\n        'gradient-sidebar-light': 'linear-gradient(180deg, #667eea 0%, #764ba2 100%)',\n        'gradient-sidebar-dark': 'linear-gradient(180deg, #1a202c 0%, #2d3748 100%)',\n      },\n      fontFamily: {\n        sans: ['Roboto', 'system-ui', 'sans-serif'],\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n      },\n      animation: {\n        'float': 'float 6s ease-in-out infinite',\n        'gradient': 'gradient-shift 4s ease infinite',\n        'slide-in': 'slideIn 0.5s ease forwards',\n        'fade-in': 'fadeIn 0.6s ease',\n      },\n      boxShadow: {\n        'glass': '0 8px 32px 0 rgba(31, 38, 135, 0.37)',\n        'gradient': '0 10px 40px rgba(102, 126, 234, 0.3)',\n        'dark-gradient': '0 10px 40px rgba(6, 255, 165, 0.3)',\n      },\n      backdropBlur: {\n        xs: '2px',\n      }\n    },\n  },\n  plugins: [],\n}\n","size_bytes":2512},"obj/Debug/net8.0/SocietyManagement.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"SocietyManagement\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+4e1a26d82e04af3a1267bbacd367673708d95d8b\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"SocietyManagement\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"SocietyManagement\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1003},"obj/Debug/net8.0/SocietyManagement.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"obj/Debug/net8.0/SocietyManagement.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":679},"src/app/guards/auth.guard.ts":{"content":"\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const currentUser = this.authService.getCurrentUser();\n    \n    if (currentUser) {\n      // Check if user can access this specific route\n      if (this.authService.canAccessRoute(state.url)) {\n        return true;\n      } else {\n        this.router.navigate(['/unauthorized']);\n        return false;\n      }\n    }\n\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}\n","size_bytes":872},"src/app/guards/role.guard.ts":{"content":"\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';\nimport { AuthService, UserRole } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const currentUser = this.authService.getCurrentUser();\n    const requiredRoles = route.data['roles'] as UserRole[];\n\n    if (currentUser && requiredRoles.includes(currentUser.role)) {\n      return true;\n    }\n\n    this.router.navigate(['/unauthorized']);\n    return false;\n  }\n}\n","size_bytes":692},"src/app/services/auth.interceptor.ts":{"content":"import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(req);\n  }\n}\n","size_bytes":549},"src/app/services/auth.service.ts":{"content":"import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface User {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n  role: UserRole;\r\n  societyId?: number;\r\n  societyName?: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  isActive: boolean;\r\n  createdBy?: number;\r\n  createdDate: Date;\r\n  lastLogin?: Date;\r\n}\r\n\r\nexport enum UserRole {\r\n  SUPER_ADMIN = 'super_admin',\r\n  SOCIETY_ADMIN = 'society_admin',\r\n  BRANCH_ADMIN = 'branch_admin',\r\n  ACCOUNTANT = 'accountant',\r\n  OPERATOR = 'operator',\r\n  MEMBER = 'member'\r\n}\r\n\r\nexport interface Permission {\r\n  module: string;\r\n  actions: string[]; // create, read, update, delete, approve\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\r\n\r\n  private users: User[] = [\r\n    {\r\n      id: 1,\r\n      username: 'superadmin',\r\n      email: 'superadmin@system.com',\r\n      role: UserRole.SUPER_ADMIN,\r\n      firstName: 'Super',\r\n      lastName: 'Admin',\r\n      isActive: true,\r\n      createdDate: new Date('2024-01-01')\r\n    },\r\n    {\r\n      id: 2,\r\n      username: 'societyadmin',\r\n      email: 'admin@society1.com',\r\n      role: UserRole.SOCIETY_ADMIN,\r\n      societyId: 1,\r\n      societyName: 'ABC Society',\r\n      firstName: 'Society',\r\n      lastName: 'Admin',\r\n      isActive: true,\r\n      createdBy: 1,\r\n      createdDate: new Date('2024-01-15')\r\n    },\r\n    {\r\n      id: 3,\r\n      username: 'accountant1',\r\n      email: 'accountant1@society1.com',\r\n      role: UserRole.ACCOUNTANT,\r\n      societyId: 1,\r\n      societyName: 'ABC Society',\r\n      firstName: 'John',\r\n      lastName: 'Accountant',\r\n      isActive: true,\r\n      createdBy: 2,\r\n      createdDate: new Date('2024-02-01')\r\n    },\r\n    {\r\n      id: 4,\r\n      username: 'member1',\r\n      email: 'member1@society1.com',\r\n      role: UserRole.MEMBER,\r\n      societyId: 1,\r\n      societyName: 'ABC Society',\r\n      firstName: 'Jane',\r\n      lastName: 'Member',\r\n      isActive: true,\r\n      createdBy: 2,\r\n      createdDate: new Date('2024-02-15')\r\n    }\r\n  ];\r\n\r\n  private rolePermissions: Map<UserRole, Permission[]> = new Map([\r\n    [UserRole.SUPER_ADMIN, [\r\n      { module: 'all', actions: ['create', 'read', 'update', 'delete', 'approve'] }\r\n    ]],\r\n    [UserRole.SOCIETY_ADMIN, [\r\n      { module: 'members', actions: ['create', 'read', 'update', 'delete'] },\r\n      { module: 'accounts', actions: ['create', 'read', 'update', 'delete'] },\r\n      { module: 'transactions', actions: ['create', 'read', 'update', 'approve'] },\r\n      { module: 'reports', actions: ['read'] },\r\n      { module: 'master', actions: ['create', 'read', 'update'] },\r\n      { module: 'accountants', actions: ['create', 'read', 'update', 'delete'] }\r\n    ]],\r\n    [UserRole.ACCOUNTANT, [\r\n      { module: 'accounts', actions: ['create', 'read', 'update'] },\r\n      { module: 'transactions', actions: ['create', 'read', 'update'] },\r\n      { module: 'reports', actions: ['read'] },\r\n      { module: 'members', actions: ['read'] }\r\n    ]],\r\n    [UserRole.MEMBER, [\r\n      { module: 'own-account', actions: ['read'] },\r\n      { module: 'own-transactions', actions: ['read'] }\r\n    ]]\r\n  ]);\r\n\r\n  constructor(private router: Router) {\r\n    this.loadUserFromStorage();\r\n  }\r\n\r\n  login(username: string, password: string): Observable<boolean> {\r\n    return new Observable(observer => {\r\n      setTimeout(() => {\r\n        const user = this.users.find(u => u.username === username && u.isActive);\r\n        if (user && password === 'password') {\r\n          user.lastLogin = new Date();\r\n          this.currentUserSubject.next(user);\r\n          this.isLoggedInSubject.next(true);\r\n\r\n          if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {\r\n            localStorage.setItem('currentUser', JSON.stringify(user));\r\n          }\r\n\r\n          observer.next(true);\r\n        } else {\r\n          observer.next(false);\r\n        }\r\n        observer.complete();\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  logout(): void {\r\n    if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {\r\n      localStorage.removeItem('currentUser');\r\n    }\r\n    this.currentUserSubject.next(null);\r\n    this.isLoggedInSubject.next(false);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  hasPermission(module: string, action: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n\r\n    const permissions = this.rolePermissions.get(user.role);\r\n    if (!permissions) return false;\r\n\r\n    // Super admin has all permissions\r\n    if (user.role === UserRole.SUPER_ADMIN) return true;\r\n\r\n    return permissions.some(permission =>\r\n      (permission.module === module || permission.module === 'all') &&\r\n      permission.actions.includes(action)\r\n    );\r\n  }\r\n\r\n  canAccessRoute(route: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n\r\n    if (user.role === UserRole.SUPER_ADMIN) return true;\r\n\r\n    const routePermissions: { [key: string]: { module: string, action: string } } = {\r\n      '/master/member-details': { module: 'members', action: 'read' },\r\n      '/transaction/deposit-receipt': { module: 'transactions', action: 'read' },\r\n      '/accounts/cash-book': { module: 'accounts', action: 'read' },\r\n      '/file/security/authority': { module: 'all', action: 'read' },\r\n      '/file/security/new-user': { module: 'all', action: 'create' },\r\n      // Add more route mappings as needed\r\n    };\r\n\r\n    const permission = routePermissions[route];\r\n    if (!permission) return true; // Allow access to unmapped routes\r\n\r\n    return this.hasPermission(permission.module, permission.action);\r\n  }\r\n\r\n  createUser(userData: Partial<User>): Observable<User> {\r\n    return new Observable(observer => {\r\n      const currentUser = this.getCurrentUser();\r\n      if (!currentUser) {\r\n        observer.error('Not authenticated');\r\n        return;\r\n      }\r\n\r\n      const newUser: User = {\r\n        id: Math.max(...this.users.map(u => u.id)) + 1,\r\n        username: userData.username!,\r\n        email: userData.email!,\r\n        role: userData.role!,\r\n        firstName: userData.firstName!,\r\n        lastName: userData.lastName!,\r\n        societyId: userData.societyId || currentUser.societyId,\r\n        societyName: userData.societyName || currentUser.societyName,\r\n        isActive: true,\r\n        createdBy: currentUser.id,\r\n        createdDate: new Date()\r\n      };\r\n\r\n      this.users.push(newUser);\r\n      observer.next(newUser);\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  getUsers(): Observable<User[]> {\r\n    const currentUser = this.getCurrentUser();\r\n    if (!currentUser) return new Observable(obs => obs.next([]));\r\n\r\n    let filteredUsers = this.users;\r\n\r\n    if (currentUser.role === UserRole.SOCIETY_ADMIN) {\r\n      filteredUsers = this.users.filter(u => u.societyId === currentUser.societyId);\r\n    }\r\n\r\n    return new Observable(observer => {\r\n      observer.next(filteredUsers);\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  updateUser(user: User): void {\r\n    const index = this.users.findIndex(u => u.id === user.id);\r\n    if (index !== -1) {\r\n      this.users[index] = user;\r\n    }\r\n  }\r\n\r\n  deleteUser(userId: number): void {\r\n    const index = this.users.findIndex(u => u.id === userId);\r\n    if (index !== -1) {\r\n      this.users[index].isActive = false;\r\n    }\r\n  }\r\n\r\n  private loadUserFromStorage(): void {\r\n    if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {\r\n      const userData = localStorage.getItem('currentUser');\r\n      if (userData) {\r\n        const user = JSON.parse(userData);\r\n        this.currentUserSubject.next(user);\r\n        this.isLoggedInSubject.next(true);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  getUserRoles(): UserRole[] {\r\n    return Object.values(UserRole);\r\n  }\r\n\r\n  canCreateRole(targetRole: UserRole): boolean {\r\n    const currentUser = this.getCurrentUser();\r\n    if (!currentUser) return false;\r\n\r\n    switch (currentUser.role) {\r\n      case UserRole.SUPER_ADMIN:\r\n        return true;\r\n      case UserRole.SOCIETY_ADMIN:\r\n        return [UserRole.ACCOUNTANT, UserRole.MEMBER].includes(targetRole);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n}","size_bytes":8572},"src/app/services/data.service.ts":{"content":"\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface Member {\n  id: number;\n  memberCode: string;\n  name: string;\n  fatherName: string;\n  address: string;\n  phone: string;\n  email: string;\n  joinDate: string;\n  status: string;\n}\n\nexport interface DepositScheme {\n  id: number;\n  schemeName: string;\n  schemeCode: string;\n  interestRate: number;\n  minAmount: number;\n  maxAmount: number;\n  tenure: number;\n  tenureType: string;\n  status: string;\n}\n\nexport interface Loan {\n  id: number;\n  loanId: string;\n  memberCode: string;\n  memberName: string;\n  loanAmount: number;\n  interestRate: number;\n  tenure: number;\n  loanDate: string;\n  status: string;\n  emi: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private membersSubject = new BehaviorSubject<Member[]>([]);\n  private schemesSubject = new BehaviorSubject<DepositScheme[]>([]);\n  private loansSubject = new BehaviorSubject<Loan[]>([]);\n\n  members$ = this.membersSubject.asObservable();\n  schemes$ = this.schemesSubject.asObservable();\n  loans$ = this.loansSubject.asObservable();\n\n  constructor() {\n    this.loadInitialData();\n  }\n\n  private loadInitialData() {\n    // Load sample members\n    const members: Member[] = [\n      {\n        id: 1,\n        memberCode: 'MEM001',\n        name: 'John Doe',\n        fatherName: 'Robert Doe',\n        address: '123 Main St, City',\n        phone: '9876543210',\n        email: 'john@example.com',\n        joinDate: '2023-01-15',\n        status: 'Active'\n      },\n      {\n        id: 2,\n        memberCode: 'MEM002',\n        name: 'Jane Smith',\n        fatherName: 'Michael Smith',\n        address: '456 Oak Ave, Town',\n        phone: '9876543211',\n        email: 'jane@example.com',\n        joinDate: '2023-02-20',\n        status: 'Active'\n      }\n    ];\n\n    // Load sample schemes\n    const schemes: DepositScheme[] = [\n      {\n        id: 1,\n        schemeCode: 'RD001',\n        schemeName: 'Regular Deposit',\n        interestRate: 7.5,\n        minAmount: 500,\n        maxAmount: 50000,\n        tenure: 12,\n        tenureType: 'months',\n        status: 'Active'\n      }\n    ];\n\n    // Load sample loans\n    const loans: Loan[] = [\n      {\n        id: 1,\n        loanId: 'LN001',\n        memberCode: 'MEM001',\n        memberName: 'John Doe',\n        loanAmount: 100000,\n        interestRate: 12,\n        tenure: 24,\n        loanDate: '2024-01-15',\n        status: 'Active',\n        emi: 4707\n      }\n    ];\n\n    this.membersSubject.next(members);\n    this.schemesSubject.next(schemes);\n    this.loansSubject.next(loans);\n  }\n\n  // Member methods\n  getMembers(): Observable<Member[]> {\n    return this.members$;\n  }\n\n  addMember(member: Member): void {\n    const currentMembers = this.membersSubject.value;\n    this.membersSubject.next([...currentMembers, member]);\n  }\n\n  updateMember(member: Member): void {\n    const currentMembers = this.membersSubject.value;\n    const index = currentMembers.findIndex(m => m.id === member.id);\n    if (index !== -1) {\n      currentMembers[index] = member;\n      this.membersSubject.next([...currentMembers]);\n    }\n  }\n\n  deleteMember(id: number): void {\n    const currentMembers = this.membersSubject.value;\n    this.membersSubject.next(currentMembers.filter(m => m.id !== id));\n  }\n\n  // Scheme methods\n  getSchemes(): Observable<DepositScheme[]> {\n    return this.schemes$;\n  }\n\n  addScheme(scheme: DepositScheme): void {\n    const currentSchemes = this.schemesSubject.value;\n    this.schemesSubject.next([...currentSchemes, scheme]);\n  }\n\n  updateScheme(scheme: DepositScheme): void {\n    const currentSchemes = this.schemesSubject.value;\n    const index = currentSchemes.findIndex(s => s.id === scheme.id);\n    if (index !== -1) {\n      currentSchemes[index] = scheme;\n      this.schemesSubject.next([...currentSchemes]);\n    }\n  }\n\n  deleteScheme(id: number): void {\n    const currentSchemes = this.schemesSubject.value;\n    this.schemesSubject.next(currentSchemes.filter(s => s.id !== id));\n  }\n\n  // Loan methods\n  getLoans(): Observable<Loan[]> {\n    return this.loans$;\n  }\n\n  addLoan(loan: Loan): void {\n    const currentLoans = this.loansSubject.value;\n    this.loansSubject.next([...currentLoans, loan]);\n  }\n\n  updateLoan(loan: Loan): void {\n    const currentLoans = this.loansSubject.value;\n    const index = currentLoans.findIndex(l => l.id === loan.id);\n    if (index !== -1) {\n      currentLoans[index] = loan;\n      this.loansSubject.next([...currentLoans]);\n    }\n  }\n\n  deleteLoan(id: number): void {\n    const currentLoans = this.loansSubject.value;\n    this.loansSubject.next(currentLoans.filter(l => l.id !== id));\n  }\n\n  // Utility methods\n  calculateEMI(principal: number, rate: number, tenure: number): number {\n    const monthlyRate = rate / 12 / 100;\n    const emi = (principal * monthlyRate * Math.pow(1 + monthlyRate, tenure)) / \n                (Math.pow(1 + monthlyRate, tenure) - 1);\n    return Math.round(emi);\n  }\n\n  generateNextId(type: 'member' | 'scheme' | 'loan'): number {\n    switch (type) {\n      case 'member':\n        return Math.max(...this.membersSubject.value.map(m => m.id), 0) + 1;\n      case 'scheme':\n        return Math.max(...this.schemesSubject.value.map(s => s.id), 0) + 1;\n      case 'loan':\n        return Math.max(...this.loansSubject.value.map(l => l.id), 0) + 1;\n      default:\n        return 1;\n    }\n  }\n}\n","size_bytes":5396},"src/app/services/member.service.ts":{"content":"\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\nexport interface Member {\r\n  id?: number;\r\n  memberNo: string;\r\n  name: string;\r\n  fhName: string;\r\n  dateOfBirth?: Date | string;\r\n  mobile?: string;\r\n  email?: string;\r\n  designation?: string;\r\n  dojJob?: Date | string;\r\n  doRetirement?: Date | string;\r\n  branch?: string;\r\n  dojSociety?: Date | string;\r\n  officeAddress?: string;\r\n  residenceAddress?: string;\r\n  city?: string;\r\n  phoneOffice?: string;\r\n  phoneResidence?: string;\r\n  nominee?: string;\r\n  nomineeRelation?: string;\r\n  shareAmount: number;\r\n  cdAmount: number;\r\n  bankName?: string;\r\n  payableAt?: string;\r\n  accountNo?: string;\r\n  status?: string;\r\n  date?: Date | string;\r\n  photoPath?: string;\r\n  signaturePath?: string;\r\n  shareDeduction?: number;\r\n  withdrawal?: number;\r\n  gLoanInstalment?: number;\r\n  eLoanInstalment?: number;\r\n  createdDate?: Date | string;\r\n  updatedDate?: Date | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MemberService {\r\n  private apiUrl = 'http://localhost:5000/api/members';\r\n\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllMembers(): Observable<Member[]> {\r\n    return this.http.get<Member[]>(this.apiUrl)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getMemberById(id: number): Observable<Member> {\r\n    return this.http.get<Member>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getMemberByNumber(memberNo: string): Observable<Member> {\r\n    return this.http.get<Member>(`${this.apiUrl}/by-number/${memberNo}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createMember(member: Member): Observable<Member> {\r\n    // Convert dates to proper format\r\n    const memberData = this.prepareMemberData(member);\r\n    \r\n    return this.http.post<Member>(this.apiUrl, memberData, this.httpOptions)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateMember(id: number, member: Member): Observable<Member> {\r\n    // Convert dates to proper format\r\n    const memberData = this.prepareMemberData(member);\r\n    \r\n    return this.http.put<Member>(`${this.apiUrl}/${id}`, memberData, this.httpOptions)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deleteMember(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private prepareMemberData(member: Member): any {\r\n    const data = { ...member };\r\n    \r\n    // Convert date objects to ISO strings for API\r\n    if (data.dateOfBirth instanceof Date) {\r\n      data.dateOfBirth = data.dateOfBirth.toISOString();\r\n    }\r\n    if (data.dojJob instanceof Date) {\r\n      data.dojJob = data.dojJob.toISOString();\r\n    }\r\n    if (data.doRetirement instanceof Date) {\r\n      data.doRetirement = data.doRetirement.toISOString();\r\n    }\r\n    if (data.dojSociety instanceof Date) {\r\n      data.dojSociety = data.dojSociety.toISOString();\r\n    }\r\n    if (data.date instanceof Date) {\r\n      data.date = data.date.toISOString();\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      switch (error.status) {\r\n        case 400:\r\n          errorMessage = 'Bad Request - Please check your input';\r\n          break;\r\n        case 401:\r\n          errorMessage = 'Unauthorized - Please login again';\r\n          break;\r\n        case 403:\r\n          errorMessage = 'Forbidden - You do not have permission';\r\n          break;\r\n        case 404:\r\n          errorMessage = 'Not Found - The requested resource was not found';\r\n          break;\r\n        case 409:\r\n          errorMessage = 'Conflict - Member number already exists';\r\n          break;\r\n        case 500:\r\n          errorMessage = 'Internal Server Error - Please try again later';\r\n          break;\r\n        default:\r\n          errorMessage = `Server Error: ${error.status} - ${error.message}`;\r\n      }\r\n    }\r\n    \r\n    console.error('API Error:', error);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}\r\n","size_bytes":4629},"attached_assets/extracted_frontend/fintcs/src/main.server.ts":{"content":"import { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { config } from './app/app.config.server';\n\nconst bootstrap = () => bootstrapApplication(AppComponent, config);\n\nexport default bootstrap;\n","size_bytes":264},"attached_assets/extracted_frontend/fintcs/src/main.ts":{"content":"import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));\n","size_bytes":250},"attached_assets/extracted_frontend/fintcs/src/styles.css":{"content":"\r\n@import '@angular/material/prebuilt-themes/indigo-pink.css';\r\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\r\n\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n/* Professional Design System - Metronic Style */\r\n:root {\r\n  /* Primary Color Palette - Professional Blues & Purples */\r\n  --color-primary-50: #eff6ff;\r\n  --color-primary-100: #dbeafe;\r\n  --color-primary-200: #bfdbfe;\r\n  --color-primary-300: #93c5fd;\r\n  --color-primary-400: #60a5fa;\r\n  --color-primary-500: #3b82f6;\r\n  --color-primary-600: #2563eb;\r\n  --color-primary-700: #1d4ed8;\r\n  --color-primary-800: #1e40af;\r\n  --color-primary-900: #1e3a8a;\r\n\r\n  /* Secondary Color Palette - Professional Purples */\r\n  --color-secondary-50: #faf5ff;\r\n  --color-secondary-100: #f3e8ff;\r\n  --color-secondary-200: #e9d5ff;\r\n  --color-secondary-300: #d8b4fe;\r\n  --color-secondary-400: #c084fc;\r\n  --color-secondary-500: #a855f7;\r\n  --color-secondary-600: #9333ea;\r\n  --color-secondary-700: #7c3aed;\r\n  --color-secondary-800: #6b21a8;\r\n  --color-secondary-900: #581c87;\r\n\r\n  /* Success, Warning, Danger Colors */\r\n  --color-success-500: #10b981;\r\n  --color-success-600: #059669;\r\n  --color-warning-500: #f59e0b;\r\n  --color-warning-600: #d97706;\r\n  --color-danger-500: #ef4444;\r\n  --color-danger-600: #dc2626;\r\n  --color-info-500: #06b6d4;\r\n  --color-info-600: #0891b2;\r\n\r\n  /* Professional Gradients - Metronic Style */\r\n  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\r\n  --gradient-success: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\r\n  --gradient-warning: linear-gradient(135deg, #fa709a 0%, #fee140 100%);\r\n  --gradient-sidebar: linear-gradient(180deg, #1a202c 0%, #2d3748 50%, #1a202c 100%);\r\n  --gradient-header: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\r\n  --gradient-card-header: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\r\n\r\n  /* Light Theme Variables */\r\n  --color-bg-primary: #ffffff;\r\n  --color-bg-secondary: #f8fafc;\r\n  --color-bg-tertiary: #f1f5f9;\r\n  --color-bg-card: #ffffff;\r\n  --color-bg-input: #ffffff;\r\n  \r\n  --color-text-primary: #1e293b;\r\n  --color-text-secondary: #475569;\r\n  --color-text-muted: #64748b;\r\n  --color-text-light: #94a3b8;\r\n  --color-text-inverse: #ffffff;\r\n  \r\n  --color-border-primary: #e2e8f0;\r\n  --color-border-secondary: #cbd5e1;\r\n  --color-border-focus: #3b82f6;\r\n  --color-border-error: #ef4444;\r\n  \r\n  /* Professional Shadows */\r\n  --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);\r\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\r\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);\r\n  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);\r\n  \r\n  /* Professional Border Radius */\r\n  --radius-sm: 6px;\r\n  --radius-md: 8px;\r\n  --radius-lg: 12px;\r\n  --radius-xl: 16px;\r\n  --radius-2xl: 24px;\r\n  \r\n  /* Professional Spacing */\r\n  --spacing-xs: 4px;\r\n  --spacing-sm: 8px;\r\n  --spacing-md: 16px;\r\n  --spacing-lg: 24px;\r\n  --spacing-xl: 32px;\r\n  --spacing-2xl: 48px;\r\n  --spacing-3xl: 64px;\r\n}\r\n\r\n/* Dark Theme Variables */\r\n.dark {\r\n  --color-bg-primary: #1e293b;\r\n  --color-bg-secondary: #0f172a;\r\n  --color-bg-tertiary: #334155;\r\n  --color-bg-card: #1e293b;\r\n  --color-bg-input: #334155;\r\n  \r\n  --color-text-primary: #f1f5f9;\r\n  --color-text-secondary: #cbd5e1;\r\n  --color-text-muted: #94a3b8;\r\n  --color-text-light: #64748b;\r\n  --color-text-inverse: #1e293b;\r\n  \r\n  --color-border-primary: #334155;\r\n  --color-border-secondary: #475569;\r\n  --color-border-focus: #60a5fa;\r\n  --color-border-error: #f87171;\r\n\r\n  --gradient-sidebar: linear-gradient(180deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);\r\n  --gradient-header: linear-gradient(90deg, #1e293b 0%, #334155 100%);\r\n}\r\n\r\n/* Base Styles */\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n  scroll-behavior: smooth;\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n  color: var(--color-text-primary);\r\n  background-color: var(--color-bg-secondary);\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n/* Professional Typography Scale */\r\n.text-display {\r\n  font-size: 2rem;\r\n  font-weight: 800;\r\n  line-height: 1.2;\r\n  letter-spacing: -0.025em;\r\n}\r\n\r\n.text-page-title {\r\n  font-size: 1.25rem;\r\n  font-weight: 700;\r\n  line-height: 1.3;\r\n  letter-spacing: -0.02em;\r\n}\r\n\r\n.text-section-header {\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  line-height: 1.4;\r\n  letter-spacing: -0.01em;\r\n}\r\n\r\n.text-body {\r\n  font-size: 0.875rem;\r\n  font-weight: 400;\r\n  line-height: 1.6;\r\n}\r\n\r\n.text-body-sm {\r\n  font-size: 0.8125rem;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n}\r\n\r\n.text-caption {\r\n  font-size: 0.75rem;\r\n  font-weight: 500;\r\n  line-height: 1.4;\r\n  letter-spacing: 0.025em;\r\n}\r\n\r\n.text-label {\r\n  font-size: 0.6875rem;\r\n  font-weight: 600;\r\n  line-height: 1.3;\r\n  letter-spacing: 0.05em;\r\n  text-transform: uppercase;\r\n}\r\n\r\n/* Professional Layout Components */\r\n@layer components {\r\n  \r\n  /* Page Layout */\r\n  .page-container {\r\n    min-height: 100vh;\r\n    background: var(--color-bg-secondary);\r\n  }\r\n\r\n  .content-area {\r\n    padding: var(--spacing-lg);\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  .content-header {\r\n    margin-bottom: var(--spacing-xl);\r\n    padding-bottom: var(--spacing-md);\r\n    border-bottom: 1px solid var(--color-border-primary);\r\n  }\r\n\r\n  .breadcrumb {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-sm);\r\n    margin-bottom: var(--spacing-md);\r\n    font-size: 0.875rem;\r\n    color: var(--color-text-muted);\r\n  }\r\n\r\n  .breadcrumb-separator {\r\n    color: var(--color-text-light);\r\n  }\r\n\r\n  .breadcrumb-active {\r\n    color: var(--color-text-primary);\r\n    font-weight: 500;\r\n  }\r\n\r\n  /* Professional Cards */\r\n  .card {\r\n    background: var(--color-bg-card);\r\n    /* border: 1px solid var(--color-border-primary); */\r\n    border-radius: var(--radius-lg);\r\n    box-shadow: var(--shadow-sm);\r\n    overflow: hidden;\r\n    transition: all 0.2s ease-in-out;\r\n    margin-bottom: var(--spacing-lg);\r\n  }\r\n\r\n  .card:hover {\r\n    box-shadow: var(--shadow-md);\r\n    transform: translateY(-2px);\r\n  }\r\n\r\n  .card-header {\r\n    background: var(--gradient-card-header);\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    color: var(--color-text-inverse);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .card-title {\r\n    font-size: 1rem;\r\n    font-weight: 600;\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-sm);\r\n  }\r\n\r\n  .card-content {\r\n    padding: var(--spacing-lg);\r\n  }\r\n\r\n  .card-actions {\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    background: var(--color-bg-tertiary);\r\n    border-top: 1px solid var(--color-border-primary);\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: var(--spacing-sm);\r\n  }\r\n\r\n  /* Professional Form System */\r\n  .form-container {\r\n    display: grid;\r\n    gap: var(--spacing-lg);\r\n  }\r\n\r\n  .form-section {\r\n    background: var(--color-bg-card);\r\n    /* border: 1px solid var(--color-border-primary); */\r\n    /* border-radius: var(--radius-lg); */\r\n    /* box-shadow: var(--shadow-sm); */\r\n    overflow: hidden;\r\n  }\r\n\r\n  .form-section-header {\r\n    /* background: var(--gradient-card-header); */\r\n    /* padding: var(--spacing-md) var(--spacing-lg); */\r\n    color: var(--color-text-inverse);\r\n    font-weight: 600;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-sm);\r\n  }\r\n\r\n  .form-section-content {\r\n    padding: var(--spacing-lg);\r\n  }\r\n\r\n  .form-grid {\r\n    display: grid;\r\n    gap: var(--spacing-md);\r\n  }\r\n\r\n  .form-grid-1 { grid-template-columns: 1fr; }\r\n  .form-grid-2 { grid-template-columns: repeat(2, 1fr); }\r\n  .form-grid-3 { grid-template-columns: repeat(3, 1fr); }\r\n  .form-grid-4 { grid-template-columns: repeat(4, 1fr); }\r\n\r\n  @media (max-width: 1024px) {\r\n    .form-grid-4 { grid-template-columns: repeat(2, 1fr); }\r\n    .form-grid-3 { grid-template-columns: repeat(2, 1fr); }\r\n  }\r\n\r\n  @media (max-width: 640px) {\r\n    .form-grid-4,\r\n    .form-grid-3,\r\n    .form-grid-2 { \r\n      grid-template-columns: 1fr; \r\n    }\r\n  }\r\n\r\n  /* Professional Form Fields */\r\n  .form-field {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--spacing-xs);\r\n  }\r\n\r\n  .form-label {\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    color: var(--color-text-secondary);\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.05em;\r\n    margin-bottom: var(--spacing-xs);\r\n  }\r\n\r\n  .form-label-required::after {\r\n    content: \" *\";\r\n    color: var(--color-danger-500);\r\n    font-weight: 700;\r\n  }\r\n\r\n  .form-input,\r\n  .form-select,\r\n  .form-textarea {\r\n    width: 100%;\r\n    padding: 12px 16px;\r\n    font-size: 14px;\r\n    font-family: inherit;\r\n    color: var(--color-text-primary);\r\n    background: var(--color-bg-input);\r\n    border: 1px solid var(--color-border-primary);\r\n    border-radius: var(--radius-md);\r\n    outline: none;\r\n    transition: all 0.2s ease-in-out;\r\n    box-shadow: var(--shadow-xs);\r\n  }\r\n\r\n  .form-input:hover,\r\n  .form-select:hover,\r\n  .form-textarea:hover {\r\n    border-color: var(--color-border-secondary);\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .form-input:focus,\r\n  .form-select:focus,\r\n  .form-textarea:focus {\r\n    border-color: var(--color-border-focus);\r\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\r\n    background: var(--color-bg-primary);\r\n  }\r\n\r\n  .form-input:disabled,\r\n  .form-select:disabled,\r\n  .form-textarea:disabled {\r\n    background: var(--color-bg-tertiary);\r\n    color: var(--color-text-muted);\r\n    cursor: not-allowed;\r\n    opacity: 0.6;\r\n  }\r\n\r\n  .form-input.error,\r\n  .form-select.error,\r\n  .form-textarea.error {\r\n    border-color: var(--color-border-error);\r\n    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);\r\n  }\r\n\r\n  .form-select {\r\n    cursor: pointer;\r\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\r\n    background-position: right 12px center;\r\n    background-repeat: no-repeat;\r\n    background-size: 16px;\r\n    padding-right: 40px;\r\n  }\r\n\r\n  .form-textarea {\r\n    resize: vertical;\r\n    min-height: 80px;\r\n    line-height: 1.5;\r\n  }\r\n\r\n  .form-error {\r\n    font-size: 0.75rem;\r\n    color: var(--color-danger-500);\r\n    font-weight: 500;\r\n    margin-top: var(--spacing-xs);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-xs);\r\n  }\r\n\r\n  .form-help {\r\n    font-size: 0.75rem;\r\n    color: var(--color-text-muted);\r\n    margin-top: var(--spacing-xs);\r\n  }\r\n\r\n  /* Professional Buttons */\r\n  .btn {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: var(--spacing-sm);\r\n    padding: 10px 20px;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    font-family: inherit;\r\n    border-radius: var(--radius-md);\r\n    border: 1px solid transparent;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease-in-out;\r\n    text-decoration: none;\r\n    white-space: nowrap;\r\n    outline: none;\r\n    position: relative;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .btn:disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .btn-primary {\r\n    background: var(--gradient-primary);\r\n    color: white;\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-primary:hover:not(:disabled) {\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-md);\r\n    filter: brightness(1.05);\r\n  }\r\n\r\n  .btn-secondary {\r\n    background: var(--color-bg-card);\r\n    color: var(--color-text-primary);\r\n    border-color: var(--color-border-primary);\r\n    box-shadow: var(--shadow-xs);\r\n  }\r\n\r\n  .btn-secondary:hover:not(:disabled) {\r\n    background: var(--color-bg-tertiary);\r\n    border-color: var(--color-primary-500);\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-outline {\r\n    background: transparent;\r\n    color: var(--color-primary-600);\r\n    border-color: var(--color-primary-600);\r\n  }\r\n\r\n  .btn-outline:hover:not(:disabled) {\r\n    background: var(--color-primary-600);\r\n    color: white;\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-success {\r\n    background: var(--color-success-500);\r\n    color: white;\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-success:hover:not(:disabled) {\r\n    background: var(--color-success-600);\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n\r\n  .btn-warning {\r\n    background: var(--color-warning-500);\r\n    color: white;\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-warning:hover:not(:disabled) {\r\n    background: var(--color-warning-600);\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n\r\n  .btn-danger {\r\n    background: var(--color-danger-500);\r\n    color: white;\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .btn-danger:hover:not(:disabled) {\r\n    background: var(--color-danger-600);\r\n    transform: translateY(-1px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n\r\n  .btn-sm {\r\n    padding: 6px 12px;\r\n    font-size: 12px;\r\n  }\r\n\r\n  .btn-lg {\r\n    padding: 14px 28px;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .btn-icon {\r\n    padding: 8px;\r\n    width: 36px;\r\n    height: 36px;\r\n  }\r\n\r\n  /* Professional Tables */\r\n  .table-container {\r\n    background: var(--color-bg-card);\r\n    border-radius: var(--radius-lg);\r\n    overflow: hidden;\r\n    box-shadow: var(--shadow-sm);\r\n    border: 1px solid var(--color-border-primary);\r\n  }\r\n\r\n  .table-header {\r\n    background: var(--gradient-card-header);\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    color: var(--color-text-inverse);\r\n    font-weight: 600;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .table-filters {\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    background: var(--color-bg-tertiary);\r\n    border-bottom: 1px solid var(--color-border-primary);\r\n    display: flex;\r\n    gap: var(--spacing-md);\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  /* Status Badges */\r\n  .badge {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    gap: var(--spacing-xs);\r\n    padding: 4px 12px;\r\n    border-radius: var(--radius-xl);\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n    border: 1px solid transparent;\r\n  }\r\n\r\n  .badge-success {\r\n    background: rgba(16, 185, 129, 0.1);\r\n    color: var(--color-success-600);\r\n    border-color: rgba(16, 185, 129, 0.2);\r\n  }\r\n\r\n  .badge-warning {\r\n    background: rgba(245, 158, 11, 0.1);\r\n    color: var(--color-warning-600);\r\n    border-color: rgba(245, 158, 11, 0.2);\r\n  }\r\n\r\n  .badge-danger {\r\n    background: rgba(239, 68, 68, 0.1);\r\n    color: var(--color-danger-600);\r\n    border-color: rgba(239, 68, 68, 0.2);\r\n  }\r\n\r\n  .badge-info {\r\n    background: rgba(6, 182, 212, 0.1);\r\n    color: var(--color-info-600);\r\n    border-color: rgba(6, 182, 212, 0.2);\r\n  }\r\n\r\n  .badge-secondary {\r\n    background: rgba(107, 114, 128, 0.1);\r\n    color: var(--color-text-muted);\r\n    border-color: rgba(107, 114, 128, 0.2);\r\n  }\r\n\r\n  /* Professional Sidebar */\r\n  .sidebar {\r\n    background: var(--gradient-sidebar);\r\n    width: 280px;\r\n    height: 100vh;\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 1000;\r\n    overflow-y: auto;\r\n    border-right: 1px solid var(--color-border-primary);\r\n  }\r\n\r\n  .sidebar-header {\r\n    padding: var(--spacing-lg);\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n    text-align: center;\r\n  }\r\n\r\n  .sidebar-logo {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: var(--spacing-md);\r\n    color: white;\r\n    font-weight: 700;\r\n    font-size: 1.125rem;\r\n  }\r\n\r\n  .sidebar-nav {\r\n    padding: var(--spacing-lg) var(--spacing-md);\r\n  }\r\n\r\n  .nav-section {\r\n    margin-bottom: var(--spacing-xl);\r\n  }\r\n\r\n  .nav-section-title {\r\n    color: rgba(255, 255, 255, 0.6);\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.05em;\r\n    margin-bottom: var(--spacing-md);\r\n    padding: 0 var(--spacing-md);\r\n  }\r\n\r\n  .nav-item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-md);\r\n    padding: 12px var(--spacing-md);\r\n    margin: 2px 0;\r\n    border-radius: var(--radius-md);\r\n    color: rgba(255, 255, 255, 0.8);\r\n    text-decoration: none;\r\n    transition: all 0.2s ease-in-out;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n  }\r\n\r\n  .nav-item:hover {\r\n    background: rgba(255, 255, 255, 0.1);\r\n    color: white;\r\n    transform: translateX(4px);\r\n  }\r\n\r\n  .nav-item.active {\r\n    background: rgba(255, 255, 255, 0.15);\r\n    color: white;\r\n    font-weight: 600;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .nav-submenu {\r\n    margin-left: var(--spacing-xl);\r\n    margin-top: var(--spacing-sm);\r\n  }\r\n\r\n  .nav-submenu .nav-item {\r\n    font-size: 13px;\r\n    padding: 8px var(--spacing-md);\r\n  }\r\n\r\n  /* Main Content Area */\r\n  .main-content {\r\n    margin-left: 280px;\r\n    min-height: 100vh;\r\n    background: var(--color-bg-secondary);\r\n  }\r\n\r\n  .header {\r\n    background: var(--color-bg-card);\r\n    border-bottom: 1px solid var(--color-border-primary);\r\n    padding: var(--spacing-md) var(--spacing-lg);\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 100;\r\n  }\r\n\r\n  .header-content {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .header-left {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-lg);\r\n  }\r\n\r\n  .header-right {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-md);\r\n  }\r\n\r\n  /* Theme Toggle */\r\n  .theme-toggle {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--spacing-sm);\r\n    padding: var(--spacing-sm) var(--spacing-md);\r\n    background: var(--color-bg-tertiary);\r\n    border-radius: var(--radius-lg);\r\n    border: 1px solid var(--color-border-primary);\r\n  }\r\n\r\n  /* Responsive Design */\r\n  @media (max-width: 1024px) {\r\n    .sidebar {\r\n      transform: translateX(-100%);\r\n      transition: transform 0.3s ease-in-out;\r\n    }\r\n\r\n    .sidebar.open {\r\n      transform: translateX(0);\r\n    }\r\n\r\n    .main-content {\r\n      margin-left: 0;\r\n    }\r\n\r\n    .mobile-overlay {\r\n      position: fixed;\r\n      inset: 0;\r\n      background: rgba(0, 0, 0, 0.5);\r\n      z-index: 999;\r\n      backdrop-filter: blur(4px);\r\n    }\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .content-area {\r\n      padding: var(--spacing-md);\r\n    }\r\n\r\n    .card-content,\r\n    .form-section-content {\r\n      padding: var(--spacing-md);\r\n    }\r\n\r\n    .btn {\r\n      padding: 8px 16px;\r\n      font-size: 13px;\r\n    }\r\n\r\n    .text-display { font-size: 1.75rem; }\r\n    .text-page-title { font-size: 1.125rem; }\r\n    .text-section-header { font-size: 0.9375rem; }\r\n  }\r\n\r\n  /* Animations */\r\n  .animate-fade-in {\r\n    animation: fadeIn 0.4s ease-out forwards;\r\n  }\r\n\r\n  .animate-slide-in {\r\n    animation: slideIn 0.3s ease-out forwards;\r\n  }\r\n\r\n  .animate-slide-up {\r\n    animation: slideUp 0.3s ease-out forwards;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; transform: translateY(10px); }\r\n    to { opacity: 1; transform: translateY(0); }\r\n  }\r\n\r\n  @keyframes slideIn {\r\n    from { opacity: 0; transform: translateX(-20px); }\r\n    to { opacity: 1; transform: translateX(0); }\r\n  }\r\n\r\n  @keyframes slideUp {\r\n    from { opacity: 0; transform: translateY(20px); }\r\n    to { opacity: 1; transform: translateY(0); }\r\n  }\r\n\r\n  /* Loading States */\r\n  .loading-shimmer {\r\n    background: linear-gradient(90deg, \r\n      var(--color-bg-secondary) 25%, \r\n      var(--color-bg-tertiary) 50%, \r\n      var(--color-bg-secondary) 75%);\r\n    background-size: 200% 100%;\r\n    animation: shimmer 1.5s infinite;\r\n    border-radius: var(--radius-md);\r\n  }\r\n\r\n  @keyframes shimmer {\r\n    0% { background-position: -200% 0; }\r\n    100% { background-position: 200% 0; }\r\n  }\r\n}\r\n\r\n/* Angular Material Overrides for Professional Look */\r\n\r\n/* Form Fields */\r\n.mat-mdc-form-field {\r\n  width: 100% !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n.mat-mdc-form-field-appearance-outline .mdc-notched-outline {\r\n  border-color: var(--color-border-primary) !important;\r\n  border-radius: var(--radius-md) !important;\r\n}\r\n\r\n.mat-mdc-form-field-appearance-outline .mdc-text-field--focused .mdc-notched-outline {\r\n  border-color: var(--color-border-focus) !important;\r\n  border-width: 2px !important;\r\n}\r\n\r\n.mat-mdc-form-field .mat-mdc-input-element {\r\n  padding: 14px 16px !important;\r\n  font-size: 14px !important;\r\n  color: var(--color-text-primary) !important;\r\n  background: var(--color-bg-input) !important;\r\n}\r\n\r\n.mat-mdc-form-field .mat-mdc-floating-label {\r\n  color: var(--color-text-secondary) !important;\r\n  font-size: 12px !important;\r\n  font-weight: 600 !important;\r\n  text-transform: uppercase !important;\r\n  letter-spacing: 0.05em !important;\r\n}\r\n\r\n/* Buttons */\r\n.mat-mdc-button,\r\n.mat-mdc-raised-button,\r\n.mat-mdc-outlined-button {\r\n  border-radius: var(--radius-md) !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n  font-weight: 500 !important;\r\n  text-transform: none !important;\r\n  transition: all 0.2s ease-in-out !important;\r\n}\r\n\r\n.mat-mdc-raised-button {\r\n  background: var(--gradient-primary) !important;\r\n  color: white !important;\r\n  box-shadow: var(--shadow-sm) !important;\r\n}\r\n\r\n.mat-mdc-raised-button:hover {\r\n  transform: translateY(-1px) !important;\r\n  box-shadow: var(--shadow-md) !important;\r\n}\r\n\r\n/* Cards */\r\n.mat-mdc-card {\r\n  background: var(--color-bg-card) !important;\r\n  border: 1px solid var(--color-border-primary) !important;\r\n  box-shadow: var(--shadow-sm) !important;\r\n  border-radius: var(--radius-lg) !important;\r\n  transition: all 0.2s ease-in-out !important;\r\n}\r\n\r\n.mat-mdc-card:hover {\r\n  box-shadow: var(--shadow-md) !important;\r\n  transform: translateY(-2px) !important;\r\n}\r\n\r\n/* Tables */\r\n.mat-mdc-table {\r\n  background: var(--color-bg-card) !important;\r\n  border-radius: var(--radius-lg) !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n.mat-mdc-header-row {\r\n  background: var(--gradient-card-header) !important;\r\n  height: 56px !important;\r\n}\r\n\r\n.mat-mdc-header-cell {\r\n  color: white !important;\r\n  font-weight: 600 !important;\r\n  font-size: 14px !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n.mat-mdc-cell {\r\n  font-size: 14px !important;\r\n  color: var(--color-text-primary) !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n.mat-mdc-row {\r\n  height: 56px !important;\r\n  border-bottom: 1px solid var(--color-border-primary) !important;\r\n  transition: all 0.2s ease-in-out !important;\r\n}\r\n\r\n.mat-mdc-row:hover {\r\n  background: var(--color-bg-tertiary) !important;\r\n}\r\n\r\n.mat-mdc-row:nth-child(even) {\r\n  background: rgba(248, 250, 252, 0.3) !important;\r\n}\r\n\r\n/* Select Panels */\r\n.mat-mdc-select-panel {\r\n  background: var(--color-bg-card) !important;\r\n  border: 1px solid var(--color-border-primary) !important;\r\n  border-radius: var(--radius-md) !important;\r\n  box-shadow: var(--shadow-lg) !important;\r\n}\r\n\r\n.mat-mdc-option {\r\n  font-family: 'Inter', sans-serif !important;\r\n  color: var(--color-text-primary) !important;\r\n  padding: 12px 16px !important;\r\n}\r\n\r\n.mat-mdc-option:hover {\r\n  background: var(--color-bg-tertiary) !important;\r\n}\r\n\r\n/* Sidenav */\r\n.mat-sidenav {\r\n  background: var(--gradient-sidebar) !important;\r\n  border-right: 1px solid var(--color-border-primary) !important;\r\n  width: 280px !important;\r\n}\r\n\r\n.mat-toolbar {\r\n  background: var(--color-bg-card) !important;\r\n  color: var(--color-text-primary) !important;\r\n  border-bottom: 1px solid var(--color-border-primary) !important;\r\n  font-family: 'Inter', sans-serif !important;\r\n}\r\n\r\n/* Scrollbar */\r\n::-webkit-scrollbar {\r\n  width: 6px;\r\n  height: 6px;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n  background: var(--color-bg-tertiary);\r\n  border-radius: 3px;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background: var(--color-border-secondary);\r\n  border-radius: 3px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: var(--color-text-muted);\r\n}\r\n\r\n/* Print Styles */\r\n@media print {\r\n  .sidebar,\r\n  .header,\r\n  .btn,\r\n  .no-print {\r\n    display: none !important;\r\n  }\r\n\r\n  .main-content {\r\n    margin-left: 0 !important;\r\n  }\r\n\r\n  .card {\r\n    /* box-shadow: none !important; */\r\n    /* border: 1px solid #ddd !important; */\r\n  }\r\n}\r\n\r\n/* Focus Styles for Accessibility */\r\n.btn:focus-visible,\r\n.form-input:focus-visible,\r\n.form-select:focus-visible,\r\n.form-textarea:focus-visible,\r\n.nav-item:focus-visible {\r\n  outline: 2px solid var(--color-primary-500);\r\n  outline-offset: 2px;\r\n}\r\n\r\n/* High Contrast Mode */\r\n@media (prefers-contrast: high) {\r\n  :root {\r\n    --color-border-primary: #000000;\r\n    --color-text-primary: #000000;\r\n    --color-bg-card: #ffffff;\r\n  }\r\n  \r\n  .dark {\r\n    --color-border-primary: #ffffff;\r\n    --color-text-primary: #ffffff;\r\n    --color-bg-card: #000000;\r\n  }\r\n}\r\n\r\n/* Reduced Motion */\r\n@media (prefers-reduced-motion: reduce) {\r\n  * {\r\n    animation-duration: 0.01ms !important;\r\n    animation-iteration-count: 1 !important;\r\n    transition-duration: 0.01ms !important;\r\n  }\r\n}\r\n","size_bytes":25452},"src/app/components/admin/admin.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTabsModule } from '@angular/material/tabs';\n\n@Component({\n  selector: 'app-admin',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatIconModule, MatTabsModule],\n  template: `\n    <div class=\"admin-container\">\n      <h1>Administration</h1>\n      \n      <mat-tab-group>\n        <mat-tab label=\"User Management\">\n          <div class=\"tab-content\">\n            <mat-card>\n              <mat-card-header>\n                <mat-card-title>Manage Users</mat-card-title>\n              </mat-card-header>\n              <mat-card-content>\n                <p>Total Users: 15</p>\n                <p>Active Users: 12</p>\n                <p>Administrators: 3</p>\n              </mat-card-content>\n              <mat-card-actions>\n                <button mat-raised-button color=\"primary\">\n                  <mat-icon>person_add</mat-icon>\n                  Add User\n                </button>\n                <button mat-button>View All Users</button>\n              </mat-card-actions>\n            </mat-card>\n          </div>\n        </mat-tab>\n        \n        <mat-tab label=\"System Settings\">\n          <div class=\"tab-content\">\n            <mat-card>\n              <mat-card-header>\n                <mat-card-title>System Configuration</mat-card-title>\n              </mat-card-header>\n              <mat-card-content>\n                <p>Interest Rate: 8.5% per annum</p>\n                <p>Late Fee: ‚Çπ500</p>\n                <p>Minimum Deposit: ‚Çπ1,000</p>\n              </mat-card-content>\n              <mat-card-actions>\n                <button mat-raised-button color=\"accent\">Update Settings</button>\n              </mat-card-actions>\n            </mat-card>\n          </div>\n        </mat-tab>\n      </mat-tab-group>\n    </div>\n  `,\n  styles: [`\n    .admin-container {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n\n    .tab-content {\n      padding: 20px;\n    }\n\n    mat-card-actions {\n      display: flex;\n      gap: 10px;\n    }\n  `]\n})\nexport class AdminComponent {}\n","size_bytes":2282},"src/app/components/backup/backup.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-backup',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatIconModule],\n  template: `\n    <div class=\"backup-container\">\n      <h1>Backup Management</h1>\n      \n      <mat-card class=\"backup-card\">\n        <mat-card-header>\n          <mat-card-title>Database Backup</mat-card-title>\n          <mat-card-subtitle>Create and manage system backups</mat-card-subtitle>\n        </mat-card-header>\n        \n        <mat-card-content>\n          <p>Last backup: {{ lastBackupDate | date:'full' }}</p>\n          <p>Backup size: 45.2 MB</p>\n          <p>Status: All systems operational</p>\n        </mat-card-content>\n        \n        <mat-card-actions>\n          <button mat-raised-button color=\"primary\" (click)=\"downloadBackup()\">\n            <mat-icon>download</mat-icon>\n            Download Backup\n          </button>\n          <button mat-raised-button color=\"accent\" (click)=\"createBackup()\">\n            <mat-icon>backup</mat-icon>\n            Create New Backup\n          </button>\n        </mat-card-actions>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .backup-container {\n      max-width: 600px;\n      margin: 0 auto;\n    }\n\n    .backup-card {\n      margin: 20px 0;\n    }\n\n    mat-card-actions {\n      display: flex;\n      gap: 10px;\n    }\n  `]\n})\nexport class BackupComponent {\n  lastBackupDate = new Date();\n\n  downloadBackup() {\n    alert('Backup download started...');\n  }\n\n  createBackup() {\n    alert('Creating new backup...');\n  }\n}\n","size_bytes":1774},"src/app/components/dashboard/dashboard.component.ts":{"content":"\r\nimport { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatGridListModule,\r\n    MatProgressBarModule,\r\n    MatChipsModule\r\n  ],\r\n  animations: [\r\n    trigger('fadeInStagger', [\r\n      transition('* => *', [\r\n        query(':enter', [\r\n          style({ opacity: 0, transform: 'translateY(30px)' }),\r\n          stagger(100, [\r\n            animate('600ms cubic-bezier(0.35, 0, 0.25, 1)',\r\n              style({ opacity: 1, transform: 'translateY(0)' }))\r\n          ])\r\n        ], { optional: true })\r\n      ])\r\n    ])\r\n  ],\r\n  template: `\r\n    <div class=\"dashboard-container p-6 space-y-8\" [@fadeInStagger]>\r\n      <!-- Welcome Header -->\r\n      <div class=\"relative overflow-hidden rounded-xl p-6 bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-lg\">\r\n        <div class=\"absolute inset-0 bg-black/5\"></div>\r\n        <div class=\"relative\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <div class=\"space-y-1\">\r\n              <h1 class=\"text-2xl font-bold\">Welcome to FinTCS Dashboard</h1>\r\n              <p class=\"text-base text-indigo-100\">Manage your financial data with elegance and efficiency</p>\r\n            </div>\r\n            <mat-icon class=\"text-4xl text-white/30\">dashboard</mat-icon>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Statistics Cards -->\r\n      <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <div *ngFor=\"let stat of statistics; let i = index\" \r\n             class=\"stat-card group relative overflow-hidden rounded-lg p-4 bg-white dark:bg-gray-800 shadow-md border border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-all duration-200 hover:-translate-y-1\">\r\n          \r\n          <!-- Gradient Background -->\r\n          <div class=\"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"\r\n               [class]=\"getGradientClass(i)\"></div>\r\n          \r\n          <!-- Content -->\r\n          <div class=\"relative\">\r\n            <div class=\"flex items-center justify-between mb-3\">\r\n              <div class=\"p-2 rounded-lg\" [class]=\"getIconBackgroundClass(i)\">\r\n                <mat-icon class=\"text-xl\" [class]=\"getIconColorClass(i)\">{{stat.icon}}</mat-icon>\r\n              </div>\r\n              <div class=\"text-right\">\r\n                <div class=\"text-xl font-bold group-hover:text-white transition-colors duration-200\" \r\n                     [class]=\"getTextColorClass()\">\r\n                  {{stat.value}}\r\n                </div>\r\n                <div class=\"text-xs font-medium group-hover:text-white/80 transition-colors duration-200\" \r\n                     [class]=\"getSecondaryTextColorClass()\">\r\n                  {{stat.change}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <h3 class=\"text-base font-semibold group-hover:text-white transition-colors duration-200\" \r\n                [class]=\"getTextColorClass()\">\r\n              {{stat.title}}\r\n            </h3>\r\n            <p class=\"text-sm group-hover:text-white/70 transition-colors duration-200\" \r\n               [class]=\"getSecondaryTextColorClass()\">\r\n              {{stat.description}}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Quick Actions -->\r\n      <div class=\"bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-xl border border-gray-200/50 dark:border-gray-700/50\">\r\n        <div class=\"flex items-center mb-6\">\r\n          <div class=\"p-3 rounded-full bg-gradient-to-r from-emerald-500 to-teal-600 mr-4\">\r\n            <mat-icon class=\"text-white text-2xl\">flash_on</mat-icon>\r\n          </div>\r\n          <h2 class=\"text-2xl font-bold text-gray-800 dark:text-white\">Quick Actions</h2>\r\n        </div>\r\n        \r\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n          <button *ngFor=\"let action of quickActions; let i = index\"\r\n                  mat-raised-button\r\n                  class=\"action-button p-6 py-20 rounded-2xl text-left transition-all duration-300 transform hover:scale-105\"\r\n                  [class]=\"getActionButtonClass(i)\">\r\n            <div class=\"flex items-center space-x-4\">\r\n              <mat-icon class=\"text-2xl\">{{action.icon}}</mat-icon>\r\n              <div>\r\n                <div class=\"font-semibold\">{{action.title}}</div>\r\n                <div class=\"text-sm opacity-80\">{{action.description}}</div>\r\n              </div>\r\n            </div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Recent Activity -->\r\n      <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <!-- Transactions -->\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-xl border border-gray-200/50 dark:border-gray-700/50\">\r\n          <div class=\"flex items-center justify-between mb-6\">\r\n            <div class=\"flex items-center\">\r\n              <div class=\"p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-600 mr-4\">\r\n                <mat-icon class=\"text-white text-2xl\">account_balance_wallet</mat-icon>\r\n              </div>\r\n              <h3 class=\"text-xl font-bold text-gray-800 dark:text-white\">Recent Transactions</h3>\r\n            </div>\r\n            <button mat-button class=\"text-blue-600 hover:text-blue-700\">View All</button>\r\n          </div>\r\n          \r\n          <div class=\"space-y-4\">\r\n            <div *ngFor=\"let transaction of recentTransactions\" \r\n                 class=\"flex items-center justify-between p-4 rounded-xl bg-gray-50 dark:bg-gray-700/50 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\">\r\n              <div class=\"flex items-center space-x-3\">\r\n                <div class=\"w-10 h-10 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center\">\r\n                  <mat-icon class=\"text-white text-sm\">{{transaction.icon}}</mat-icon>\r\n                </div>\r\n                <div>\r\n                  <div class=\"font-medium text-gray-800 dark:text-white\">{{transaction.description}}</div>\r\n                  <div class=\"text-sm text-gray-500 dark:text-gray-400\">{{transaction.date}}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"text-right\">\r\n                <div class=\"font-bold\" [class]=\"transaction.amount > 0 ? 'text-green-600' : 'text-red-600'\">\r\n                  {{transaction.amount > 0 ? '+' : ''}}‚Çπ{{Math.abs(transaction.amount).toLocaleString()}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- System Status -->\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-xl border border-gray-200/50 dark:border-gray-700/50\">\r\n          <div class=\"flex items-center mb-6\">\r\n            <div class=\"p-3 rounded-full bg-gradient-to-r from-green-500 to-emerald-600 mr-4\">\r\n              <mat-icon class=\"text-white text-2xl\">monitoring</mat-icon>\r\n            </div>\r\n            <h3 class=\"text-xl font-bold text-gray-800 dark:text-white\">System Status</h3>\r\n          </div>\r\n          \r\n          <div class=\"space-y-6\">\r\n            <div *ngFor=\"let status of systemStatus\" class=\"space-y-2\">\r\n              <div class=\"flex items-center justify-between\">\r\n                <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">{{status.name}}</span>\r\n                <span class=\"text-sm font-bold\" [class]=\"getStatusColor(status.value)\">{{status.value}}%</span>\r\n              </div>\r\n              <mat-progress-bar \r\n                [value]=\"status.value\" \r\n                [color]=\"getStatusColorName(status.value)\"\r\n                class=\"rounded-full overflow-hidden h-2\">\r\n              </mat-progress-bar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .dashboard-container {\r\n      animation: fadeIn 0.8s ease-out;\r\n    }\r\n\r\n    .stat-card::before {\r\n      content: '';\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      height: 4px;\r\n      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\r\n      opacity: 0;\r\n      transition: opacity 0.3s ease;\r\n    }\r\n\r\n    .stat-card:hover::before {\r\n      opacity: 1;\r\n    }\r\n    .mdc-button{\r\n      padding-top: 2rem !important;\r\n      padding-bottom: 2rem !important;\r\n    }\r\n\r\n    .action-button {\r\n      background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);\r\n      backdrop-filter: blur(10px);\r\n      border: 1px solid rgba(255,255,255,0.1);\r\n    }\r\n\r\n    @keyframes fadeIn {\r\n      from { opacity: 0; transform: translateY(20px); }\r\n      to { opacity: 1; transform: translateY(0); }\r\n    }\r\n\r\n    .custom-scrollbar::-webkit-scrollbar {\r\n      width: 6px;\r\n    }\r\n\r\n    .custom-scrollbar::-webkit-scrollbar-track {\r\n      background: rgba(0, 0, 0, 0.05);\r\n      border-radius: 10px;\r\n    }\r\n\r\n    .custom-scrollbar::-webkit-scrollbar-thumb {\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      border-radius: 10px;\r\n    }\r\n  `]\r\n})\r\nexport class DashboardComponent {\r\n  Math = Math;\r\n\r\n  statistics = [\r\n    {\r\n      title: 'Total Members',\r\n      value: '1,234',\r\n      change: '+12% this month',\r\n      icon: 'people',\r\n      description: 'Active members in system'\r\n    },\r\n    {\r\n      title: 'Total Deposits',\r\n      value: '‚Çπ45.2M',\r\n      change: '+8.5% this month',\r\n      icon: 'account_balance',\r\n      description: 'Total deposits amount'\r\n    },\r\n    {\r\n      title: 'Active Loans',\r\n      value: '156',\r\n      change: '+2.3% this month',\r\n      icon: 'money',\r\n      description: 'Currently active loans'\r\n    },\r\n    {\r\n      title: 'Interest Earned',\r\n      value: '‚Çπ2.1M',\r\n      change: '+15.2% this month',\r\n      icon: 'trending_up',\r\n      description: 'Total interest earned'\r\n    }\r\n  ];\r\n\r\n  quickActions = [\r\n    {\r\n      title: 'New Member',\r\n      description: 'Register new member',\r\n      icon: 'person_add'\r\n    },\r\n    {\r\n      title: 'New Deposit',\r\n      description: 'Create deposit receipt',\r\n      icon: 'add_circle'\r\n    },\r\n    {\r\n      title: 'Process Loan',\r\n      description: 'Process loan application',\r\n      icon: 'receipt_long'\r\n    },\r\n    {\r\n      title: 'Generate Report',\r\n      description: 'Create financial report',\r\n      icon: 'assessment'\r\n    },\r\n    {\r\n      title: 'Backup Data',\r\n      description: 'Backup system data',\r\n      icon: 'backup'\r\n    },\r\n    {\r\n      title: 'System Settings',\r\n      description: 'Configure system',\r\n      icon: 'settings'\r\n    }\r\n  ];\r\n\r\n  recentTransactions = [\r\n    {\r\n      description: 'Member Deposit',\r\n      date: 'Today, 2:30 PM',\r\n      amount: 50000,\r\n      icon: 'add'\r\n    },\r\n    {\r\n      description: 'Loan Disbursement',\r\n      date: 'Today, 11:15 AM',\r\n      amount: -25000,\r\n      icon: 'remove'\r\n    },\r\n    {\r\n      description: 'Interest Credit',\r\n      date: 'Yesterday, 4:45 PM',\r\n      amount: 3500,\r\n      icon: 'trending_up'\r\n    },\r\n    {\r\n      description: 'Withdrawal',\r\n      date: 'Yesterday, 10:20 AM',\r\n      amount: -15000,\r\n      icon: 'remove'\r\n    }\r\n  ];\r\n\r\n  systemStatus = [\r\n    { name: 'Database Health', value: 98 },\r\n    { name: 'System Performance', value: 94 },\r\n    { name: 'Security Score', value: 99 },\r\n    { name: 'Backup Status', value: 100 }\r\n  ];\r\n\r\n  getGradientClass(index: number): string {\r\n    const gradients = [\r\n      'bg-gradient-to-r from-indigo-500 to-purple-600',\r\n      'bg-gradient-to-r from-green-500 to-emerald-600',\r\n      'bg-gradient-to-r from-orange-500 to-red-600',\r\n      'bg-gradient-to-r from-blue-500 to-cyan-600'\r\n    ];\r\n    return gradients[index % gradients.length];\r\n  }\r\n\r\n  getIconBackgroundClass(index: number): string {\r\n    const backgrounds = [\r\n      'bg-indigo-100 dark:bg-indigo-900/30',\r\n      'bg-green-100 dark:bg-green-900/30',\r\n      'bg-orange-100 dark:bg-orange-900/30',\r\n      'bg-blue-100 dark:bg-blue-900/30'\r\n    ];\r\n    return backgrounds[index % backgrounds.length];\r\n  }\r\n\r\n  getIconColorClass(index: number): string {\r\n    const colors = [\r\n      'text-indigo-600 dark:text-indigo-400',\r\n      'text-green-600 dark:text-green-400',\r\n      'text-orange-600 dark:text-orange-400',\r\n      'text-blue-600 dark:text-blue-400'\r\n    ];\r\n    return colors[index % colors.length];\r\n  }\r\n\r\n  getTextColorClass(): string {\r\n    return 'text-gray-800 dark:text-white';\r\n  }\r\n\r\n  getSecondaryTextColorClass(): string {\r\n    return 'text-gray-500 dark:text-gray-400';\r\n  }\r\n\r\n  getActionButtonClass(index: number): string {\r\n    const classes = [\r\n      'bg-gradient-to-r from-indigo-500 to-purple-600 text-white hover:from-indigo-600 hover:to-purple-700',\r\n      'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700',\r\n      'bg-gradient-to-r from-orange-500 to-red-600 text-white hover:from-orange-600 hover:to-red-700',\r\n      'bg-gradient-to-r from-blue-500 to-cyan-600 text-white hover:from-blue-600 hover:to-cyan-700',\r\n      'bg-gradient-to-r from-purple-500 to-pink-600 text-white hover:from-purple-600 hover:to-pink-700',\r\n      'bg-gradient-to-r from-yellow-500 to-orange-600 text-white hover:from-yellow-600 hover:to-orange-700'\r\n    ];\r\n    return classes[index % classes.length];\r\n  }\r\n\r\n  getStatusColor(value: number): string {\r\n    if (value >= 95) return 'text-green-600';\r\n    if (value >= 80) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  }\r\n\r\n  getStatusColorName(value: number): 'primary' | 'accent' | 'warn' {\r\n    if (value >= 95) return 'primary';\r\n    if (value >= 80) return 'accent';\r\n    return 'warn';\r\n  }\r\n}\r\n","size_bytes":14196},"src/app/components/layout/main-layout.component.ts":{"content":"\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Router, NavigationEnd, Event } from '@angular/router';\r\nimport { MatSidenavModule, MatSidenav } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { filter } from 'rxjs/operators';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\ninterface MenuItem {\r\n  label: string;\r\n  icon: string;\r\n  route?: string;\r\n  children?: MenuItem[];\r\n  badge?: number;\r\n  divider?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-main-layout',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatSidenavModule,\r\n    MatDividerModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n    MatTooltipModule\r\n  ],\r\n  template: `\r\n    <div class=\"layout-container\">\r\n      <mat-sidenav-container class=\"sidenav-container\">\r\n        <!-- Professional Sidebar -->\r\n        <mat-sidenav #drawer\r\n                     [mode]=\"isMobile ? 'over' : 'side'\"\r\n                     [opened]=\"!isMobile\"\r\n                     class=\"sidebar-professional\">\r\n          \r\n          <!-- Sidebar Header -->\r\n          <div class=\"sidebar-header\">\r\n            <div class=\"flex items-center space-x-3 p-4\">\r\n              <div class=\"w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center\">\r\n                <mat-icon class=\"text-white text-xl\">account_balance</mat-icon>\r\n              </div>\r\n              <div class=\"flex-1\">\r\n                <h2 class=\"text-white font-bold text-lg\">FinTCS</h2>\r\n                <p class=\"text-white/70 text-xs\">Financial Management</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Navigation Menu -->\r\n          <nav class=\"sidebar-nav\">\r\n            <!-- Dashboard Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Dashboard</div>\r\n              <a routerLink=\"/dashboard\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>dashboard</mat-icon>\r\n                <span>Overview</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- File Management Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">File Management</div>\r\n              \r\n              <a routerLink=\"/file/society\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>business</mat-icon>\r\n                <span>Society</span>\r\n              </a>\r\n\r\n              <div class=\"nav-group\">\r\n                <div class=\"nav-group-header\">Security</div>\r\n                <a routerLink=\"/file/security/new-user\" \r\n                   routerLinkActive=\"active\" \r\n                   class=\"nav-item nav-item-sub\"\r\n                   (click)=\"closeMobileNav()\">\r\n                  <mat-icon>person_add</mat-icon>\r\n                  <span>New User</span>\r\n                </a>\r\n                <a routerLink=\"/file/security/authority\" \r\n                   routerLinkActive=\"active\" \r\n                   class=\"nav-item nav-item-sub\"\r\n                   (click)=\"closeMobileNav()\">\r\n                  <mat-icon>security</mat-icon>\r\n                  <span>Authority</span>\r\n                </a>\r\n                <a routerLink=\"/file/security/my-rights\" \r\n                   routerLinkActive=\"active\" \r\n                   class=\"nav-item nav-item-sub\"\r\n                   (click)=\"closeMobileNav()\">\r\n                  <mat-icon>verified_user</mat-icon>\r\n                  <span>My Rights</span>\r\n                </a>\r\n                <a routerLink=\"/file/security/change-password\" \r\n                   routerLinkActive=\"active\" \r\n                   class=\"nav-item nav-item-sub\"\r\n                   (click)=\"closeMobileNav()\">\r\n                  <mat-icon>lock</mat-icon>\r\n                  <span>Change Password</span>\r\n                </a>\r\n              </div>\r\n\r\n              <a routerLink=\"/file/create-new-year\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>event</mat-icon>\r\n                <span>Create New Year</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Master Data Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Master Data</div>\r\n              \r\n              <a routerLink=\"/master/member-details\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>people</mat-icon>\r\n                <span>Member Details</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/master/deposit-scheme\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>savings</mat-icon>\r\n                <span>Deposit Scheme</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/master/interest-master\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>percent</mat-icon>\r\n                <span>Interest Master</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/master/table\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>table_view</mat-icon>\r\n                <span>Table Master</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Transactions Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Transactions</div>\r\n              \r\n              <a routerLink=\"/transaction/deposit-receipt\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>receipt</mat-icon>\r\n                <span>Deposit Receipt</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/transaction/deposit-payment\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>payment</mat-icon>\r\n                <span>Deposit Payment</span>\r\n              </a>\r\n              \r\n              <a routerLink=\"/transaction/monthly-demand\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>payment</mat-icon>\r\n                <span>Demand</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/transaction/loan-taken\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>account_balance_wallet</mat-icon>\r\n                <span>Loan Taken</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/transaction/deposit-slip\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>description</mat-icon>\r\n                <span>Deposit Slip</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Accounts Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Accounts</div>\r\n              \r\n              <a routerLink=\"/accounts/voucher-creation\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>note</mat-icon>\r\n                <span>Voucher</span>\r\n              </a>\r\n              \r\n              <a routerLink=\"/accounts/loan-receipt\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>note</mat-icon>\r\n                <span>Loan Receipt</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/cash-book\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>book</mat-icon>\r\n                <span>Cash Book</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/ledger\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>account_book</mat-icon>\r\n                <span>Ledger</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/trial-balance\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>balance</mat-icon>\r\n                <span>Trial Balance</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/profit-loss\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>trending_up</mat-icon>\r\n                <span>Profit & Loss</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/balance-sheet\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>assessment</mat-icon>\r\n                <span>Balance Sheet</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Reports Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Reports</div>\r\n              \r\n              <a routerLink=\"/reports/employees\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>group</mat-icon>\r\n                <span>Employee Reports</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/reports/loan\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>money</mat-icon>\r\n                <span>Loan Reports</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/reports/opening-balance\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>start</mat-icon>\r\n                <span>Opening Balance</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/reports/closing-balance\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>stop</mat-icon>\r\n                <span>Closing Balance</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- System Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">System</div>\r\n              \r\n              <a routerLink=\"/backup\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>backup</mat-icon>\r\n                <span>Backup</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/admin\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>admin_panel_settings</mat-icon>\r\n                <span>Administration</span>\r\n              </a>\r\n            </div>\r\n          </nav>\r\n        </mat-sidenav>\r\n\r\n        <!-- Main Content Area -->\r\n        <mat-sidenav-content class=\"main-content\">\r\n          <!-- Professional Header -->\r\n          <mat-toolbar class=\"header-professional\">\r\n            <button mat-icon-button (click)=\"drawer.toggle()\" class=\"menu-button\">\r\n              <mat-icon>menu</mat-icon>\r\n            </button>\r\n\r\n            <!-- Breadcrumb -->\r\n            <div class=\"breadcrumb flex-1\">\r\n              <ng-container *ngFor=\"let breadcrumb of breadcrumbs; let last = last\">\r\n                <span [class.active]=\"last\">{{ breadcrumb.label }}</span>\r\n                <mat-icon *ngIf=\"!last\" class=\"separator text-sm\">chevron_right</mat-icon>\r\n              </ng-container>\r\n            </div>\r\n\r\n            <!-- Header Actions -->\r\n            <div class=\"flex items-center space-x-2\">\r\n              <!-- Dark Mode Toggle -->\r\n              <button mat-icon-button \r\n                      (click)=\"toggleDarkMode()\" \r\n                      matTooltip=\"Toggle Dark Mode\"\r\n                      class=\"header-action\">\r\n                <mat-icon>{{ isDarkMode ? 'light_mode' : 'dark_mode' }}</mat-icon>\r\n              </button>\r\n\r\n              <!-- Notifications -->\r\n              <button mat-icon-button \r\n                      [matMenuTriggerFor]=\"notificationMenu\"\r\n                      matTooltip=\"Notifications\"\r\n                      class=\"header-action\">\r\n                <mat-icon matBadge=\"3\" matBadgeColor=\"warn\">notifications</mat-icon>\r\n              </button>\r\n\r\n              <!-- User Menu -->\r\n              <button mat-icon-button \r\n                      [matMenuTriggerFor]=\"userMenu\"\r\n                      matTooltip=\"User Menu\"\r\n                      class=\"header-action\">\r\n                <mat-icon>account_circle</mat-icon>\r\n              </button>\r\n            </div>\r\n          </mat-toolbar>\r\n\r\n          <!-- Page Content -->\r\n          <div class=\"content-professional\">\r\n            <div class=\"content-wrapper\">\r\n              <router-outlet></router-outlet>\r\n            </div>\r\n          </div>\r\n        </mat-sidenav-content>\r\n      </mat-sidenav-container>\r\n    </div>\r\n\r\n    <!-- Notification Menu -->\r\n    <mat-menu #notificationMenu=\"matMenu\" class=\"notification-menu\">\r\n      <div class=\"menu-header\">\r\n        <span class=\"text-section-header font-semibold\">Notifications</span>\r\n        <button mat-button color=\"primary\" class=\"text-xs\">Mark all as read</button>\r\n      </div>\r\n      <mat-divider></mat-divider>\r\n      <button mat-menu-item>\r\n        <mat-icon>info</mat-icon>\r\n        <div class=\"ml-3\">\r\n          <div class=\"text-body font-medium\">New member registered</div>\r\n          <div class=\"text-caption text-gray-500\">2 minutes ago</div>\r\n        </div>\r\n      </button>\r\n      <button mat-menu-item>\r\n        <mat-icon>warning</mat-icon>\r\n        <div class=\"ml-3\">\r\n          <div class=\"text-body font-medium\">Loan payment overdue</div>\r\n          <div class=\"text-caption text-gray-500\">1 hour ago</div>\r\n        </div>\r\n      </button>\r\n      <button mat-menu-item>\r\n        <mat-icon>check_circle</mat-icon>\r\n        <div class=\"ml-3\">\r\n          <div class=\"text-body font-medium\">Backup completed successfully</div>\r\n          <div class=\"text-caption text-gray-500\">3 hours ago</div>\r\n        </div>\r\n      </button>\r\n      <mat-divider></mat-divider>\r\n      <button mat-menu-item class=\"text-center\">\r\n        <span class=\"text-primary\">View all notifications</span>\r\n      </button>\r\n    </mat-menu>\r\n\r\n    <!-- User Menu -->\r\n    <mat-menu #userMenu=\"matMenu\" class=\"user-menu\">\r\n      <div class=\"menu-header\">\r\n        <div class=\"flex items-center space-x-3 p-2\">\r\n          <div class=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\r\n            {{ currentUser?.name?.charAt(0) || 'U' }}\r\n          </div>\r\n          <div>\r\n            <div class=\"text-body font-semibold\">{{ currentUser?.name || 'User' }}</div>\r\n            <div class=\"text-caption text-gray-500\">{{ currentUser?.email || 'user@example.com' }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <mat-divider></mat-divider>\r\n      <button mat-menu-item routerLink=\"/profile\">\r\n        <mat-icon>person</mat-icon>\r\n        <span>My Profile</span>\r\n      </button>\r\n      <button mat-menu-item routerLink=\"/settings\">\r\n        <mat-icon>settings</mat-icon>\r\n        <span>Settings</span>\r\n      </button>\r\n      <mat-divider></mat-divider>\r\n      <button mat-menu-item (click)=\"logout()\">\r\n        <mat-icon>logout</mat-icon>\r\n        <span>Sign Out</span>\r\n      </button>\r\n    </mat-menu>\r\n  `,\r\n  styles: [`\r\n    .layout-container {\r\n      height: 100vh;\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n\r\n    .sidenav-container {\r\n      flex: 1;\r\n      background: var(--color-bg-secondary);\r\n    }\r\n\r\n    .sidebar-professional {\r\n      width: 280px;\r\n      border-right: 1px solid var(--color-border);\r\n      background: var(--gradient-sidebar);\r\n    }\r\n\r\n    .sidebar-header {\r\n      border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n      margin-bottom: var(--spacing-md);\r\n    }\r\n\r\n    .sidebar-nav {\r\n      padding: var(--spacing-md);\r\n    }\r\n\r\n    .nav-section {\r\n      margin-bottom: var(--spacing-lg);\r\n    }\r\n\r\n    .nav-section-header {\r\n      padding: var(--spacing-sm) var(--spacing-md);\r\n      color: rgba(255, 255, 255, 0.6);\r\n      font-size: 12px;\r\n      font-weight: 600;\r\n      text-transform: uppercase;\r\n      letter-spacing: 0.05em;\r\n      margin-bottom: var(--spacing-sm);\r\n    }\r\n\r\n    .nav-item {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--spacing-sm);\r\n      padding: 12px var(--spacing-md);\r\n      margin: 2px 0;\r\n      border-radius: var(--radius-md);\r\n      color: rgba(255, 255, 255, 0.8);\r\n      text-decoration: none;\r\n      transition: all 0.2s ease;\r\n      font-weight: 500;\r\n      font-size: 14px;\r\n      position: relative;\r\n    }\r\n\r\n    .nav-item:hover {\r\n      background: rgba(255, 255, 255, 0.1);\r\n      color: white;\r\n      transform: translateX(4px);\r\n    }\r\n\r\n    .nav-item.active {\r\n      background: rgba(255, 255, 255, 0.15);\r\n      color: white;\r\n      font-weight: 600;\r\n    }\r\n\r\n    .nav-item.active::before {\r\n      content: '';\r\n      position: absolute;\r\n      left: 0;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      width: 4px;\r\n      height: 20px;\r\n      background: white;\r\n      border-radius: 0 2px 2px 0;\r\n    }\r\n\r\n    .nav-group {\r\n      margin-left: var(--spacing-md);\r\n      border-left: 1px solid rgba(255, 255, 255, 0.1);\r\n      padding-left: var(--spacing-md);\r\n      margin-top: var(--spacing-sm);\r\n    }\r\n\r\n    .nav-group-header {\r\n      padding: var(--spacing-xs) var(--spacing-sm);\r\n      color: rgba(255, 255, 255, 0.5);\r\n      font-size: 11px;\r\n      font-weight: 600;\r\n      text-transform: uppercase;\r\n      letter-spacing: 0.05em;\r\n      margin-bottom: var(--spacing-xs);\r\n    }\r\n\r\n    .nav-item-sub {\r\n      font-size: 13px;\r\n      padding: 8px var(--spacing-sm);\r\n      margin: 1px 0;\r\n    }\r\n\r\n    .header-professional {\r\n      background: var(--color-bg-card);\r\n      color: var(--color-text-primary);\r\n      border-bottom: 1px solid var(--color-border);\r\n      height: 64px;\r\n      box-shadow: var(--shadow-sm);\r\n      position: sticky;\r\n      top: 0;\r\n      z-index: 10;\r\n    }\r\n\r\n    .menu-button {\r\n      margin-right: var(--spacing-md);\r\n    }\r\n\r\n    .breadcrumb {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--spacing-sm);\r\n      font-size: 14px;\r\n      color: var(--color-text-secondary);\r\n    }\r\n\r\n    .breadcrumb .separator {\r\n      color: var(--color-text-muted);\r\n    }\r\n\r\n    .breadcrumb .active {\r\n      color: var(--color-text-primary);\r\n      font-weight: 500;\r\n    }\r\n\r\n    .header-action {\r\n      width: 40px;\r\n      height: 40px;\r\n      transition: all 0.2s ease;\r\n    }\r\n\r\n    .header-action:hover {\r\n      background: var(--color-bg-secondary);\r\n      transform: scale(1.05);\r\n    }\r\n\r\n    .content-professional {\r\n      background: var(--color-bg-secondary);\r\n      min-height: calc(100vh - 64px);\r\n      padding: var(--spacing-lg);\r\n    }\r\n\r\n    .content-wrapper {\r\n      max-width: 1400px;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .menu-header {\r\n      padding: var(--spacing-md);\r\n      border-bottom: 1px solid var(--color-border-light);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: between;\r\n      background: var(--color-bg-secondary);\r\n    }\r\n\r\n    .notification-menu,\r\n    .user-menu {\r\n      min-width: 280px;\r\n      max-width: 320px;\r\n    }\r\n\r\n    .notification-menu .mat-mdc-menu-item,\r\n    .user-menu .mat-mdc-menu-item {\r\n      height: auto;\r\n      min-height: 48px;\r\n      padding: var(--spacing-sm) var(--spacing-md);\r\n      line-height: 1.4;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n      .sidebar-professional {\r\n        width: 100vw;\r\n        max-width: 280px;\r\n      }\r\n\r\n      .content-professional {\r\n        padding: var(--spacing-md);\r\n      }\r\n\r\n      .breadcrumb {\r\n        display: none;\r\n      }\r\n    }\r\n\r\n    @media (max-width: 640px) {\r\n      .content-professional {\r\n        padding: var(--spacing-sm);\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class MainLayoutComponent implements OnInit {\r\n  @ViewChild('drawer') drawer!: MatSidenav;\r\n\r\n  isMobile = false;\r\n  isDarkMode = false;\r\n  currentUser: any = null;\r\n  breadcrumbs: { label: string; route?: string }[] = [];\r\n\r\n  constructor(\r\n    private breakpointObserver: BreakpointObserver,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // Check if mobile\r\n    this.breakpointObserver.observe([Breakpoints.Handset])\r\n      .subscribe(result => {\r\n        this.isMobile = result.matches;\r\n      });\r\n\r\n    // Load dark mode preference\r\n    this.isDarkMode = localStorage.getItem('darkMode') === 'true';\r\n    this.updateDarkMode();\r\n\r\n    // Get current user\r\n    this.currentUser = this.authService.getCurrentUser();\r\n\r\n    // Listen to route changes for breadcrumbs\r\n    this.router.events\r\n      .pipe(\r\n        filter((event: Event): event is NavigationEnd => event instanceof NavigationEnd)\r\n      )\r\n      .subscribe((event: NavigationEnd) => {\r\n        this.updateBreadcrumbs(event.url);\r\n      });\r\n  }\r\n\r\n  toggleDarkMode() {\r\n    this.isDarkMode = !this.isDarkMode;\r\n    localStorage.setItem('darkMode', this.isDarkMode.toString());\r\n    this.updateDarkMode();\r\n  }\r\n\r\n  private updateDarkMode() {\r\n    if (this.isDarkMode) {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }\r\n\r\n  private updateBreadcrumbs(url: string) {\r\n    const segments = url.split('/').filter(segment => segment);\r\n    this.breadcrumbs = [{ label: 'Dashboard', route: '/dashboard' }];\r\n\r\n    let currentRoute = '';\r\n    segments.forEach((segment, index) => {\r\n      currentRoute += `/${segment}`;\r\n      const label = this.formatBreadcrumbLabel(segment);\r\n      this.breadcrumbs.push({ label, route: index === segments.length - 1 ? undefined : currentRoute });\r\n    });\r\n  }\r\n\r\n  private formatBreadcrumbLabel(segment: string): string {\r\n    return segment\r\n      .split('-')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  }\r\n\r\n  closeMobileNav() {\r\n    if (this.isMobile) {\r\n      this.drawer.close();\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n","size_bytes":23784},"src/app/components/login/login.component.ts":{"content":"import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatProgressSpinnerModule\n  ],\n  template: `\n    <div class=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-600 via-purple-600 to-blue-800\">\n      <div class=\"absolute inset-0 bg-black opacity-20\"></div>\n      \n      <div class=\"relative z-10 w-full max-w-md\">\n        <mat-card class=\"p-8 backdrop-blur-sm bg-white/10 border border-white/20 shadow-2xl\">\n          <mat-card-header class=\"text-center mb-8\">\n            <div class=\"mx-auto w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mb-4\">\n              <mat-icon class=\"text-white text-3xl\">account_balance</mat-icon>\n            </div>\n            <mat-card-title class=\"text-2xl font-bold text-white\">\n              Society Management System\n            </mat-card-title>\n            <mat-card-subtitle class=\"text-white/80 mt-2\">\n              Please sign in to your account\n            </mat-card-subtitle>\n          </mat-card-header>\n\n          <form (ngSubmit)=\"onLogin()\" #loginForm=\"ngForm\" class=\"space-y-6\">\n            <mat-form-field appearance=\"outline\" class=\"w-full\">\n              <mat-label>Username</mat-label>\n              <input matInput \n                     name=\"username\" \n                     [(ngModel)]=\"credentials.username\" \n                     required \n                     autocomplete=\"username\"\n                     [disabled]=\"isLoading\">\n              <mat-icon matPrefix class=\"text-white/60 mr-2\">person</mat-icon>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\" class=\"w-full\">\n              <mat-label>Password</mat-label>\n              <input matInput \n                     name=\"password\" \n                     type=\"password\" \n                     [(ngModel)]=\"credentials.password\" \n                     required \n                     autocomplete=\"current-password\"\n                     [disabled]=\"isLoading\">\n              <mat-icon matPrefix class=\"text-white/60 mr-2\">lock</mat-icon>\n            </mat-form-field>\n\n            <div *ngIf=\"errorMessage\" class=\"text-red-300 text-sm text-center bg-red-900/20 p-3 rounded-lg border border-red-500/30\">\n              {{errorMessage}}\n            </div>\n\n            <button mat-raised-button \n                    type=\"submit\" \n                    class=\"w-full h-12 bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 text-white font-semibold rounded-lg\"\n                    [disabled]=\"!loginForm.valid || isLoading\">\n              <span *ngIf=\"!isLoading\">Sign In</span>\n              <mat-spinner *ngIf=\"isLoading\" diameter=\"24\" class=\"mx-auto\"></mat-spinner>\n            </button>\n          </form>\n\n          <div class=\"mt-8 text-center\">\n            <p class=\"text-white/60 text-sm\">\n              Super Admin: admin / admin\n            </p>\n          </div>\n        </mat-card>\n      </div>\n    </div>\n  `,\n  styles: [`\n    ::ng-deep .mat-mdc-form-field {\n      --mdc-theme-primary: #6366f1;\n      --mdc-theme-on-surface: rgba(255, 255, 255, 0.87);\n    }\n    \n    ::ng-deep .mat-mdc-text-field-wrapper {\n      background-color: rgba(255, 255, 255, 0.1);\n      border-radius: 8px;\n    }\n    \n    ::ng-deep .mat-mdc-form-field-infix {\n      color: white;\n    }\n    \n    ::ng-deep .mat-mdc-floating-label {\n      color: rgba(255, 255, 255, 0.7);\n    }\n    \n    ::ng-deep .mat-mdc-form-field-required-marker {\n      color: rgba(255, 255, 255, 0.7);\n    }\n    \n    ::ng-deep .mdc-line-ripple::before,\n    ::ng-deep .mdc-line-ripple::after {\n      border-bottom-color: rgba(255, 255, 255, 0.5);\n    }\n  `]\n})\nexport class LoginComponent {\n  credentials = {\n    username: '',\n    password: ''\n  };\n  \n  isLoading = false;\n  errorMessage = '';\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  onLogin() {\n    this.isLoading = true;\n    this.errorMessage = '';\n\n    this.authService.login(this.credentials.username, this.credentials.password)\n      .subscribe({\n        next: (success) => {\n          this.isLoading = false;\n          if (success) {\n            this.router.navigate(['/dashboard']);\n          } else {\n            this.errorMessage = 'Invalid username or password';\n          }\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = 'Login failed. Please try again.';\n          console.error('Login error:', error);\n        }\n      });\n  }\n}","size_bytes":5247},"src/app/components/member-details/member-details.component.css":{"content":"\n/* Member Details Professional Styles */\n\n.member-details-container {\n  animation: fadeIn 0.6s ease-out;\n}\n\n/* Professional Filter Styling */\n.filter-field .mat-mdc-form-field-wrapper {\n  border-radius: 8px !important;\n  background: var(--color-bg-primary) !important;\n  transition: all 0.2s ease !important;\n}\n\n.filter-field .mat-mdc-form-field-outline {\n  border-radius: 8px !important;\n}\n\n.filter-field:hover .mat-mdc-form-field-wrapper {\n  box-shadow: var(--shadow-sm) !important;\n}\n\n/* Professional Status Badges */\n.status-chip {\n  font-weight: 500;\n  border-radius: 16px;\n  padding: 6px 12px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: center;\n  box-shadow: var(--shadow-sm);\n  transition: all 0.2s ease;\n}\n\n/* Professional Table Styling */\n.mat-mdc-table {\n  background: transparent !important;\n  font-family: 'Inter', system-ui, sans-serif !important;\n}\n\n.mat-mdc-row {\n  border-bottom: 1px solid var(--color-border-light) !important;\n  transition: all 0.2s ease !important;\n}\n\n.mat-mdc-row:hover {\n  background: var(--color-bg-secondary) !important;\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-sm) !important;\n}\n\n.mat-mdc-header-row {\n  background: var(--gradient-header) !important;\n  height: 56px !important;\n  box-shadow: var(--shadow-sm) !important;\n}\n\n.mat-mdc-header-cell {\n  color: white !important;\n  font-weight: 600 !important;\n  font-size: 14px !important;\n  border-bottom: none !important;\n  letter-spacing: 0.025em;\n  font-family: 'Inter', system-ui, sans-serif !important;\n}\n\n.mat-mdc-cell {\n  border-bottom-color: var(--color-border-light) !important;\n  font-size: 14px !important;\n  color: var(--color-text-primary) !important;\n  font-family: 'Inter', system-ui, sans-serif !important;\n}\n\n/* Professional Pagination */\n.mat-mdc-paginator {\n  background: transparent !important;\n  border: none !important;\n  font-family: 'Inter', system-ui, sans-serif !important;\n}\n\n.mat-mdc-paginator .mat-mdc-button {\n  color: var(--color-text-primary) !important;\n}\n\n/* Professional Animations */\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n.card-hover {\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-lg);\n}\n\n/* Professional Action Buttons */\n.action-button {\n  width: 32px !important;\n  height: 32px !important;\n  min-width: 32px !important;\n  border-radius: 6px !important;\n  transition: all 0.2s ease !important;\n}\n\n.action-button:hover {\n  transform: scale(1.1);\n}\n\n/* Professional Responsive Design */\n@media (max-width: 768px) {\n  .member-details-container {\n    padding: 12px;\n  }\n  \n  .grid {\n    grid-template-columns: 1fr;\n    gap: 12px;\n  }\n  \n  .text-page-title {\n    font-size: 18px;\n  }\n  \n  .text-section-header {\n    font-size: 15px;\n  }\n}\n\n/* Dark Theme Adjustments */\n.dark .filter-field .mat-mdc-form-field-wrapper {\n  background: var(--color-bg-primary) !important;\n  border-color: var(--color-border) !important;\n}\n\n.dark .mat-mdc-row {\n  border-bottom: 1px solid var(--color-border-light) !important;\n}\n\n.dark .mat-mdc-row:hover {\n  background: var(--color-bg-secondary) !important;\n}\n\n.dark .mat-mdc-cell {\n  border-bottom-color: var(--color-border-light) !important;\n  color: var(--color-text-primary) !important;\n}\n\n/* Professional Loading States */\n.loading-row {\n  background: var(--color-bg-secondary);\n  border-radius: 8px;\n  margin-bottom: 8px;\n  height: 56px;\n  animation: pulse 1.5s ease-in-out infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n/* Professional Form Validation */\n.mat-mdc-form-field.mat-form-field-invalid .mat-mdc-form-field-outline {\n  border-color: var(--color-danger) !important;\n}\n\n.mat-mdc-form-field.mat-form-field-invalid .mat-mdc-floating-label {\n  color: var(--color-danger) !important;\n}\n\n/* Professional Tooltips */\n.mat-mdc-tooltip {\n  font-family: 'Inter', system-ui, sans-serif !important;\n  font-size: 12px !important;\n  background: var(--color-bg-primary) !important;\n  color: var(--color-text-primary) !important;\n  border: 1px solid var(--color-border) !important;\n  box-shadow: var(--shadow-lg) !important;\n}\n","size_bytes":4248},"src/app/components/member-details-view/member-details-view.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatTabsModule } from '@angular/material/tabs';\n\ninterface Member {\n  id: number;\n  memberNo: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  role: string;\n  society: string;\n  joinDate: Date;\n  status: string;\n  address?: string;\n  city?: string;\n  state?: string;\n}\n\n@Component({\n  selector: 'app-member-details-view',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatChipsModule,\n    MatTabsModule\n  ],\n  template: `\n    <div class=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n      <div class=\"max-w-4xl mx-auto space-y-6\">\n        \n        <!-- Header -->\n        <div class=\"flex items-center justify-between\">\n          <button \n            (click)=\"goBack()\"\n            class=\"inline-flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors duration-200\"\n          >\n            <mat-icon class=\"mr-2\">arrow_back</mat-icon>\n            Back to Members\n          </button>\n        </div>\n\n        <!-- Member Profile Card -->\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden\">\n          <!-- Profile Header -->\n          <div class=\"bg-gradient-to-r from-blue-500 to-purple-600 px-6 py-8\">\n            <div class=\"flex items-center space-x-4\">\n              <div class=\"w-20 h-20 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n                <span class=\"text-2xl font-bold text-white\">\n                  {{member ? getInitials(member.firstName, member.lastName) : ''}}\n                </span>\n              </div>\n              <div class=\"text-white\">\n                <h1 class=\"text-3xl font-bold\">{{member?.firstName}} {{member?.lastName}}</h1>\n                <p class=\"text-blue-100\">{{member?.memberNo}} ‚Ä¢ {{member?.role}}</p>\n                <div class=\"mt-2\">\n                  <span class=\"inline-flex px-3 py-1 text-sm font-medium rounded-full\"\n                        [class]=\"member?.status === 'Active' ? 'bg-green-500 bg-opacity-20 text-green-100' : 'bg-red-500 bg-opacity-20 text-red-100'\">\n                    {{member?.status}}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Tabs Content -->\n          <mat-tab-group class=\"p-6\">\n            <!-- Basic Information Tab -->\n            <mat-tab label=\"Basic Information\">\n              <div class=\"py-6 space-y-6\">\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div class=\"space-y-4\">\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Member Number</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.memberNo}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Full Name</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.firstName}} {{member?.lastName}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Email</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.email}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Phone</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.phone}}</p>\n                    </div>\n                  </div>\n                  <div class=\"space-y-4\">\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Role</label>\n                      <span class=\"inline-flex px-3 py-1 text-sm font-medium rounded-full bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\">\n                        {{member?.role}}\n                      </span>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Society</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.society}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Join Date</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.joinDate | date:'fullDate'}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Status</label>\n                      <span class=\"inline-flex px-3 py-1 text-sm font-medium rounded-full\"\n                            [class]=\"member?.status === 'Active' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\">\n                        {{member?.status}}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </mat-tab>\n\n            <!-- Address Information Tab -->\n            <mat-tab label=\"Address Information\">\n              <div class=\"py-6 space-y-6\">\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div class=\"space-y-4\">\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Address</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.address || 'Not provided'}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">City</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.city || 'Not provided'}}</p>\n                    </div>\n                  </div>\n                  <div class=\"space-y-4\">\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">State</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.state || 'Not provided'}}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </mat-tab>\n\n            <!-- Activity Tab -->\n            <mat-tab label=\"Recent Activity\">\n              <div class=\"py-6\">\n                <div class=\"text-center py-12\">\n                  <mat-icon class=\"text-6xl text-gray-400 dark:text-gray-500 mb-4\">history</mat-icon>\n                  <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No Recent Activity</h3>\n                  <p class=\"text-gray-500 dark:text-gray-400\">Member activity will appear here when available.</p>\n                </div>\n              </div>\n            </mat-tab>\n          </mat-tab-group>\n        </div>\n\n        <!-- Action Buttons -->\n        <div class=\"flex justify-end space-x-3\">\n          <button \n            (click)=\"goBack()\"\n            class=\"px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition-colors duration-200\"\n          >\n            Back to List\n          </button>\n          <button \n            (click)=\"editMember()\"\n            class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200\"\n          >\n            <mat-icon class=\"mr-2\">edit</mat-icon>\n            Edit Member\n          </button>\n        </div>\n\n        <!-- Member Not Found -->\n        <div *ngIf=\"!member && !loading\" class=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-12 text-center\">\n          <mat-icon class=\"text-6xl text-gray-400 dark:text-gray-500 mb-4\">person_off</mat-icon>\n          <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Member Not Found</h3>\n          <p class=\"text-gray-500 dark:text-gray-400 mb-4\">The member you're looking for doesn't exist or has been removed.</p>\n          <button \n            (click)=\"goBack()\"\n            class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200\"\n          >\n            Back to Members\n          </button>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: block;\n    }\n  `]\n})\nexport class MemberDetailsViewComponent implements OnInit {\n  member: Member | null = null;\n  loading = true;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    const memberId = this.route.snapshot.paramMap.get('id');\n    if (memberId) {\n      this.loadMember(parseInt(memberId));\n    }\n  }\n\n  loadMember(id: number) {\n    // In a real application, you would fetch this from a service\n    // For now, using sample data\n    const sampleMembers: Member[] = [\n      {\n        id: 1,\n        memberNo: 'MEM1001',\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john.doe@email.com',\n        phone: '9876543210',\n        role: 'Member',\n        society: 'Main Branch',\n        joinDate: new Date('2024-01-15'),\n        status: 'Active',\n        address: '123 Main Street',\n        city: 'Mumbai',\n        state: 'Maharashtra'\n      },\n      {\n        id: 2,\n        memberNo: 'MEM1002',\n        firstName: 'Jane',\n        lastName: 'Smith',\n        email: 'jane.smith@email.com',\n        phone: '9876543211',\n        role: 'Executive',\n        society: 'North Branch',\n        joinDate: new Date('2024-02-20'),\n        status: 'Active',\n        address: '456 Oak Avenue',\n        city: 'Delhi',\n        state: 'Delhi'\n      },\n      {\n        id: 3,\n        memberNo: 'MEM1003',\n        firstName: 'Mike',\n        lastName: 'Johnson',\n        email: 'mike.johnson@email.com',\n        phone: '9876543212',\n        role: 'Board Member',\n        society: 'South Branch',\n        joinDate: new Date('2023-12-10'),\n        status: 'Inactive',\n        address: '789 Pine Road',\n        city: 'Bangalore',\n        state: 'Karnataka'\n      }\n    ];\n\n    this.member = sampleMembers.find(m => m.id === id) || null;\n    this.loading = false;\n  }\n\n  getInitials(firstName: string, lastName: string): string {\n    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();\n  }\n\n  goBack() {\n    this.router.navigate(['/master/member-details']);\n  }\n\n  editMember() {\n    // Navigate back to member list with edit mode\n    this.router.navigate(['/master/member-details'], { \n      queryParams: { edit: this.member?.id } \n    });\n  }\n}\n","size_bytes":11347},"src/app/components/new-year/new-year.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule, FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-new-year',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatFormFieldModule, MatInputModule, ReactiveFormsModule],\n  template: `\n    <div class=\"page-container\">\n      <h1>Start New Financial Year</h1>\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Financial Year Configuration</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <form [formGroup]=\"yearForm\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Financial Year</mat-label>\n              <input matInput formControlName=\"year\" placeholder=\"2024-2025\">\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Start Date</mat-label>\n              <input matInput type=\"date\" formControlName=\"startDate\">\n            </mat-form-field>\n          </form>\n        </mat-card-content>\n        <mat-card-actions>\n          <button mat-raised-button color=\"primary\">Start New Financial Year</button>\n        </mat-card-actions>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container { max-width: 600px; margin: 0 auto; }\n    mat-form-field { width: 100%; margin: 10px 0; }\n  `]\n})\nexport class NewYearComponent {\n  yearForm: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n    this.yearForm = this.fb.group({\n      year: ['2024-2025'],\n      startDate: ['2024-04-01']\n    });\n  }\n}\n","size_bytes":1852},"src/app/components/statement/statement.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-statement',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `\n    <div class=\"page-container\">\n      <h1>Account Statements</h1>\n      <mat-card>\n        <mat-card-content>\n          <p>Account statement generation and management functionality will be implemented here.</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container { max-width: 800px; margin: 0 auto; }\n  `]\n})\nexport class StatementComponent {}\n","size_bytes":655},"src/app/components/unauthorized/unauthorized.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-unauthorized',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatIconModule],\n  template: `\n    <div class=\"unauthorized-container\">\n      <mat-card class=\"unauthorized-card\">\n        <mat-card-content>\n          <div class=\"content\">\n            <mat-icon class=\"warning-icon\">warning</mat-icon>\n            <h1>Access Denied</h1>\n            <p>You don't have permission to access this page.</p>\n            <p>Please contact your administrator if you believe this is an error.</p>\n            <button mat-raised-button color=\"primary\" (click)=\"goToDashboard()\">\n              Go to Dashboard\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .unauthorized-container {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      background-color: #f5f5f5;\n    }\n\n    .unauthorized-card {\n      max-width: 400px;\n      text-align: center;\n    }\n\n    .content {\n      padding: 20px;\n    }\n\n    .warning-icon {\n      font-size: 64px;\n      color: #ff9800;\n      margin-bottom: 16px;\n    }\n\n    h1 {\n      color: #333;\n      margin-bottom: 16px;\n    }\n\n    p {\n      color: #666;\n      margin-bottom: 16px;\n    }\n  `]\n})\nexport class UnauthorizedComponent {\n  constructor(private router: Router) {}\n\n  goToDashboard() {\n    this.router.navigate(['/dashboard']);\n  }\n}\n","size_bytes":1752},"src/app/components/user-management/user-management.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { Router } from '@angular/router';\nimport { AuthService, UserRole } from '../../services/auth.service';\n\ninterface User {\n  id: number;\n  username: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  role: UserRole;\n  society: string;\n  active: boolean;\n  createdDate: Date;\n  lastLogin?: Date;\n}\n\n@Component({\n  selector: 'app-user-management',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatSnackBarModule,\n    MatSlideToggleModule,\n    MatTooltipModule\n  ],\n  template: `\n    <div class=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6\">\n      <div class=\"max-w-7xl mx-auto\">\n        <!-- Header -->\n        <div class=\"mb-6\">\n          <div class=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h1 class=\"text-2xl font-bold text-gray-900 dark:text-white\">User Management</h1>\n              <p class=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                Manage all system users and their roles\n              </p>\n            </div>\n            <div class=\"mt-4 sm:mt-0\">\n              <button\n                (click)=\"openUserDialog()\"\n                class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                <mat-icon class=\"mr-2\">add</mat-icon>\n                Add User\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Filters Card -->\n        <div class=\"bg-white dark:bg-gray-800 shadow rounded-lg mb-6\">\n          <div class=\"p-6\">\n            <div class=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4\">\n              <!-- Search -->\n              <div class=\"lg:col-span-2\">\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Search\n                </label>\n                <div class=\"relative\">\n                  <mat-icon class=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">search</mat-icon>\n                  <input\n                    type=\"text\"\n                    [(ngModel)]=\"searchTerm\"\n                    (input)=\"applyFilters()\"\n                    placeholder=\"Search by name, username, email...\"\n                    class=\"pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  />\n                </div>\n              </div>\n\n              <!-- Role Filter -->\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Role\n                </label>\n                <select\n                  [(ngModel)]=\"selectedRole\"\n                  (change)=\"applyFilters()\"\n                  class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                >\n                  <option value=\"\">All Roles</option>\n                  <option [value]=\"UserRole.SUPER_ADMIN\">Super Admin</option>\n                  <option [value]=\"UserRole.SOCIETY_ADMIN\">Society Admin</option>\n                  <option [value]=\"UserRole.BRANCH_ADMIN\">Branch Admin</option>\n                  <option [value]=\"UserRole.ACCOUNTANT\">Accountant</option>\n                  <option [value]=\"UserRole.OPERATOR\">Operator</option>\n                  <option [value]=\"UserRole.MEMBER\">Member</option>\n                </select>\n              </div>\n\n              <!-- Status Filter -->\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Status\n                </label>\n                <select\n                  [(ngModel)]=\"selectedStatus\"\n                  (change)=\"applyFilters()\"\n                  class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                >\n                  <option value=\"\">All Status</option>\n                  <option value=\"active\">Active</option>\n                  <option value=\"inactive\">Inactive</option>\n                </select>\n              </div>\n            </div>\n\n            <div class=\"mt-4\">\n              <button\n                (click)=\"clearFilters()\"\n                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600\"\n              >\n                <mat-icon class=\"mr-2\">clear</mat-icon>\n                Clear Filters\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Users Table -->\n        <div class=\"bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden\">\n          <div class=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n            <h3 class=\"text-lg leading-6 font-medium text-gray-900 dark:text-white\">\n              System Users ({{filteredUsers.length}})\n            </h3>\n          </div>\n          \n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                <tr>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    User\n                  </th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Contact\n                  </th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Role & Society\n                  </th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Last Login\n                  </th>\n                  <th class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody class=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                <tr *ngFor=\"let user of filteredUsers\" class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex items-center\">\n                      <div class=\"flex-shrink-0 h-10 w-10\">\n                        <div class=\"h-10 w-10 rounded-full bg-purple-500 flex items-center justify-center\">\n                          <span class=\"text-sm font-medium text-white\">\n                            {{getInitials(user.firstName, user.lastName)}}\n                          </span>\n                        </div>\n                      </div>\n                      <div class=\"ml-4\">\n                        <div class=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {{user.firstName}} {{user.lastName}}\n                        </div>\n                        <div class=\"text-sm text-gray-500 dark:text-gray-400\">\n                          {{ '@' + user.username }}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"text-sm text-gray-900 dark:text-white\">{{user.email}}</div>\n                    <div class=\"text-sm text-gray-500 dark:text-gray-400\">{{user.phone}}</div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <span class=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full\" [class]=\"getRoleBadgeClass(user.role)\">\n                      {{getRoleDisplayName(user.role)}}\n                    </span>\n                    <div class=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">{{user.society}}</div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <span class=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full\"\n                          [class]=\"user.active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\">\n                      {{user.active ? 'Active' : 'Inactive'}}\n                    </span>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                    {{user.lastLogin ? (user.lastLogin | date:'shortDate') : 'Never'}}\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <div class=\"flex items-center justify-end space-x-2\">\n                      <button\n                        (click)=\"openUserDialog(user)\"\n                        [disabled]=\"!canEditUser(user)\"\n                        class=\"text-yellow-600 hover:text-yellow-900 dark:text-yellow-400 dark:hover:text-yellow-300 disabled:opacity-50\"\n                        matTooltip=\"Edit User\"\n                      >\n                        <mat-icon class=\"w-5 h-5\">edit</mat-icon>\n                      </button>\n                      <button\n                        (click)=\"deleteUser(user)\"\n                        [disabled]=\"!canDeleteUser(user)\"\n                        class=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50\"\n                        matTooltip=\"Delete User\"\n                      >\n                        <mat-icon class=\"w-5 h-5\">delete</mat-icon>\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            \n            <!-- Empty State -->\n            <div *ngIf=\"filteredUsers.length === 0\" class=\"text-center py-12\">\n              <mat-icon class=\"text-6xl text-gray-400 dark:text-gray-500 mb-4\">manage_accounts</mat-icon>\n              <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No users found</h3>\n              <p class=\"text-gray-500 dark:text-gray-400 mb-6\">No users match your current filters.</p>\n              <button\n                (click)=\"clearFilters()\"\n                class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-blue-600 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                Clear filters\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Off-canvas User Form -->\n    <div *ngIf=\"showUserForm\" class=\"fixed inset-0 z-50 overflow-hidden\" (click)=\"closeUserForm()\">\n      <div class=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n      <div class=\"fixed right-0 top-0 h-full w-full max-w-md sm:max-w-lg bg-white dark:bg-gray-800 shadow-xl\" (click)=\"$event.stopPropagation()\">\n        <div class=\"flex flex-col h-full\">\n          <!-- Header -->\n          <div class=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n            <div class=\"flex items-center justify-between\">\n              <h2 class=\"text-lg font-medium text-gray-900 dark:text-white\">\n                {{editingUser ? 'Edit User' : 'Add New User'}}\n              </h2>\n              <button\n                (click)=\"closeUserForm()\"\n                class=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n              >\n                <mat-icon>close</mat-icon>\n              </button>\n            </div>\n          </div>\n\n          <!-- Form Content - Scrollable -->\n          <div class=\"flex-1 overflow-y-auto px-6 py-4\">\n            <form [formGroup]=\"userForm\" (ngSubmit)=\"saveUser()\">\n              <div class=\"space-y-6\">\n                <!-- Username -->\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Username *\n                  </label>\n                  <input\n                    type=\"text\"\n                    formControlName=\"username\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    [class.border-red-500]=\"userForm.get('username')?.invalid && userForm.get('username')?.touched\"\n                  />\n                  <div *ngIf=\"userForm.get('username')?.invalid && userForm.get('username')?.touched\" class=\"mt-1 text-sm text-red-600\">\n                    Username is required\n                  </div>\n                </div>\n\n                <!-- Name Row -->\n                <div class=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      First Name *\n                    </label>\n                    <input\n                      type=\"text\"\n                      formControlName=\"firstName\"\n                      class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      [class.border-red-500]=\"userForm.get('firstName')?.invalid && userForm.get('firstName')?.touched\"\n                    />\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Last Name *\n                    </label>\n                    <input\n                      type=\"text\"\n                      formControlName=\"lastName\"\n                      class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      [class.border-red-500]=\"userForm.get('lastName')?.invalid && userForm.get('lastName')?.touched\"\n                    />\n                  </div>\n                </div>\n\n                <!-- Email -->\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Email *\n                  </label>\n                  <input\n                    type=\"email\"\n                    formControlName=\"email\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    [class.border-red-500]=\"userForm.get('email')?.invalid && userForm.get('email')?.touched\"\n                  />\n                </div>\n\n                <!-- Phone -->\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Phone *\n                  </label>\n                  <input\n                    type=\"tel\"\n                    formControlName=\"phone\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    [class.border-red-500]=\"userForm.get('phone')?.invalid && userForm.get('phone')?.touched\"\n                  />\n                </div>\n\n                <!-- Password (only for new users) -->\n                <div *ngIf=\"!editingUser\">\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Password *\n                  </label>\n                  <input\n                    type=\"password\"\n                    formControlName=\"password\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    [class.border-red-500]=\"userForm.get('password')?.invalid && userForm.get('password')?.touched\"\n                  />\n                  <div *ngIf=\"userForm.get('password')?.invalid && userForm.get('password')?.touched\" class=\"mt-1 text-sm text-red-600\">\n                    Password is required (minimum 6 characters)\n                  </div>\n                </div>\n\n                <!-- Role and Society -->\n                <div class=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Role *\n                    </label>\n                    <select\n                      formControlName=\"role\"\n                      class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      [class.border-red-500]=\"userForm.get('role')?.invalid && userForm.get('role')?.touched\"\n                    >\n                      <option value=\"\">Select Role</option>\n                      <option [value]=\"UserRole.SUPER_ADMIN\">Super Admin</option>\n                      <option [value]=\"UserRole.SOCIETY_ADMIN\">Society Admin</option>\n                      <option [value]=\"UserRole.BRANCH_ADMIN\">Branch Admin</option>\n                      <option [value]=\"UserRole.ACCOUNTANT\">Accountant</option>\n                      <option [value]=\"UserRole.OPERATOR\">Operator</option>\n                      <option [value]=\"UserRole.MEMBER\">Member</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Society *\n                    </label>\n                    <select\n                      formControlName=\"society\"\n                      class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      [class.border-red-500]=\"userForm.get('society')?.invalid && userForm.get('society')?.touched\"\n                    >\n                      <option value=\"\">Select Society</option>\n                      <option value=\"Main Branch\">Main Branch</option>\n                      <option value=\"North Branch\">North Branch</option>\n                      <option value=\"South Branch\">South Branch</option>\n                    </select>\n                  </div>\n                </div>\n\n                <!-- Active Status -->\n                <div class=\"flex items-center justify-between\">\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Active Status\n                    </label>\n                    <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                      Enable or disable user access\n                    </p>\n                  </div>\n                  <mat-slide-toggle formControlName=\"active\" color=\"primary\">\n                  </mat-slide-toggle>\n                </div>\n              </div>\n            </form>\n          </div>\n\n          <!-- Footer Actions -->\n          <div class=\"px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              (click)=\"closeUserForm()\"\n              class=\"px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"button\"\n              (click)=\"saveUser()\"\n              [disabled]=\"userForm.invalid\"\n              class=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {{editingUser ? 'Update User' : 'Create User'}}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: block;\n    }\n  `]\n})\nexport class UserManagementComponent implements OnInit {\n  userForm: FormGroup;\n  users: User[] = [];\n  filteredUsers: User[] = [];\n  editingUser: User | null = null;\n  showUserForm = false;\n  \n  // Filter properties\n  searchTerm = '';\n  selectedRole = '';\n  selectedStatus = '';\n  \n  currentUser: any = null;\n  UserRole = UserRole;\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.userForm = this.createForm();\n  }\n\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n    this.loadSampleData();\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      username: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required, Validators.pattern(/^\\d{10}$/)]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      role: ['', Validators.required],\n      society: ['', Validators.required],\n      active: [true]\n    });\n  }\n\n  loadSampleData() {\n    this.users = [\n      {\n        id: 1,\n        username: 'superadmin',\n        firstName: 'Super',\n        lastName: 'Admin',\n        email: 'super@admin.com',\n        phone: '9876543210',\n        role: UserRole.SUPER_ADMIN,\n        society: 'Head Office',\n        active: true,\n        createdDate: new Date('2024-01-01'),\n        lastLogin: new Date('2024-01-15')\n      },\n      {\n        id: 2,\n        username: 'societyadmin',\n        firstName: 'Society',\n        lastName: 'Admin',\n        email: 'society@admin.com',\n        phone: '9876543211',\n        role: UserRole.SOCIETY_ADMIN,\n        society: 'Main Branch',\n        active: true,\n        createdDate: new Date('2024-01-05'),\n        lastLogin: new Date('2024-01-14')\n      },\n      {\n        id: 3,\n        username: 'accountant1',\n        firstName: 'John',\n        lastName: 'Accountant',\n        email: 'john.accountant@company.com',\n        phone: '9876543212',\n        role: UserRole.ACCOUNTANT,\n        society: 'Main Branch',\n        active: true,\n        createdDate: new Date('2024-01-10'),\n        lastLogin: new Date('2024-01-13')\n      },\n      {\n        id: 4,\n        username: 'member1',\n        firstName: 'Jane',\n        lastName: 'Member',\n        email: 'jane.member@company.com',\n        phone: '9876543213',\n        role: UserRole.MEMBER,\n        society: 'North Branch',\n        active: false,\n        createdDate: new Date('2024-01-12')\n      }\n    ];\n    this.filteredUsers = [...this.users];\n  }\n\n  applyFilters() {\n    this.filteredUsers = this.users.filter(user => {\n      const searchMatch = !this.searchTerm || \n        user.firstName.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n        user.lastName.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n        user.username.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n        user.email.toLowerCase().includes(this.searchTerm.toLowerCase());\n      \n      const roleMatch = !this.selectedRole || user.role === this.selectedRole;\n      const statusMatch = !this.selectedStatus || \n        (this.selectedStatus === 'active' && user.active) ||\n        (this.selectedStatus === 'inactive' && !user.active);\n      \n      return searchMatch && roleMatch && statusMatch;\n    });\n  }\n\n  clearFilters() {\n    this.searchTerm = '';\n    this.selectedRole = '';\n    this.selectedStatus = '';\n    this.filteredUsers = [...this.users];\n  }\n\n  getInitials(firstName: string, lastName: string): string {\n    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();\n  }\n\n  getRoleDisplayName(role: UserRole): string {\n    const roleNames: { [key in UserRole]: string } = {\n      [UserRole.SUPER_ADMIN]: 'Super Admin',\n      [UserRole.SOCIETY_ADMIN]: 'Society Admin',\n      [UserRole.BRANCH_ADMIN]: 'Branch Admin',\n      [UserRole.ACCOUNTANT]: 'Accountant',\n      [UserRole.OPERATOR]: 'Operator',\n      [UserRole.MEMBER]: 'Member'\n    };\n    return roleNames[role] || role;\n  }\n\n  getRoleBadgeClass(role: UserRole): string {\n    const classes: { [key in UserRole]: string } = {\n      [UserRole.SUPER_ADMIN]: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',\n      [UserRole.SOCIETY_ADMIN]: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n      [UserRole.BRANCH_ADMIN]: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\n      [UserRole.ACCOUNTANT]: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      [UserRole.OPERATOR]: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      [UserRole.MEMBER]: 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n    };\n    return classes[role] || 'bg-gray-100 text-gray-800';\n  }\n\n  openUserDialog(user?: User) {\n    if (user) {\n      this.editingUser = user;\n      this.userForm.patchValue(user);\n      // Remove password validation for edit mode\n      this.userForm.get('password')?.clearValidators();\n      this.userForm.get('password')?.updateValueAndValidity();\n    } else {\n      this.editingUser = null;\n      this.userForm.reset();\n      this.userForm.patchValue({ active: true });\n      // Add password validation for new user\n      this.userForm.get('password')?.setValidators([Validators.required, Validators.minLength(6)]);\n      this.userForm.get('password')?.updateValueAndValidity();\n    }\n    this.showUserForm = true;\n  }\n\n  closeUserForm() {\n    this.showUserForm = false;\n    this.editingUser = null;\n    this.userForm.reset();\n  }\n\n  saveUser() {\n    if (this.userForm.valid) {\n      const formValue = this.userForm.value;\n      \n      if (this.editingUser) {\n        // Update existing user\n        const index = this.users.findIndex(u => u.id === this.editingUser!.id);\n        this.users[index] = { \n          ...this.editingUser, \n          ...formValue\n        };\n        this.snackBar.open('User updated successfully', 'Close', { duration: 3000 });\n      } else {\n        // Add new user\n        const newUser: User = {\n          id: Date.now(),\n          ...formValue,\n          createdDate: new Date()\n        };\n        this.users.push(newUser);\n        this.snackBar.open('User created successfully', 'Close', { duration: 3000 });\n      }\n      \n      this.applyFilters();\n      this.closeUserForm();\n    } else {\n      this.snackBar.open('Please fill all required fields correctly', 'Close', { duration: 3000 });\n    }\n  }\n\n  canEditUser(user: User): boolean {\n    // Super Admin can edit all users\n    if (this.currentUser?.role === UserRole.SUPER_ADMIN) {\n      return true;\n    }\n    // Users can't edit other users with higher or same privileges\n    return false;\n  }\n\n  canDeleteUser(user: User): boolean {\n    // Only Super Admin can delete users, and not themselves\n    return this.currentUser?.role === UserRole.SUPER_ADMIN && user.id !== this.currentUser?.id;\n  }\n\n  deleteUser(user: User) {\n    if (confirm(`Are you sure you want to delete user \"${user.username}\"?`)) {\n      this.users = this.users.filter(u => u.id !== user.id);\n      this.applyFilters();\n      this.snackBar.open('User deleted successfully', 'Close', { duration: 3000 });\n    }\n  }\n}\n","size_bytes":28981},"attached_assets/extracted_frontend/fintcs/src/app/app.component.css":{"content":"\n.app-container {\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n}\n\n/* Ensure consistent theming */\n.app-container {\n  background: var(--color-bg-secondary);\n  color: var(--color-text-primary);\n}\n","size_bytes":202},"attached_assets/extracted_frontend/fintcs/src/app/app.component.spec.ts":{"content":"import { TestBed } from '@angular/core/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('AppComponent', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [AppComponent],\n    }).compileComponents();\n  });\n\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it(`should have the 'my-angular-project' title`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('my-angular-project');\n  });\n\n  it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement as HTMLElement;\n    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, my-angular-project');\n  });\n});\n","size_bytes":952},"attached_assets/extracted_frontend/fintcs/src/app/app.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    CommonModule\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title = 'Financial Management System';\n}\n","size_bytes":398},"attached_assets/extracted_frontend/fintcs/src/app/app.config.server.ts":{"content":"import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';\nimport { provideServerRendering } from '@angular/platform-server';\nimport { appConfig } from './app.config';\n\nconst serverConfig: ApplicationConfig = {\n  providers: [\n    provideServerRendering()\n  ]\n};\n\nexport const config = mergeApplicationConfig(appConfig, serverConfig);\n","size_bytes":350},"attached_assets/extracted_frontend/fintcs/src/app/app.config.ts":{"content":"import { ApplicationConfig, importProvidersFrom, provideZoneChangeDetection } from '@angular/core';\r\nimport { provideRouter } from '@angular/router';\r\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\r\n\r\nimport { routes } from './app.routes';\r\nimport { provideClientHydration } from '@angular/platform-browser';\r\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideClientHydration(),\r\n    provideAnimationsAsync(),\r\n    importProvidersFrom(BrowserAnimationsModule),\r\n    provideHttpClient(withInterceptorsFromDi())\r\n  ]\r\n};","size_bytes":834},"attached_assets/extracted_frontend/fintcs/src/app/app.routes.ts":{"content":"import { Routes } from '@angular/router';\nimport { AuthGuard } from './guards/auth.guard';\nimport { RoleGuard } from './guards/role.guard';\nimport { MainLayoutComponent } from './components/layout/main-layout.component';\n\nexport const routes: Routes = [\n  // Login route (no layout)\n  {\n    path: 'login',\n    loadComponent: () => import('./components/auth/login/login.component').then(m => m.LoginComponent)\n  },\n\n  // All other routes use MainLayoutComponent wrapper\n  {\n    path: '',\n    component: MainLayoutComponent,\n    canActivate: [AuthGuard],\n    children: [\n      { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\n      // Dashboard\n      {\n        path: 'dashboard',\n        loadComponent: () => import('./components/dashboard/dashboard.component').then(m => m.DashboardComponent)\n      },\n\n      // User Management (Super Admin only)\n      {\n        path: 'user-management',\n        loadComponent: () => import('./components/user-management/user-management.component').then(m => m.UserManagementComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin'] }\n      },\n\n      // File Management\n      {\n        path: 'file/society',\n        loadComponent: () => import('./components/file/society/society.component').then(m => m.SocietyComponent)\n      },\n      {\n        path: 'file/create-new-year',\n        loadComponent: () => import('./components/file/create-new-year/create-new-year.component').then(m => m.CreateNewYearComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin', 'society_admin'] }\n      },\n      {\n        path: 'file/edit-opening-balance',\n        loadComponent: () => import('./components/file/edit-opening-balance/edit-opening-balance.component').then(m => m.EditOpeningBalanceComponent)\n      },\n\n      // Security\n      {\n        path: 'file/security/authority',\n        loadComponent: () => import('./components/file/security/authority/authority.component').then(m => m.AuthorityComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin'] }\n      },\n      {\n        path: 'file/security/new-user',\n        loadComponent: () => import('./components/file/security/new-user/new-user.component').then(m => m.NewUserComponent)\n      },\n      {\n        path: 'file/security/retrieve-password',\n        loadComponent: () => import('./components/file/security/retrieve-password/retrieve-password.component').then(m => m.RetrievePasswordComponent)\n      },\n      {\n        path: 'file/security/change-password',\n        loadComponent: () => import('./components/file/security/change-password/change-password.component').then(m => m.ChangePasswordComponent)\n      },\n      {\n        path: 'file/security/admin-handover',\n        loadComponent: () => import('./components/file/security/admin-handover/admin-handover.component').then(m => m.AdminHandoverComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin'] }\n      },\n\n      // Master Data\n      {\n        path: 'master/member-details',\n        loadComponent: () => import('./components/master/member-details/member-details.component').then(m => m.MemberDetailsComponent)\n      },\n      {\n        path: 'master/table',\n        loadComponent: () => import('./components/master/table/table.component').then(m => m.TableComponent)\n      },\n      {\n        path: 'master/deposit-scheme',\n        loadComponent: () => import('./components/master/deposit-scheme/deposit-scheme.component').then(m => m.DepositSchemeComponent)\n      },\n      {\n        path: 'master/interest-master',\n        loadComponent: () => import('./components/master/interest-master/interest-master.component').then(m => m.InterestMasterComponent)\n      },\n\n      // Transactions\n      {\n        path: 'transaction/loan-taken',\n        loadComponent: () => import('./components/transaction/loan-taken/loan-taken.component').then(m => m.LoanTakenComponent)\n      },\n      {\n        path: 'transaction/monthly-demand',\n        loadComponent: () => import('./components/transaction/monthly-demand/monthly-demand.component').then(m => m.MonthlyDemandComponent)\n      },\n      {\n        path: 'transaction/demand-process',\n        loadComponent: () => import('./components/transaction/demand-process/demand-process.component').then(m => m.DemandProcessComponent)\n      },\n      {\n        path: 'transaction/account-closure',\n        loadComponent: () => import('./components/transaction/account-closure/account-closure.component').then(m => m.AccountClosureComponent)\n      },\n      {\n        path: 'transaction/deposit-receipt',\n        loadComponent: () => import('./components/transaction/deposit-receipt/deposit-receipt.component').then(m => m.DepositReceiptComponent)\n      },\n      {\n        path: 'transaction/deposit-renew',\n        loadComponent: () => import('./components/transaction/deposit-renew/deposit-renew.component').then(m => m.DepositRenewComponent)\n      },\n      {\n        path: 'transaction/deposit-slip',\n        loadComponent: () => import('./components/transaction/deposit-slip/deposit-slip.component').then(m => m.DepositSlipComponent)\n      },\n      {\n        path: 'transaction/deposit-payment',\n        loadComponent: () => import('./components/transaction/deposit-payment/deposit-payment.component').then(m => m.DepositPaymentComponent)\n      },\n\n      // Accounts\n      {\n        path: 'accounts/group',\n        loadComponent: () => import('./components/accounts/group/group.component').then(m => m.GroupComponent)\n      },\n      {\n        path: 'accounts/ledger',\n        loadComponent: () => import('./components/accounts/ledger/ledger.component').then(m => m.LedgerComponent)\n      },\n      {\n        path: 'accounts/cash-book',\n        loadComponent: () => import('./components/accounts/cash-book/cash-book.component').then(m => m.CashBookComponent)\n      },\n      {\n        path: 'accounts/day-book',\n        loadComponent: () => import('./components/accounts/day-book/day-book.component').then(m => m.DayBookComponent)\n      },\n      {\n        path: 'accounts/voucher',\n        loadComponent: () => import('./components/accounts/voucher/voucher.component').then(m => m.VoucherComponent)\n      },\n      {\n        path: 'accounts/voucher-creation',\n        loadComponent: () => import('./components/accounts/voucher-creation/voucher-creation.component').then(m => m.VoucherCreationComponent)\n      },\n      {\n        path: 'accounts/loan-receipt',\n        loadComponent: () => import('./components/accounts/loan-receipt/loan-receipt.component').then(m => m.LoanReceiptComponent)\n      },\n      {\n        path: 'accounts/trial-balance',\n        loadComponent: () => import('./components/accounts/trial-balance/trial-balance.component').then(m => m.TrialBalanceComponent)\n      },\n      {\n        path: 'accounts/balance-sheet',\n        loadComponent: () => import('./components/accounts/balance-sheet/balance-sheet.component').then(m => m.BalanceSheetComponent)\n      },\n      {\n        path: 'accounts/profit-loss',\n        loadComponent: () => import('./components/accounts/profit-loss/profit-loss.component').then(m => m.ProfitLossComponent)\n      },\n      {\n        path: 'accounts/receipt-payment',\n        loadComponent: () => import('./components/accounts/receipt-payment/receipt-payment.component').then(m => m.ReceiptPaymentComponent)\n      },\n\n      // Reports\n      {\n        path: 'reports/employees',\n        loadComponent: () => import('./components/reports/employees/employees.component').then(m => m.EmployeesComponent)\n      },\n      {\n        path: 'reports/voucher',\n        loadComponent: () => import('./components/reports/voucher/voucher.component').then(m => m.VoucherReportComponent)\n      },\n      {\n        path: 'reports/opening-balance',\n        loadComponent: () => import('./components/reports/opening-balance/opening-balance.component').then(m => m.OpeningBalanceComponent)\n      },\n      {\n        path: 'reports/closing-balance',\n        loadComponent: () => import('./components/reports/closing-balance/closing-balance.component').then(m => m.ClosingBalanceComponent)\n      },\n      {\n        path: 'reports/loan',\n        loadComponent: () => import('./components/reports/loan/loan.component').then(m => m.LoanReportComponent)\n      },\n\n      // System\n      {\n        path: 'statement',\n        loadComponent: () => import('./components/statement/statement.component').then(m => m.StatementComponent)\n      },\n      {\n        path: 'backup',\n        loadComponent: () => import('./components/backup/backup.component').then(m => m.BackupComponent)\n      },\n      {\n        path: 'admin',\n        loadComponent: () => import('./components/admin/admin.component').then(m => m.AdminComponent),\n        canActivate: [RoleGuard],\n        data: { roles: ['super_admin'] }\n      },\n      {\n        path: 'new-year',\n        loadComponent: () => import('./components/new-year/new-year.component').then(m => m.NewYearComponent)\n      },\n\n      // Member Details View\n      {\n        path: 'member/:id',\n        loadComponent: () => import('./components/member-details-view/member-details-view.component').then(m => m.MemberDetailsViewComponent)\n      },\n\n      // Unauthorized\n      {\n        path: 'unauthorized',\n        loadComponent: () => import('./components/unauthorized/unauthorized.component').then(m => m.UnauthorizedComponent)\n      }\n    ]\n  },\n\n  // Wildcard route\n  { path: '**', redirectTo: '/login' }\n];","size_bytes":9435},"attached_assets/extracted_frontend/fintcs/src/app/create-components.ts":{"content":"\n// This file will generate all remaining placeholder components\n\n// File Security Components\nexport const securityComponents = [\n  'src/app/components/file/security/authority/authority.component.ts',\n  'src/app/components/file/security/my-rights/my-rights.component.ts',\n  'src/app/components/file/security/new-user/new-user.component.ts',\n  'src/app/components/file/security/retrieve-password/retrieve-password.component.ts',\n  'src/app/components/file/security/change-password/change-password.component.ts',\n  'src/app/components/file/security/admin-handover/admin-handover.component.ts'\n];\n\n// Template for placeholder components\nconst createPlaceholderComponent = (name: string, title: string) => `\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-${name}',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: \\`\n    <div class=\"page-container\">\n      <h1>${title}</h1>\n      <mat-card>\n        <mat-card-content>\n          <p>${title} functionality will be implemented here.</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  \\`,\n  styles: [\\`\n    .page-container { max-width: 800px; margin: 0 auto; }\n  \\`]\n})\nexport class ${name.charAt(0).toUpperCase() + name.slice(1)}Component {}\n`;\n","size_bytes":1356},"attached_assets/extracted_frontend/fintcs/src/app/create-remaining-components.sh":{"content":"\n#!/bin/bash\n\n# Create remaining essential component directories and files\n\n# Transaction components\nmkdir -p src/app/components/transaction/{account-closure,deposit-receipt,deposit-renew,deposit-slip,deposit-payment}\n\n# Accounts components  \nmkdir -p src/app/components/accounts/{group,ledger,cash-book,day-book,voucher,loan-receipt,trial-balance,balance-sheet,profit-loss,receipt-payment}\n\n# Reports components\nmkdir -p src/app/components/reports/{employees,voucher,opening-balance,closing-balance,loan}\n\necho \"Component directories created\"\n","size_bytes":544},"src/app/components/accounts/balance-sheet/balance-sheet.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-balance-sheet',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Balance Sheet</h1><mat-card><mat-card-content><p>Balance sheet report generation.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class BalanceSheetComponent {}\n","size_bytes":541},"src/app/components/accounts/cash-book/cash-book.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTabsModule } from '@angular/material/tabs';\n\ninterface CashBookEntry {\n  id: number;\n  date: Date;\n  particulars: string;\n  voucherNo: string;\n  type: 'Receipt' | 'Payment';\n  amount: number;\n  balance: number;\n  description: string;\n}\n\n@Component({\n  selector: 'app-cash-book',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatTableModule,\n    MatIconModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSnackBarModule,\n    MatTabsModule\n  ],\n  template: `\n    <div class=\"page-container\">\n      <h1>Cash Book Management</h1>\n      \n      <mat-tab-group>\n        <!-- Cash Entry Tab -->\n        <mat-tab label=\"Cash Entry\">\n          <mat-card class=\"form-card\">\n            <mat-card-header>\n              <mat-card-title>{{editingEntry ? 'Edit Cash Entry' : 'New Cash Entry'}}</mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n              <form [formGroup]=\"cashForm\" (ngSubmit)=\"saveEntry()\">\n                <div class=\"form-grid\">\n                  <mat-form-field>\n                    <mat-label>Date</mat-label>\n                    <input matInput [matDatepicker]=\"picker\" formControlName=\"date\" required>\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    <mat-datepicker #picker></mat-datepicker>\n                  </mat-form-field>\n                  \n                  <mat-form-field>\n                    <mat-label>Voucher No</mat-label>\n                    <input matInput formControlName=\"voucherNo\" required>\n                  </mat-form-field>\n                  \n                  <mat-form-field>\n                    <mat-label>Type</mat-label>\n                    <mat-select formControlName=\"type\" required>\n                      <mat-option value=\"Receipt\">Cash Receipt</mat-option>\n                      <mat-option value=\"Payment\">Cash Payment</mat-option>\n                    </mat-select>\n                  </mat-form-field>\n                  \n                  <mat-form-field>\n                    <mat-label>Amount</mat-label>\n                    <input matInput type=\"number\" formControlName=\"amount\" required min=\"0.01\" step=\"0.01\">\n                  </mat-form-field>\n                  \n                  <mat-form-field class=\"full-width\">\n                    <mat-label>Particulars</mat-label>\n                    <input matInput formControlName=\"particulars\" required>\n                  </mat-form-field>\n                  \n                  <mat-form-field class=\"full-width\">\n                    <mat-label>Description</mat-label>\n                    <textarea matInput formControlName=\"description\" rows=\"3\"></textarea>\n                  </mat-form-field>\n                </div>\n                \n                <div class=\"form-actions\">\n                  <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!cashForm.valid\">\n                    {{editingEntry ? 'Update Entry' : 'Add Entry'}}\n                  </button>\n                  <button mat-button type=\"button\" (click)=\"resetForm()\" *ngIf=\"editingEntry\">\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </mat-card-content>\n          </mat-card>\n        </mat-tab>\n        \n        <!-- Cash Book View Tab -->\n        <mat-tab label=\"Cash Book\">\n          <mat-card class=\"table-card\">\n            <mat-card-header>\n              <mat-card-title>Cash Book Entries</mat-card-title>\n              <div class=\"card-actions\">\n                <mat-form-field class=\"date-filter\">\n                  <mat-label>From Date</mat-label>\n                  <input matInput [matDatepicker]=\"fromPicker\" [(ngModel)]=\"fromDate\" (dateChange)=\"filterEntries()\">\n                  <mat-datepicker-toggle matSuffix [for]=\"fromPicker\"></mat-datepicker-toggle>\n                  <mat-datepicker #fromPicker></mat-datepicker>\n                </mat-form-field>\n                <mat-form-field class=\"date-filter\">\n                  <mat-label>To Date</mat-label>\n                  <input matInput [matDatepicker]=\"toPicker\" [(ngModel)]=\"toDate\" (dateChange)=\"filterEntries()\">\n                  <mat-datepicker-toggle matSuffix [for]=\"toPicker\"></mat-datepicker-toggle>\n                  <mat-datepicker #toPicker></mat-datepicker>\n                </mat-form-field>\n              </div>\n            </mat-card-header>\n            <mat-card-content>\n              <div class=\"summary-cards\">\n                <div class=\"summary-card receipt\">\n                  <h3>Total Receipts</h3>\n                  <p>‚Çπ{{totalReceipts | number:'1.2-2'}}</p>\n                </div>\n                <div class=\"summary-card payment\">\n                  <h3>Total Payments</h3>\n                  <p>‚Çπ{{totalPayments | number:'1.2-2'}}</p>\n                </div>\n                <div class=\"summary-card balance\">\n                  <h3>Closing Balance</h3>\n                  <p>‚Çπ{{closingBalance | number:'1.2-2'}}</p>\n                </div>\n              </div>\n              \n              <div class=\"table-container\">\n                <table mat-table [dataSource]=\"filteredEntries\" class=\"cash-book-table\">\n                  <ng-container matColumnDef=\"date\">\n                    <th mat-header-cell *matHeaderCellDef>Date</th>\n                    <td mat-cell *matCellDef=\"let entry\">{{entry.date | date:'dd/MM/yyyy'}}</td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"voucherNo\">\n                    <th mat-header-cell *matHeaderCellDef>Voucher No</th>\n                    <td mat-cell *matCellDef=\"let entry\">{{entry.voucherNo}}</td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"particulars\">\n                    <th mat-header-cell *matHeaderCellDef>Particulars</th>\n                    <td mat-cell *matCellDef=\"let entry\">{{entry.particulars}}</td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"receipt\">\n                    <th mat-header-cell *matHeaderCellDef>Receipt</th>\n                    <td mat-cell *matCellDef=\"let entry\" class=\"amount-cell receipt\">\n                      {{entry.type === 'Receipt' ? (entry.amount | number:'1.2-2') : ''}}\n                    </td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"payment\">\n                    <th mat-header-cell *matHeaderCellDef>Payment</th>\n                    <td mat-cell *matCellDef=\"let entry\" class=\"amount-cell payment\">\n                      {{entry.type === 'Payment' ? (entry.amount | number:'1.2-2') : ''}}\n                    </td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"balance\">\n                    <th mat-header-cell *matHeaderCellDef>Balance</th>\n                    <td mat-cell *matCellDef=\"let entry\" class=\"amount-cell balance\">\n                      {{entry.balance | number:'1.2-2'}}\n                    </td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"actions\">\n                    <th mat-header-cell *matHeaderCellDef>Actions</th>\n                    <td mat-cell *matCellDef=\"let entry\">\n                      <button mat-icon-button (click)=\"editEntry(entry)\" color=\"primary\">\n                        <mat-icon>edit</mat-icon>\n                      </button>\n                      <button mat-icon-button (click)=\"deleteEntry(entry.id)\" color=\"warn\">\n                        <mat-icon>delete</mat-icon>\n                      </button>\n                    </td>\n                  </ng-container>\n                  \n                  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" \n                      [class.receipt-row]=\"row.type === 'Receipt'\"\n                      [class.payment-row]=\"row.type === 'Payment'\"></tr>\n                </table>\n              </div>\n            </mat-card-content>\n          </mat-card>\n        </mat-tab>\n        \n        <!-- Reports Tab -->\n        <mat-tab label=\"Reports\">\n          <mat-card class=\"report-card\">\n            <mat-card-header>\n              <mat-card-title>Cash Book Reports</mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n              <div class=\"report-buttons\">\n                <button mat-raised-button color=\"primary\" (click)=\"printCashBook()\">\n                  <mat-icon>print</mat-icon>\n                  Print Cash Book\n                </button>\n                <button mat-raised-button color=\"accent\" (click)=\"exportToExcel()\">\n                  <mat-icon>download</mat-icon>\n                  Export to Excel\n                </button>\n                <button mat-raised-button (click)=\"generateSummary()\">\n                  <mat-icon>assessment</mat-icon>\n                  Generate Summary\n                </button>\n              </div>\n              \n              <div class=\"monthly-summary\" *ngIf=\"monthlySummary\">\n                <h3>Monthly Summary</h3>\n                <div class=\"summary-grid\">\n                  <div class=\"summary-item\">\n                    <label>Opening Balance:</label>\n                    <span>‚Çπ{{monthlySummary.openingBalance | number:'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Total Receipts:</label>\n                    <span>‚Çπ{{monthlySummary.totalReceipts | number:'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Total Payments:</label>\n                    <span>‚Çπ{{monthlySummary.totalPayments | number:'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Closing Balance:</label>\n                    <span>‚Çπ{{monthlySummary.closingBalance | number:'1.2-2'}}</span>\n                  </div>\n                </div>\n              </div>\n            </mat-card-content>\n          </mat-card>\n        </mat-tab>\n      </mat-tab-group>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .form-card, .table-card, .report-card {\n      margin: 20px 0;\n    }\n    \n    .form-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 16px;\n      margin-bottom: 20px;\n    }\n    \n    .full-width {\n      grid-column: 1 / -1;\n    }\n    \n    .form-actions {\n      display: flex;\n      gap: 10px;\n      justify-content: flex-end;\n    }\n    \n    .card-actions {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    }\n    \n    .date-filter {\n      width: 150px;\n    }\n    \n    .summary-cards {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 16px;\n      margin-bottom: 20px;\n    }\n    \n    .summary-card {\n      padding: 16px;\n      border-radius: 8px;\n      text-align: center;\n      color: white;\n    }\n    \n    .summary-card.receipt {\n      background-color: #4caf50;\n    }\n    \n    .summary-card.payment {\n      background-color: #f44336;\n    }\n    \n    .summary-card.balance {\n      background-color: #2196f3;\n    }\n    \n    .summary-card h3 {\n      margin: 0 0 8px 0;\n      font-size: 14px;\n      font-weight: 500;\n    }\n    \n    .summary-card p {\n      margin: 0;\n      font-size: 20px;\n      font-weight: bold;\n    }\n    \n    .table-container {\n      overflow-x: auto;\n    }\n    \n    .cash-book-table {\n      width: 100%;\n    }\n    \n    .amount-cell {\n      text-align: right;\n      font-weight: 500;\n    }\n    \n    .amount-cell.receipt {\n      color: #4caf50;\n    }\n    \n    .amount-cell.payment {\n      color: #f44336;\n    }\n    \n    .amount-cell.balance {\n      color: #2196f3;\n      font-weight: bold;\n    }\n    \n    .receipt-row {\n      background-color: #e8f5e8;\n    }\n    \n    .payment-row {\n      background-color: #fdeaea;\n    }\n    \n    .report-buttons {\n      display: flex;\n      gap: 10px;\n      margin-bottom: 20px;\n      flex-wrap: wrap;\n    }\n    \n    .monthly-summary {\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 16px;\n    }\n    \n    .summary-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 16px;\n    }\n    \n    .summary-item {\n      display: flex;\n      justify-content: space-between;\n      padding: 8px;\n      border-bottom: 1px solid #eee;\n    }\n    \n    .summary-item label {\n      font-weight: 500;\n    }\n    \n    .summary-item span {\n      font-weight: bold;\n      color: #2196f3;\n    }\n  `]\n})\nexport class CashBookComponent implements OnInit {\n  cashForm: FormGroup;\n  entries: CashBookEntry[] = [];\n  filteredEntries: CashBookEntry[] = [];\n  displayedColumns = ['date', 'voucherNo', 'particulars', 'receipt', 'payment', 'balance', 'actions'];\n  editingEntry: CashBookEntry | null = null;\n  \n  fromDate: Date | null = null;\n  toDate: Date | null = null;\n  \n  totalReceipts = 0;\n  totalPayments = 0;\n  closingBalance = 0;\n  \n  monthlySummary: any = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {\n    this.cashForm = this.createForm();\n  }\n\n  ngOnInit() {\n    this.loadSampleData();\n    this.calculateSummary();\n    this.setDefaultDateRange();\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      date: [new Date(), Validators.required],\n      voucherNo: ['', Validators.required],\n      type: ['Receipt', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0.01)]],\n      particulars: ['', Validators.required],\n      description: ['']\n    });\n  }\n\n  setDefaultDateRange() {\n    const today = new Date();\n    this.fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n    this.toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    this.filterEntries();\n  }\n\n  loadSampleData() {\n    let balance = 10000; // Opening balance\n    \n    this.entries = [\n      {\n        id: 1,\n        date: new Date('2024-01-01'),\n        particulars: 'Opening Balance',\n        voucherNo: 'OB001',\n        type: 'Receipt',\n        amount: 10000,\n        balance: balance,\n        description: 'Opening balance for the year'\n      },\n      {\n        id: 2,\n        date: new Date('2024-01-02'),\n        particulars: 'Member Deposit - John Doe',\n        voucherNo: 'CR001',\n        type: 'Receipt',\n        amount: 50000,\n        balance: balance + 50000,\n        description: 'Fixed deposit by member'\n      },\n      {\n        id: 3,\n        date: new Date('2024-01-03'),\n        particulars: 'Office Rent',\n        voucherNo: 'CP001',\n        type: 'Payment',\n        amount: 15000,\n        balance: balance + 50000 - 15000,\n        description: 'Monthly office rent payment'\n      }\n    ];\n    \n    this.filteredEntries = [...this.entries];\n  }\n\n  saveEntry() {\n    if (this.cashForm.valid) {\n      const formValue = this.cashForm.value;\n      \n      if (this.editingEntry) {\n        const index = this.entries.findIndex(e => e.id === this.editingEntry!.id);\n        this.entries[index] = { ...this.editingEntry, ...formValue };\n        this.snackBar.open('Entry updated successfully', 'Close', { duration: 3000 });\n      } else {\n        const newEntry: CashBookEntry = {\n          id: Date.now(),\n          ...formValue,\n          balance: this.calculateRunningBalance(formValue)\n        };\n        this.entries.push(newEntry);\n        this.snackBar.open('Entry added successfully', 'Close', { duration: 3000 });\n      }\n      \n      this.sortAndRecalculateBalances();\n      this.filterEntries();\n      this.calculateSummary();\n      this.resetForm();\n    }\n  }\n\n  calculateRunningBalance(entry: any): number {\n    const lastBalance = this.entries.length > 0 ? \n      Math.max(...this.entries.map(e => e.balance)) : 0;\n    \n    return entry.type === 'Receipt' ? \n      lastBalance + entry.amount : \n      lastBalance - entry.amount;\n  }\n\n  sortAndRecalculateBalances() {\n    this.entries.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n    \n    let runningBalance = 0;\n    this.entries.forEach(entry => {\n      if (entry.particulars === 'Opening Balance') {\n        runningBalance = entry.amount;\n      } else {\n        runningBalance += entry.type === 'Receipt' ? entry.amount : -entry.amount;\n      }\n      entry.balance = runningBalance;\n    });\n  }\n\n  editEntry(entry: CashBookEntry) {\n    this.editingEntry = entry;\n    this.cashForm.patchValue(entry);\n  }\n\n  deleteEntry(id: number) {\n    if (confirm('Are you sure you want to delete this entry?')) {\n      this.entries = this.entries.filter(e => e.id !== id);\n      this.sortAndRecalculateBalances();\n      this.filterEntries();\n      this.calculateSummary();\n      this.snackBar.open('Entry deleted successfully', 'Close', { duration: 3000 });\n    }\n  }\n\n  resetForm() {\n    this.editingEntry = null;\n    this.cashForm.reset();\n    this.cashForm.patchValue({\n      date: new Date(),\n      type: 'Receipt'\n    });\n  }\n\n  filterEntries() {\n    if (this.fromDate && this.toDate) {\n      this.filteredEntries = this.entries.filter(entry => {\n        const entryDate = new Date(entry.date);\n        return entryDate >= this.fromDate! && entryDate <= this.toDate!;\n      });\n    } else {\n      this.filteredEntries = [...this.entries];\n    }\n    this.calculateSummary();\n  }\n\n  calculateSummary() {\n    this.totalReceipts = this.filteredEntries\n      .filter(e => e.type === 'Receipt')\n      .reduce((sum, e) => sum + e.amount, 0);\n    \n    this.totalPayments = this.filteredEntries\n      .filter(e => e.type === 'Payment')\n      .reduce((sum, e) => sum + e.amount, 0);\n    \n    this.closingBalance = this.filteredEntries.length > 0 ? \n      this.filteredEntries[this.filteredEntries.length - 1].balance : 0;\n  }\n\n  printCashBook() {\n    this.snackBar.open('Print functionality will be implemented', 'Close', { duration: 2000 });\n  }\n\n  exportToExcel() {\n    this.snackBar.open('Export functionality will be implemented', 'Close', { duration: 2000 });\n  }\n\n  generateSummary() {\n    const openingBalance = this.entries.find(e => e.particulars === 'Opening Balance')?.amount || 0;\n    \n    this.monthlySummary = {\n      openingBalance: openingBalance,\n      totalReceipts: this.totalReceipts,\n      totalPayments: this.totalPayments,\n      closingBalance: this.closingBalance\n    };\n    \n    this.snackBar.open('Summary generated successfully', 'Close', { duration: 2000 });\n  }\n}\n","size_bytes":19556},"src/app/components/accounts/day-book/day-book.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-day-book',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Day Book</h1><mat-card><mat-card-content><p>Daily transaction recording.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DayBookComponent {}\n","size_bytes":522},"src/app/components/accounts/group/group.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-group',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Account Groups</h1><mat-card><mat-card-content><p>Account group management.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class GroupComponent {}\n","size_bytes":520},"src/app/components/accounts/ledger/ledger.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\n\ninterface LedgerEntry {\n  id: number;\n  date: string;\n  voucherNo: string;\n  description: string;\n  debitAmount: number;\n  creditAmount: number;\n  balance: number;\n}\n\ninterface LedgerAccount {\n  accountName: string;\n  accountCode: string;\n  accountType: string;\n  openingBalance: number;\n}\n\n@Component({\n  selector: 'app-ledger',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatSelectModule,\n    MatSnackBarModule\n  ],\n  template: `\n    <div class=\"page-container\">\n      <h1>Ledger Management</h1>\n      \n      <!-- Account Selection -->\n      <mat-card class=\"selection-card\">\n        <mat-card-header>\n          <mat-card-title>Select Account</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"selection-row\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Select Account</mat-label>\n              <mat-select [(value)]=\"selectedAccount\" (selectionChange)=\"onAccountChange()\">\n                <mat-option *ngFor=\"let account of accounts\" [value]=\"account\">\n                  {{account.accountCode}} - {{account.accountName}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n            \n            <mat-form-field appearance=\"outline\">\n              <mat-label>From Date</mat-label>\n              <input matInput [(ngModel)]=\"fromDate\" type=\"date\">\n            </mat-form-field>\n            \n            <mat-form-field appearance=\"outline\">\n              <mat-label>To Date</mat-label>\n              <input matInput [(ngModel)]=\"toDate\" type=\"date\">\n            </mat-form-field>\n            \n            <button mat-raised-button color=\"primary\" (click)=\"filterEntries()\">\n              <mat-icon>search</mat-icon>\n              Filter\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Account Info -->\n      <mat-card class=\"info-card\" *ngIf=\"selectedAccount\">\n        <mat-card-content>\n          <div class=\"account-info\">\n            <div class=\"info-item\">\n              <strong>Account:</strong> {{selectedAccount.accountCode}} - {{selectedAccount.accountName}}\n            </div>\n            <div class=\"info-item\">\n              <strong>Type:</strong> {{selectedAccount.accountType}}\n            </div>\n            <div class=\"info-item\">\n              <strong>Opening Balance:</strong> ‚Çπ{{selectedAccount.openingBalance | number}}\n            </div>\n            <div class=\"info-item\">\n              <strong>Current Balance:</strong> ‚Çπ{{currentBalance | number}}\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Ledger Entries Table -->\n      <mat-card class=\"table-card\" *ngIf=\"selectedAccount\">\n        <mat-card-header>\n          <mat-card-title>Ledger Entries - {{selectedAccount.accountName}}</mat-card-title>\n          <div class=\"header-actions\">\n            <button mat-raised-button color=\"accent\" (click)=\"exportToExcel()\">\n              <mat-icon>download</mat-icon>\n              Export Excel\n            </button>\n            <button mat-raised-button color=\"primary\" (click)=\"printLedger()\">\n              <mat-icon>print</mat-icon>\n              Print\n            </button>\n          </div>\n        </mat-card-header>\n        <mat-card-content>\n          <table mat-table [dataSource]=\"filteredEntries\" class=\"mat-elevation-z2\">\n            <ng-container matColumnDef=\"date\">\n              <th mat-header-cell *matHeaderCellDef>Date</th>\n              <td mat-cell *matCellDef=\"let entry\">{{entry.date | date}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"voucherNo\">\n              <th mat-header-cell *matHeaderCellDef>Voucher No.</th>\n              <td mat-cell *matCellDef=\"let entry\">{{entry.voucherNo}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"description\">\n              <th mat-header-cell *matHeaderCellDef>Description</th>\n              <td mat-cell *matCellDef=\"let entry\">{{entry.description}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"debitAmount\">\n              <th mat-header-cell *matHeaderCellDef>Debit (‚Çπ)</th>\n              <td mat-cell *matCellDef=\"let entry\">\n                {{entry.debitAmount > 0 ? (entry.debitAmount | number) : '-'}}\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"creditAmount\">\n              <th mat-header-cell *matHeaderCellDef>Credit (‚Çπ)</th>\n              <td mat-cell *matCellDef=\"let entry\">\n                {{entry.creditAmount > 0 ? (entry.creditAmount | number) : '-'}}\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"balance\">\n              <th mat-header-cell *matHeaderCellDef>Balance (‚Çπ)</th>\n              <td mat-cell *matCellDef=\"let entry\" [class.negative-balance]=\"entry.balance < 0\">\n                {{entry.balance | number}}\n              </td>\n            </ng-container>\n            \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>\n          \n          <!-- Summary -->\n          <div class=\"ledger-summary\" *ngIf=\"filteredEntries.length > 0\">\n            <div class=\"summary-item\">\n              <strong>Total Debit:</strong> ‚Çπ{{totalDebit | number}}\n            </div>\n            <div class=\"summary-item\">\n              <strong>Total Credit:</strong> ‚Çπ{{totalCredit | number}}\n            </div>\n            <div class=\"summary-item\">\n              <strong>Closing Balance:</strong> ‚Çπ{{currentBalance | number}}\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .selection-card, .info-card, .table-card {\n      margin-bottom: 20px;\n    }\n    \n    .selection-row {\n      display: flex;\n      gap: 16px;\n      align-items: flex-end;\n    }\n    \n    .selection-row mat-form-field {\n      flex: 1;\n    }\n    \n    .account-info {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 16px;\n    }\n    \n    .info-item {\n      padding: 8px;\n      background: #f5f5f5;\n      border-radius: 4px;\n    }\n    \n    .header-actions {\n      display: flex;\n      gap: 12px;\n    }\n    \n    table {\n      width: 100%;\n    }\n    \n    .negative-balance {\n      color: red;\n    }\n    \n    .ledger-summary {\n      display: flex;\n      justify-content: space-around;\n      margin-top: 20px;\n      padding: 16px;\n      background: #f5f5f5;\n      border-radius: 8px;\n    }\n    \n    .summary-item {\n      text-align: center;\n    }\n  `]\n})\nexport class LedgerComponent implements OnInit {\n  selectedAccount: LedgerAccount | null = null;\n  fromDate = '';\n  toDate = '';\n  \n  accounts: LedgerAccount[] = [];\n  ledgerEntries: { [key: string]: LedgerEntry[] } = {};\n  filteredEntries: LedgerEntry[] = [];\n  \n  currentBalance = 0;\n  totalDebit = 0;\n  totalCredit = 0;\n  \n  displayedColumns: string[] = ['date', 'voucherNo', 'description', 'debitAmount', 'creditAmount', 'balance'];\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit() {\n    this.loadSampleData();\n    this.setDefaultDates();\n  }\n\n  setDefaultDates() {\n    const today = new Date();\n    const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n    \n    this.fromDate = firstDay.toISOString().split('T')[0];\n    this.toDate = today.toISOString().split('T')[0];\n  }\n\n  loadSampleData() {\n    this.accounts = [\n      {\n        accountName: 'Cash Account',\n        accountCode: 'AC001',\n        accountType: 'Asset',\n        openingBalance: 50000\n      },\n      {\n        accountName: 'Bank Account',\n        accountCode: 'AC002',\n        accountType: 'Asset',\n        openingBalance: 150000\n      },\n      {\n        accountName: 'Member Deposits',\n        accountCode: 'AC003',\n        accountType: 'Liability',\n        openingBalance: 100000\n      },\n      {\n        accountName: 'Interest Income',\n        accountCode: 'AC004',\n        accountType: 'Income',\n        openingBalance: 0\n      }\n    ];\n\n    // Sample ledger entries for Cash Account\n    this.ledgerEntries['AC001'] = [\n      {\n        id: 1,\n        date: '2024-01-01',\n        voucherNo: 'OP001',\n        description: 'Opening Balance',\n        debitAmount: 50000,\n        creditAmount: 0,\n        balance: 50000\n      },\n      {\n        id: 2,\n        date: '2024-01-15',\n        voucherNo: 'RV001',\n        description: 'Member deposit received',\n        debitAmount: 25000,\n        creditAmount: 0,\n        balance: 75000\n      },\n      {\n        id: 3,\n        date: '2024-01-16',\n        voucherNo: 'PV001',\n        description: 'Office rent payment',\n        debitAmount: 0,\n        creditAmount: 15000,\n        balance: 60000\n      }\n    ];\n\n    // Sample ledger entries for Bank Account\n    this.ledgerEntries['AC002'] = [\n      {\n        id: 1,\n        date: '2024-01-01',\n        voucherNo: 'OP002',\n        description: 'Opening Balance',\n        debitAmount: 150000,\n        creditAmount: 0,\n        balance: 150000\n      },\n      {\n        id: 2,\n        date: '2024-01-10',\n        voucherNo: 'BV001',\n        description: 'Loan disbursement',\n        debitAmount: 0,\n        creditAmount: 100000,\n        balance: 50000\n      }\n    ];\n  }\n\n  onAccountChange() {\n    if (this.selectedAccount) {\n      this.filterEntries();\n    }\n  }\n\n  filterEntries() {\n    if (!this.selectedAccount) return;\n    \n    const entries = this.ledgerEntries[this.selectedAccount.accountCode] || [];\n    \n    this.filteredEntries = entries.filter(entry => {\n      const entryDate = new Date(entry.date);\n      const from = this.fromDate ? new Date(this.fromDate) : new Date('1900-01-01');\n      const to = this.toDate ? new Date(this.toDate) : new Date('2100-12-31');\n      \n      return entryDate >= from && entryDate <= to;\n    });\n    \n    this.calculateTotals();\n  }\n\n  calculateTotals() {\n    this.totalDebit = this.filteredEntries.reduce((sum, entry) => sum + entry.debitAmount, 0);\n    this.totalCredit = this.filteredEntries.reduce((sum, entry) => sum + entry.creditAmount, 0);\n    \n    if (this.filteredEntries.length > 0) {\n      this.currentBalance = this.filteredEntries[this.filteredEntries.length - 1].balance;\n    } else {\n      this.currentBalance = this.selectedAccount?.openingBalance || 0;\n    }\n  }\n\n  exportToExcel() {\n    this.snackBar.open('Exporting ledger to Excel...', 'Close', { duration: 3000 });\n  }\n\n  printLedger() {\n    this.snackBar.open('Printing ledger report...', 'Close', { duration: 3000 });\n  }\n}\n","size_bytes":11655},"src/app/components/accounts/loan-receipt/loan-receipt.component.css":{"content":"\r\n/* Form Container Styles */\r\n.form-container {\r\n  @apply max-w-7xl mx-auto p-6;\r\n}\r\n\r\n/* Card Styles */\r\n.card {\r\n  @apply bg-white dark:bg-gray-800 rounded-xl shadow-lg border-0 overflow-hidden;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.card-header {\r\n  @apply p-6 text-white;\r\n}\r\n\r\n.card-title {\r\n  @apply flex items-center gap-3 text-xl font-semibold;\r\n}\r\n\r\n.card-content {\r\n  @apply p-6 space-y-6;\r\n}\r\n\r\n.card-actions {\r\n  @apply p-6 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700;\r\n}\r\n\r\n/* Form Section Styles */\r\n.form-section {\r\n  @apply space-y-4;\r\n}\r\n\r\n.form-section-header {\r\n  @apply flex items-center gap-2 text-lg font-medium text-gray-900 dark:text-gray-100 mb-4;\r\n}\r\n\r\n.form-section-header mat-icon {\r\n  @apply text-blue-600 dark:text-blue-400;\r\n}\r\n\r\n.form-section-content {\r\n  @apply space-y-4;\r\n}\r\n\r\n/* Form Grid Layouts */\r\n.form-grid {\r\n  @apply grid gap-4;\r\n}\r\n\r\n.form-grid-1 {\r\n  @apply grid-cols-1;\r\n}\r\n\r\n.form-grid-2 {\r\n  @apply grid-cols-1 md:grid-cols-2;\r\n}\r\n\r\n.form-grid-3 {\r\n  @apply grid-cols-1 md:grid-cols-2 lg:grid-cols-3;\r\n}\r\n\r\n/* Form Field Styles */\r\n.form-field {\r\n  @apply space-y-2;\r\n}\r\n\r\n.form-label {\r\n  @apply block text-sm font-medium text-gray-700 dark:text-gray-300;\r\n}\r\n\r\n.form-label-required::after {\r\n  content: ' *';\r\n  @apply text-red-500;\r\n}\r\n\r\n.form-input,\r\n.form-select,\r\n.form-textarea {\r\n  @apply w-full px-4 py-2.5 border border-gray-300 dark:border-gray-600 rounded-lg\r\n         bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\r\n         focus:ring-2 focus:ring-blue-500 focus:border-transparent\r\n         placeholder-gray-500 dark:placeholder-gray-400\r\n         transition-colors duration-200;\r\n}\r\n\r\n.form-input:focus,\r\n.form-select:focus,\r\n.form-textarea:focus {\r\n  @apply outline-none ring-2 ring-blue-500 border-transparent;\r\n}\r\n\r\n.form-textarea {\r\n  @apply min-h-[80px] resize-y;\r\n}\r\n\r\n.form-error {\r\n  @apply text-sm text-red-600 dark:text-red-400;\r\n}\r\n\r\n/* Input Group Styles */\r\n.input-group {\r\n  @apply flex gap-2;\r\n}\r\n\r\n.input-group .form-input {\r\n  @apply flex-1;\r\n}\r\n\r\n/* Button Styles */\r\n.btn {\r\n  @apply inline-flex items-center gap-2 px-4 py-2 rounded-lg font-medium\r\n         transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;\r\n}\r\n\r\n.btn-primary {\r\n  @apply bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500;\r\n}\r\n\r\n.btn-secondary {\r\n  @apply bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500;\r\n}\r\n\r\n.btn-success {\r\n  @apply bg-green-600 hover:bg-green-700 text-white focus:ring-green-500;\r\n}\r\n\r\n.btn-danger {\r\n  @apply bg-red-600 hover:bg-red-700 text-white focus:ring-red-500;\r\n}\r\n\r\n.btn-warning {\r\n  @apply bg-yellow-600 hover:bg-yellow-700 text-white focus:ring-yellow-500;\r\n}\r\n\r\n.btn-outline {\r\n  @apply bg-transparent hover:bg-gray-50 dark:hover:bg-gray-700 \r\n         text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600\r\n         focus:ring-gray-500;\r\n}\r\n\r\n.btn-sm {\r\n  @apply px-2 py-1 text-sm;\r\n}\r\n\r\n/* Table Styles */\r\n.table-container {\r\n  @apply overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700;\r\n}\r\n\r\n.data-table {\r\n  @apply w-full bg-white dark:bg-gray-800;\r\n}\r\n\r\n.data-table thead {\r\n  @apply bg-gray-50 dark:bg-gray-700;\r\n}\r\n\r\n.data-table th {\r\n  @apply px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider;\r\n}\r\n\r\n.data-table td {\r\n  @apply px-4 py-3 text-sm text-gray-900 dark:text-gray-100 whitespace-nowrap border-t border-gray-200 dark:border-gray-700;\r\n}\r\n\r\n.data-table tbody tr:hover {\r\n  @apply bg-gray-50 dark:bg-gray-700;\r\n}\r\n\r\n/* Content Header Styles */\r\n.content-header {\r\n  @apply space-y-2;\r\n}\r\n\r\n.breadcrumb {\r\n  @apply flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400;\r\n}\r\n\r\n.breadcrumb-separator {\r\n  @apply text-gray-400;\r\n  font-size: 16px;\r\n}\r\n\r\n.breadcrumb-active {\r\n  @apply text-blue-600 dark:text-blue-400 font-medium;\r\n}\r\n\r\n.text-page-title {\r\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100;\r\n}\r\n\r\n.text-body {\r\n  @apply text-base;\r\n}\r\n\r\n/* Animation */\r\n.animate-fade-in {\r\n  animation: fadeIn 0.5s ease-in-out;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .form-container {\r\n    @apply p-4;\r\n  }\r\n  \r\n  .card-header,\r\n  .card-content,\r\n  .card-actions {\r\n    @apply p-4;\r\n  }\r\n  \r\n  .form-grid-2,\r\n  .form-grid-3 {\r\n    @apply grid-cols-1;\r\n  }\r\n  \r\n  .btn {\r\n    @apply text-sm px-3 py-2;\r\n  }\r\n}\r\n\r\n/* Dark Mode Adjustments */\r\n@media (prefers-color-scheme: dark) {\r\n  .form-input:disabled,\r\n  .form-select:disabled {\r\n    @apply bg-gray-800 text-gray-400;\r\n  }\r\n}\r\n","size_bytes":4754},"src/app/components/accounts/loan-receipt/loan-receipt.component.ts":{"content":"\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\n\r\ninterface AddAmountEntry {\r\n  type: string;\r\n  amount: number;\r\n  id: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-loan-receipt',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatIconModule,\r\n    MatTableModule\r\n  ],\r\n  template: `\r\n    <div class=\"animate-fade-in\">\r\n      <!-- Page Header -->\r\n      <div class=\"content-header mb-6\">\r\n        <div class=\"breadcrumb\">\r\n          <span>Accounts</span>\r\n          <mat-icon class=\"breadcrumb-separator\">chevron_right</mat-icon>\r\n          <span class=\"breadcrumb-active\">Loan Receipt</span>\r\n        </div>\r\n        <h1 class=\"text-page-title\">Loan Receipt</h1>\r\n        <p class=\"text-body text-gray-600 dark:text-gray-400\">Process loan receipt transactions</p>\r\n      </div>\r\n\r\n      <!-- Main Form -->\r\n      <form class=\"form-container\" [formGroup]=\"loanReceiptForm\">\r\n        <mat-card class=\"card\">\r\n          <!-- Card Header -->\r\n          <div class=\"card-header bg-gradient-to-r from-green-600 to-blue-600\">\r\n            <div class=\"card-title\">\r\n              <mat-icon>receipt</mat-icon>\r\n              <span>Loan Receipt Entry</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"card-content\">\r\n            <!-- Top Section Fields -->\r\n            <div class=\"form-section\">\r\n              <div class=\"form-section-header\">\r\n                <mat-icon>description</mat-icon>\r\n                <span>Receipt Details</span>\r\n              </div>\r\n              <div class=\"form-section-content\">\r\n                <div class=\"form-grid form-grid-3\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">No.</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Receipt number\"\r\n                      formControlName=\"receiptNo\">\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('receiptNo')?.invalid && loanReceiptForm.get('receiptNo')?.touched\">\r\n                      Receipt number is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">Bank</label>\r\n                    <select class=\"form-select\" formControlName=\"bank\">\r\n                      <option value=\"\">Select bank</option>\r\n                      <option value=\"State Bank of India\">State Bank of India</option>\r\n                      <option value=\"HDFC Bank\">HDFC Bank</option>\r\n                      <option value=\"ICICI Bank\">ICICI Bank</option>\r\n                      <option value=\"Axis Bank\">Axis Bank</option>\r\n                      <option value=\"Punjab National Bank\">Punjab National Bank</option>\r\n                    </select>\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('bank')?.invalid && loanReceiptForm.get('bank')?.touched\">\r\n                      Bank selection is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">Date</label>\r\n                    <input \r\n                      type=\"date\" \r\n                      class=\"form-input\"\r\n                      formControlName=\"date\">\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('date')?.invalid && loanReceiptForm.get('date')?.touched\">\r\n                      Date is required\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Member Details Section -->\r\n            <div class=\"form-section\">\r\n              <div class=\"form-section-header\">\r\n                <mat-icon>person</mat-icon>\r\n                <span>Member Details</span>\r\n              </div>\r\n              <div class=\"form-section-content\">\r\n                <div class=\"form-grid form-grid-2\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">Mem. No.</label>\r\n                    <div class=\"input-group\">\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-input\"\r\n                        placeholder=\"Enter member number\"\r\n                        formControlName=\"memberNo\">\r\n                      <button type=\"button\" class=\"btn btn-outline\" (click)=\"browseMember()\">\r\n                        <mat-icon>search</mat-icon>\r\n                        Browse\r\n                      </button>\r\n                    </div>\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('memberNo')?.invalid && loanReceiptForm.get('memberNo')?.touched\">\r\n                      Member number is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Name</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Member name (auto-filled)\"\r\n                      formControlName=\"memberName\"\r\n                      readonly>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Amount Section -->\r\n            <div class=\"form-section\">\r\n              <div class=\"form-section-header\">\r\n                <mat-icon>currency_rupee</mat-icon>\r\n                <span>Amount Details</span>\r\n              </div>\r\n              <div class=\"form-section-content\">\r\n                <div class=\"form-grid form-grid-1\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">Amount</label>\r\n                    <div class=\"input-group\">\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-input\"\r\n                        placeholder=\"Enter amount\"\r\n                        formControlName=\"amount\"\r\n                        (input)=\"onAmountChange()\">\r\n                      <button type=\"button\" class=\"btn btn-primary\" (click)=\"calculateAmount()\">\r\n                        <mat-icon>calculate</mat-icon>\r\n                        Calculate\r\n                      </button>\r\n                    </div>\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('amount')?.invalid && loanReceiptForm.get('amount')?.touched\">\r\n                      Amount is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Add. Amount</label>\r\n                    <div class=\"flex gap-2\">\r\n                      <select class=\"form-select flex-1\" [(ngModel)]=\"selectedAddType\" [ngModelOptions]=\"{standalone: true}\">\r\n                        <option value=\"\">Select type</option>\r\n                        <option value=\"Interest\">Interest</option>\r\n                        <option value=\"Penalty\">Penalty</option>\r\n                        <option value=\"Processing Fee\">Processing Fee</option>\r\n                        <option value=\"Other\">Other</option>\r\n                      </select>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-input flex-1\"\r\n                        placeholder=\"Additional amount\"\r\n                        [(ngModel)]=\"additionalAmount\"\r\n                        [ngModelOptions]=\"{standalone: true}\">\r\n                      <button type=\"button\" class=\"btn btn-success\" (click)=\"addAdditionalAmount()\" [disabled]=\"!selectedAddType || !additionalAmount\">\r\n                        <mat-icon>add</mat-icon>\r\n                        Add\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Additional Amount Table -->\r\n                <div class=\"mt-4\" *ngIf=\"additionalAmounts.length > 0\">\r\n                  <div class=\"table-container\">\r\n                    <table class=\"data-table\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Type</th>\r\n                          <th>Amount</th>\r\n                          <th>Actions</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr *ngFor=\"let item of additionalAmounts\">\r\n                          <td>{{ item.type }}</td>\r\n                          <td class=\"text-right\">{{ item.amount | currency:'INR':'symbol':'1.2-2' }}</td>\r\n                          <td>\r\n                            <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"removeAdditionalAmount(item.id)\">\r\n                              <mat-icon>delete</mat-icon>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div class=\"mt-2 text-right font-semibold\">\r\n                    Total Additional: {{ getTotalAdditional() | currency:'INR':'symbol':'1.2-2' }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Payment Details Section -->\r\n            <div class=\"form-section\">\r\n              <div class=\"form-section-header\">\r\n                <mat-icon>payment</mat-icon>\r\n                <span>Payment Details</span>\r\n              </div>\r\n              <div class=\"form-section-content\">\r\n                <div class=\"form-grid form-grid-3\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Ch No.</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Cheque number\"\r\n                      formControlName=\"chequeNo\">\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Date</label>\r\n                    <input \r\n                      type=\"date\" \r\n                      class=\"form-input\"\r\n                      formControlName=\"chequeDate\">\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Pass Date</label>\r\n                    <input \r\n                      type=\"date\" \r\n                      class=\"form-input\"\r\n                      formControlName=\"passDate\">\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"form-grid form-grid-2\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Narration</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Enter narration\"\r\n                      formControlName=\"narration\">\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Remarks</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Enter remarks\"\r\n                      formControlName=\"remarks\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Summary Section -->\r\n            <div class=\"form-section\" *ngIf=\"loanReceiptForm.get('amount')?.value\">\r\n              <div class=\"form-section-content\">\r\n                <div class=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\r\n                  <div class=\"flex justify-between items-center text-lg font-semibold\">\r\n                    <span>Total Amount:</span>\r\n                    <span class=\"text-green-600\">{{ getTotalAmount() | currency:'INR':'symbol':'1.2-2' }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Action Buttons -->\r\n          <div class=\"card-actions\">\r\n            <div class=\"flex justify-end gap-3\">\r\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSave()\">\r\n                <mat-icon>save</mat-icon>\r\n                Save\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onPrint()\">\r\n                <mat-icon>print</mat-icon>\r\n                Print\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-danger\" (click)=\"onDelete()\">\r\n                <mat-icon>delete</mat-icon>\r\n                Delete\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-success\" (click)=\"onNew()\">\r\n                <mat-icon>add</mat-icon>\r\n                New\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onClose()\">\r\n                <mat-icon>close</mat-icon>\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </mat-card>\r\n      </form>\r\n    </div>\r\n  `,\r\n  styleUrl: './loan-receipt.component.css'\r\n})\r\nexport class LoanReceiptComponent implements OnInit {\r\n  loanReceiptForm: FormGroup;\r\n  additionalAmounts: AddAmountEntry[] = [];\r\n  selectedAddType: string = '';\r\n  additionalAmount: number = 0;\r\n  private nextId = 1;\r\n\r\n  // Sample member data\r\n  members = [\r\n    { memberNo: 'M001', name: 'John Doe' },\r\n    { memberNo: 'M002', name: 'Jane Smith' },\r\n    { memberNo: 'M003', name: 'Mike Johnson' },\r\n  ];\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.loanReceiptForm = this.fb.group({\r\n      receiptNo: ['', Validators.required],\r\n      bank: ['', Validators.required],\r\n      date: [new Date().toISOString().split('T')[0], Validators.required],\r\n      memberNo: ['', Validators.required],\r\n      memberName: [''],\r\n      amount: ['', [Validators.required, Validators.min(1)]],\r\n      chequeNo: [''],\r\n      chequeDate: [''],\r\n      narration: [''],\r\n      remarks: [''],\r\n      passDate: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Watch for member number changes\r\n    this.loanReceiptForm.get('memberNo')?.valueChanges.subscribe(value => {\r\n      const member = this.members.find(m => m.memberNo === value);\r\n      if (member) {\r\n        this.loanReceiptForm.patchValue({ memberName: member.name });\r\n      }\r\n    });\r\n  }\r\n\r\n  browseMember() {\r\n    // Simulate member search - in real app, this would open a dialog\r\n    const randomMember = this.members[Math.floor(Math.random() * this.members.length)];\r\n    this.loanReceiptForm.patchValue({\r\n      memberNo: randomMember.memberNo,\r\n      memberName: randomMember.name\r\n    });\r\n  }\r\n\r\n  onAmountChange() {\r\n    // Auto-calculate based on amount changes if needed\r\n  }\r\n\r\n  calculateAmount() {\r\n    const baseAmount = this.loanReceiptForm.get('amount')?.value || 0;\r\n    const additionalTotal = this.getTotalAdditional();\r\n    \r\n    // Perform any calculations needed\r\n    console.log('Calculating total:', baseAmount + additionalTotal);\r\n  }\r\n\r\n  addAdditionalAmount() {\r\n    if (this.selectedAddType && this.additionalAmount > 0) {\r\n      this.additionalAmounts.push({\r\n        id: this.nextId++,\r\n        type: this.selectedAddType,\r\n        amount: this.additionalAmount\r\n      });\r\n      \r\n      // Reset input fields\r\n      this.selectedAddType = '';\r\n      this.additionalAmount = 0;\r\n    }\r\n  }\r\n\r\n  removeAdditionalAmount(id: number) {\r\n    this.additionalAmounts = this.additionalAmounts.filter(item => item.id !== id);\r\n  }\r\n\r\n  getTotalAdditional(): number {\r\n    return this.additionalAmounts.reduce((sum, item) => sum + item.amount, 0);\r\n  }\r\n\r\n  getTotalAmount(): number {\r\n    const baseAmount = this.loanReceiptForm.get('amount')?.value || 0;\r\n    return baseAmount + this.getTotalAdditional();\r\n  }\r\n\r\n  onSave() {\r\n    if (this.loanReceiptForm.valid) {\r\n      const formData = {\r\n        ...this.loanReceiptForm.value,\r\n        additionalAmounts: this.additionalAmounts,\r\n        totalAmount: this.getTotalAmount()\r\n      };\r\n      console.log('Saving loan receipt:', formData);\r\n      alert('Loan receipt saved successfully!');\r\n    } else {\r\n      console.log('Form is invalid');\r\n      this.markFormGroupTouched();\r\n    }\r\n  }\r\n\r\n  onPrint() {\r\n    console.log('Printing loan receipt');\r\n    window.print();\r\n  }\r\n\r\n  onDelete() {\r\n    if (confirm('Are you sure you want to delete this loan receipt?')) {\r\n      this.onNew();\r\n      console.log('Loan receipt deleted');\r\n    }\r\n  }\r\n\r\n  onNew() {\r\n    this.loanReceiptForm.reset();\r\n    this.loanReceiptForm.patchValue({\r\n      date: new Date().toISOString().split('T')[0]\r\n    });\r\n    this.additionalAmounts = [];\r\n    this.selectedAddType = '';\r\n    this.additionalAmount = 0;\r\n    console.log('New loan receipt form');\r\n  }\r\n\r\n  onClose() {\r\n    console.log('Closing loan receipt form');\r\n    // Navigate back or close modal\r\n  }\r\n\r\n  private markFormGroupTouched() {\r\n    Object.keys(this.loanReceiptForm.controls).forEach(key => {\r\n      const control = this.loanReceiptForm.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n}\r\n","size_bytes":18064},"src/app/components/accounts/profit-loss/profit-loss.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-profit-loss',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Profit & Loss Account</h1><mat-card><mat-card-content><p>Profit and loss statement generation.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class ProfitLossComponent {}\n","size_bytes":550},"src/app/components/accounts/receipt-payment/receipt-payment.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-receipt-payment',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Receipt & Payment</h1><mat-card><mat-card-content><p>Receipt and payment account management.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class ReceiptPaymentComponent {}\n","size_bytes":556},"src/app/components/accounts/trial-balance/trial-balance.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-trial-balance',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Trial Balance</h1><mat-card><mat-card-content><p>Trial balance report generation.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class TrialBalanceComponent {}\n","size_bytes":541},"src/app/components/accounts/voucher/voucher.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\n\ninterface Voucher {\n  id: number;\n  voucherNo: string;\n  voucherType: string;\n  date: string;\n  description: string;\n  debitAccount: string;\n  creditAccount: string;\n  amount: number;\n  status: string;\n}\n\n@Component({\n  selector: 'app-voucher',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatSelectModule,\n    MatSnackBarModule\n  ],\n  template: `\n    <div class=\"page-container\">\n      <h1>Voucher Management</h1>\n      \n      <!-- Add/Edit Form -->\n      <mat-card class=\"form-card\">\n        <mat-card-header>\n          <mat-card-title>{{isEditing ? 'Edit' : 'Create'}} Voucher</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <form [formGroup]=\"voucherForm\" (ngSubmit)=\"onSubmit()\" class=\"voucher-form\">\n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Voucher No.</mat-label>\n                <input matInput formControlName=\"voucherNo\" required>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n                <mat-label>Voucher Type</mat-label>\n                <mat-select formControlName=\"voucherType\" required>\n                  <mat-option value=\"Payment\">Payment Voucher</mat-option>\n                  <mat-option value=\"Receipt\">Receipt Voucher</mat-option>\n                  <mat-option value=\"Journal\">Journal Voucher</mat-option>\n                  <mat-option value=\"Contra\">Contra Voucher</mat-option>\n                </mat-select>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n                <mat-label>Date</mat-label>\n                <input matInput formControlName=\"date\" type=\"date\" required>\n              </mat-form-field>\n            </div>\n            \n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\n                <mat-label>Description</mat-label>\n                <textarea matInput formControlName=\"description\" rows=\"2\" required></textarea>\n              </mat-form-field>\n            </div>\n            \n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Debit Account</mat-label>\n                <mat-select formControlName=\"debitAccount\" required>\n                  <mat-option value=\"Cash\">Cash</mat-option>\n                  <mat-option value=\"Bank\">Bank</mat-option>\n                  <mat-option value=\"Loan Account\">Loan Account</mat-option>\n                  <mat-option value=\"Interest Income\">Interest Income</mat-option>\n                  <mat-option value=\"Administrative Expenses\">Administrative Expenses</mat-option>\n                </mat-select>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n                <mat-label>Credit Account</mat-label>\n                <mat-select formControlName=\"creditAccount\" required>\n                  <mat-option value=\"Cash\">Cash</mat-option>\n                  <mat-option value=\"Bank\">Bank</mat-option>\n                  <mat-option value=\"Member Deposits\">Member Deposits</mat-option>\n                  <mat-option value=\"Interest Payable\">Interest Payable</mat-option>\n                  <mat-option value=\"Service Charges\">Service Charges</mat-option>\n                </mat-select>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n                <mat-label>Amount (‚Çπ)</mat-label>\n                <input matInput formControlName=\"amount\" type=\"number\" step=\"0.01\" required>\n              </mat-form-field>\n            </div>\n            \n            <div class=\"form-actions\">\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"voucherForm.invalid\">\n                {{isEditing ? 'Update' : 'Create'}} Voucher\n              </button>\n              <button mat-button type=\"button\" (click)=\"resetForm()\" *ngIf=\"isEditing\">\n                Cancel\n              </button>\n            </div>\n          </form>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Vouchers Table -->\n      <mat-card class=\"table-card\">\n        <mat-card-header>\n          <mat-card-title>Vouchers List</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <table mat-table [dataSource]=\"vouchers\" class=\"mat-elevation-z2\">\n            <ng-container matColumnDef=\"voucherNo\">\n              <th mat-header-cell *matHeaderCellDef>Voucher No.</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.voucherNo}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"voucherType\">\n              <th mat-header-cell *matHeaderCellDef>Type</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.voucherType}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"date\">\n              <th mat-header-cell *matHeaderCellDef>Date</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.date | date}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"description\">\n              <th mat-header-cell *matHeaderCellDef>Description</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.description}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"accounts\">\n              <th mat-header-cell *matHeaderCellDef>Dr/Cr Accounts</th>\n              <td mat-cell *matCellDef=\"let voucher\">\n                <div>Dr: {{voucher.debitAccount}}</div>\n                <div>Cr: {{voucher.creditAccount}}</div>\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"amount\">\n              <th mat-header-cell *matHeaderCellDef>Amount</th>\n              <td mat-cell *matCellDef=\"let voucher\">‚Çπ{{voucher.amount | number}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"status\">\n              <th mat-header-cell *matHeaderCellDef>Status</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.status}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"actions\">\n              <th mat-header-cell *matHeaderCellDef>Actions</th>\n              <td mat-cell *matCellDef=\"let voucher\">\n                <button mat-icon-button color=\"primary\" (click)=\"editVoucher(voucher)\">\n                  <mat-icon>edit</mat-icon>\n                </button>\n                <button mat-icon-button color=\"accent\" (click)=\"printVoucher(voucher)\">\n                  <mat-icon>print</mat-icon>\n                </button>\n                <button mat-icon-button color=\"warn\" (click)=\"deleteVoucher(voucher.id)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </td>\n            </ng-container>\n            \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .form-card, .table-card {\n      margin-bottom: 20px;\n    }\n    \n    .voucher-form {\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n    }\n    \n    .form-row {\n      display: flex;\n      gap: 16px;\n      align-items: flex-start;\n    }\n    \n    .form-row mat-form-field {\n      flex: 1;\n    }\n    \n    .full-width {\n      width: 100%;\n    }\n    \n    .form-actions {\n      display: flex;\n      gap: 12px;\n      margin-top: 16px;\n    }\n    \n    table {\n      width: 100%;\n    }\n  `]\n})\nexport class VoucherComponent implements OnInit {\n  voucherForm: FormGroup;\n  vouchers: Voucher[] = [];\n  isEditing = false;\n  editingId: number | null = null;\n  displayedColumns: string[] = ['voucherNo', 'voucherType', 'date', 'description', 'accounts', 'amount', 'status', 'actions'];\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {\n    this.voucherForm = this.fb.group({\n      voucherNo: ['', Validators.required],\n      voucherType: ['', Validators.required],\n      date: ['', Validators.required],\n      description: ['', Validators.required],\n      debitAccount: ['', Validators.required],\n      creditAccount: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0.01)]]\n    });\n  }\n\n  ngOnInit() {\n    this.loadSampleData();\n  }\n\n  loadSampleData() {\n    this.vouchers = [\n      {\n        id: 1,\n        voucherNo: 'PV001',\n        voucherType: 'Payment',\n        date: '2024-01-15',\n        description: 'Office rent payment for January',\n        debitAccount: 'Administrative Expenses',\n        creditAccount: 'Cash',\n        amount: 15000,\n        status: 'Posted'\n      },\n      {\n        id: 2,\n        voucherNo: 'RV001',\n        voucherType: 'Receipt',\n        date: '2024-01-16',\n        description: 'Member deposit received',\n        debitAccount: 'Cash',\n        creditAccount: 'Member Deposits',\n        amount: 25000,\n        status: 'Posted'\n      }\n    ];\n  }\n\n  onSubmit() {\n    if (this.voucherForm.valid) {\n      const formValue = this.voucherForm.value;\n      \n      if (this.isEditing && this.editingId) {\n        const index = this.vouchers.findIndex(v => v.id === this.editingId);\n        if (index !== -1) {\n          this.vouchers[index] = { ...this.vouchers[index], ...formValue };\n          this.snackBar.open('Voucher updated successfully!', 'Close', { duration: 3000 });\n        }\n      } else {\n        const newVoucher: Voucher = {\n          id: this.vouchers.length + 1,\n          ...formValue,\n          status: 'Posted'\n        };\n        this.vouchers.push(newVoucher);\n        this.snackBar.open('Voucher created successfully!', 'Close', { duration: 3000 });\n      }\n      \n      this.resetForm();\n    }\n  }\n\n  editVoucher(voucher: Voucher) {\n    this.isEditing = true;\n    this.editingId = voucher.id;\n    this.voucherForm.patchValue(voucher);\n  }\n\n  printVoucher(voucher: Voucher) {\n    this.snackBar.open(`Printing voucher: ${voucher.voucherNo}`, 'Close', { duration: 3000 });\n  }\n\n  deleteVoucher(id: number) {\n    if (confirm('Are you sure you want to delete this voucher?')) {\n      this.vouchers = this.vouchers.filter(v => v.id !== id);\n      this.snackBar.open('Voucher deleted successfully!', 'Close', { duration: 3000 });\n    }\n  }\n\n  resetForm() {\n    this.voucherForm.reset();\n    this.isEditing = false;\n    this.editingId = null;\n  }\n}\n","size_bytes":11429},"src/app/components/accounts/voucher-creation/voucher-creation.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\n\ninterface VoucherEntry {\n  particulars: string;\n  debit: number;\n  credit: number;\n  particularCode?: string;\n}\n\n@Component({\n  selector: 'app-voucher-creation',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatSnackBarModule\n  ],\n  template: `\n    <div class=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-6\">\n      <div class=\"max-w-7xl mx-auto\">\n        <!-- Header -->\n        <div class=\"mb-8\">\n          <h1 class=\"text-3xl font-bold text-gray-800 mb-2\">Voucher Creation</h1>\n          <p class=\"text-gray-600\">Create and manage accounting vouchers</p>\n        </div>\n\n        <!-- Main Form Card -->\n        <div class=\"bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden\">\n          <form [formGroup]=\"voucherForm\" class=\"p-8\">\n            \n            <!-- Top Section -->\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-100\">\n              <div>\n                <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Voucher Type</label>\n                <select formControlName=\"voucherType\" class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white\">\n                  <option value=\"\">Select Type</option>\n                  <option value=\"Payment\">Payment Voucher</option>\n                  <option value=\"Receipt\">Receipt Voucher</option>\n                  <option value=\"Journal\">Journal Voucher</option>\n                  <option value=\"Contra\">Contra Voucher</option>\n                </select>\n              </div>\n              <div>\n                <label class=\"block text-sm font-semibold text-gray-700 mb-2\">No.</label>\n                <input type=\"text\" formControlName=\"voucherNo\" \n                       class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n              </div>\n              <div>\n                <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Date</label>\n                <input type=\"date\" formControlName=\"voucherDate\" \n                       class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n              </div>\n            </div>\n\n            <!-- Voucher Table -->\n            <div class=\"mb-8\">\n              <div class=\"bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200\">\n                <h3 class=\"text-lg font-semibold text-gray-800 mb-4\">Voucher Entries</h3>\n                <div class=\"overflow-x-auto\">\n                  <table class=\"min-w-full bg-white border border-gray-300 rounded-lg overflow-hidden shadow-sm\">\n                    <thead class=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white\">\n                      <tr>\n                        <th class=\"px-6 py-4 text-left text-sm font-semibold\">Particulars</th>\n                        <th class=\"px-6 py-4 text-right text-sm font-semibold\">Debit</th>\n                        <th class=\"px-6 py-4 text-right text-sm font-semibold\">Credit</th>\n                        <th class=\"px-6 py-4 text-center text-sm font-semibold\">Action</th>\n                      </tr>\n                    </thead>\n                    <tbody class=\"divide-y divide-gray-200\">\n                      <tr *ngFor=\"let entry of voucherEntries; let i = index\" \n                          class=\"hover:bg-gray-50 transition-colors duration-150\">\n                        <td class=\"px-6 py-4 text-sm text-gray-900\">{{entry.particulars}}</td>\n                        <td class=\"px-6 py-4 text-sm text-gray-900 text-right\">\n                          {{entry.debit > 0 ? (entry.debit | number:'1.2-2') : '-'}}\n                        </td>\n                        <td class=\"px-6 py-4 text-sm text-gray-900 text-right\">\n                          {{entry.credit > 0 ? (entry.credit | number:'1.2-2') : '-'}}\n                        </td>\n                        <td class=\"px-6 py-4 text-center\">\n                          <button type=\"button\" (click)=\"removeEntry(i)\" \n                                  class=\"text-red-600 hover:text-red-800 font-medium text-sm\">\n                            Remove\n                          </button>\n                        </td>\n                      </tr>\n                      <tr *ngIf=\"voucherEntries.length === 0\">\n                        <td colspan=\"4\" class=\"px-6 py-8 text-center text-gray-500 text-sm\">\n                          No entries added yet. Use the form below to add entries.\n                        </td>\n                      </tr>\n                      <!-- Total Row -->\n                      <tr *ngIf=\"voucherEntries.length > 0\" class=\"bg-gradient-to-r from-gray-100 to-gray-200 font-semibold\">\n                        <td class=\"px-6 py-4 text-sm text-gray-900 font-bold\">Total</td>\n                        <td class=\"px-6 py-4 text-sm text-gray-900 text-right font-bold\">\n                          ‚Çπ{{getTotalDebit() | number:'1.2-2'}}\n                        </td>\n                        <td class=\"px-6 py-4 text-sm text-gray-900 text-right font-bold\">\n                          ‚Çπ{{getTotalCredit() | number:'1.2-2'}}\n                        </td>\n                        <td class=\"px-6 py-4\"></td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n\n            <!-- Entry Section -->\n            <div class=\"mb-8\">\n              <div class=\"bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl p-6 border border-green-100\">\n                <h3 class=\"text-lg font-semibold text-gray-800 mb-4\">Add New Entry</h3>\n                <div [formGroup]=\"entryForm\" class=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Db/Cr</label>\n                    <select formControlName=\"type\" class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white\">\n                      <option value=\"\">Select</option>\n                      <option value=\"debit\">Debit</option>\n                      <option value=\"credit\">Credit</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Particulars</label>\n                    <input type=\"text\" formControlName=\"particulars\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                           placeholder=\"Enter particulars\">\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Amount</label>\n                    <input type=\"number\" formControlName=\"amount\" step=\"0.01\"\n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                           placeholder=\"0.00\">\n                  </div>\n                  <div class=\"flex items-end gap-2\">\n                    <button type=\"button\" (click)=\"addEntry()\" \n                            class=\"flex-1 bg-gradient-to-r from-green-600 to-emerald-600 text-white px-6 py-3 rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 font-medium\">\n                      Add\n                    </button>\n                    <button type=\"button\" (click)=\"clearEntry()\" \n                            class=\"flex-1 bg-gradient-to-r from-gray-500 to-gray-600 text-white px-6 py-3 rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all duration-200 font-medium\">\n                      Clear\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Bottom Section -->\n            <div class=\"mb-8\">\n              <div class=\"bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-6 border border-purple-100\">\n                <h3 class=\"text-lg font-semibold text-gray-800 mb-4\">Additional Details</h3>\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Ch No.</label>\n                    <input type=\"text\" formControlName=\"chequeNo\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                           placeholder=\"Cheque Number\">\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Date</label>\n                    <input type=\"date\" formControlName=\"chequeDate\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\">\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Pass Date</label>\n                    <input type=\"date\" formControlName=\"passDate\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\">\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-6\">\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Narration</label>\n                    <textarea formControlName=\"narration\" rows=\"4\"\n                              class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                              placeholder=\"Enter narration...\"></textarea>\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Remarks</label>\n                    <textarea formControlName=\"remarks\" rows=\"4\"\n                              class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                              placeholder=\"Enter remarks...\"></textarea>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Balance Check Warning -->\n            <div *ngIf=\"!isBalanced()\" class=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <div class=\"flex items-center\">\n                <svg class=\"w-5 h-5 text-red-500 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"></path>\n                </svg>\n                <span class=\"text-red-700 font-medium\">Warning: Debit and Credit totals don't match! \n                  Difference: ‚Çπ{{Math.abs(getTotalDebit() - getTotalCredit()) | number:'1.2-2'}}</span>\n              </div>\n            </div>\n\n            <!-- Footer Buttons -->\n            <div class=\"flex flex-wrap gap-4 justify-center pt-6 border-t border-gray-200\">\n              <button type=\"button\" (click)=\"reverseVoucher()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-lg hover:from-orange-600 hover:to-red-600 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Reverse\n              </button>\n              <button type=\"button\" (click)=\"saveVoucher()\" [disabled]=\"!isBalanced()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Save\n              </button>\n              <button type=\"button\" (click)=\"printVoucher()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Print\n              </button>\n              <button type=\"button\" (click)=\"deleteVoucher()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-red-600 to-pink-600 text-white rounded-lg hover:from-red-700 hover:to-pink-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Delete\n              </button>\n              <button type=\"button\" (click)=\"newVoucher()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                New\n              </button>\n              <button type=\"button\" (click)=\"closeForm()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-lg hover:from-gray-700 hover:to-gray-800 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Close\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .table-container {\n      overflow-x: auto;\n    }\n    \n    @media (max-width: 768px) {\n      .grid-cols-3 {\n        grid-template-columns: 1fr;\n      }\n      .grid-cols-4 {\n        grid-template-columns: 1fr;\n      }\n    }\n  `]\n})\nexport class VoucherCreationComponent implements OnInit {\n  voucherForm: FormGroup;\n  entryForm: FormGroup;\n  voucherEntries: VoucherEntry[] = [];\n  Math = Math;\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {\n    this.voucherForm = this.createVoucherForm();\n    this.entryForm = this.createEntryForm();\n  }\n\n  ngOnInit() {\n    // Set default date to current date\n    const today = new Date().toISOString().split('T')[0];\n    this.voucherForm.patchValue({\n      voucherDate: today,\n      chequeDate: today,\n      passDate: today\n    });\n  }\n\n  createVoucherForm(): FormGroup {\n    return this.fb.group({\n      voucherType: ['', Validators.required],\n      voucherNo: ['', Validators.required],\n      voucherDate: ['', Validators.required],\n      chequeNo: [''],\n      chequeDate: [''],\n      passDate: [''],\n      narration: [''],\n      remarks: ['']\n    });\n  }\n\n  createEntryForm(): FormGroup {\n    return this.fb.group({\n      type: ['', Validators.required],\n      particulars: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0.01)]]\n    });\n  }\n\n  addEntry() {\n    if (this.entryForm.valid) {\n      const formValue = this.entryForm.value;\n      const entry: VoucherEntry = {\n        particulars: formValue.particulars,\n        debit: formValue.type === 'debit' ? parseFloat(formValue.amount) : 0,\n        credit: formValue.type === 'credit' ? parseFloat(formValue.amount) : 0\n      };\n\n      this.voucherEntries.push(entry);\n      this.clearEntry();\n      this.snackBar.open('Entry added successfully!', 'Close', { duration: 2000 });\n    } else {\n      this.snackBar.open('Please fill all required fields', 'Close', { duration: 3000 });\n    }\n  }\n\n  removeEntry(index: number) {\n    this.voucherEntries.splice(index, 1);\n    this.snackBar.open('Entry removed', 'Close', { duration: 2000 });\n  }\n\n  clearEntry() {\n    this.entryForm.reset();\n  }\n\n  getTotalDebit(): number {\n    return this.voucherEntries.reduce((sum, entry) => sum + entry.debit, 0);\n  }\n\n  getTotalCredit(): number {\n    return this.voucherEntries.reduce((sum, entry) => sum + entry.credit, 0);\n  }\n\n  isBalanced(): boolean {\n    return this.getTotalDebit() === this.getTotalCredit() && this.voucherEntries.length > 0;\n  }\n\n  reverseVoucher() {\n    this.voucherEntries.forEach(entry => {\n      const temp = entry.debit;\n      entry.debit = entry.credit;\n      entry.credit = temp;\n    });\n    this.snackBar.open('Voucher entries reversed!', 'Close', { duration: 2000 });\n  }\n\n  saveVoucher() {\n    if (this.voucherForm.valid && this.isBalanced()) {\n      const voucherData = {\n        ...this.voucherForm.value,\n        entries: this.voucherEntries,\n        totalDebit: this.getTotalDebit(),\n        totalCredit: this.getTotalCredit()\n      };\n      console.log('Saving voucher:', voucherData);\n      this.snackBar.open('Voucher saved successfully!', 'Close', { duration: 3000 });\n    } else {\n      this.snackBar.open('Please complete the form and ensure entries are balanced', 'Close', { duration: 3000 });\n    }\n  }\n\n  printVoucher() {\n    window.print();\n    this.snackBar.open('Print dialog opened', 'Close', { duration: 2000 });\n  }\n\n  deleteVoucher() {\n    if (confirm('Are you sure you want to delete this voucher?')) {\n      this.newVoucher();\n      this.snackBar.open('Voucher deleted', 'Close', { duration: 2000 });\n    }\n  }\n\n  newVoucher() {\n    this.voucherForm.reset();\n    this.entryForm.reset();\n    this.voucherEntries = [];\n    const today = new Date().toISOString().split('T')[0];\n    this.voucherForm.patchValue({\n      voucherDate: today,\n      chequeDate: today,\n      passDate: today\n    });\n    this.snackBar.open('New voucher form ready', 'Close', { duration: 2000 });\n  }\n\n  closeForm() {\n    if (confirm('Are you sure you want to close? Any unsaved changes will be lost.')) {\n      // Implement navigation logic here\n      this.snackBar.open('Form closed', 'Close', { duration: 2000 });\n    }\n  }\n}\n","size_bytes":18008},"src/app/components/auth/login/login.component.ts":{"content":"\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { AuthService } from '../../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule\r\n  ],\r\n  template: `\r\n    <div class=\"min-h-screen bg-gradient-to-br from-primary-500 via-primary-600 to-primary-700 flex items-center justify-center p-4\">\r\n      <div class=\"w-full max-w-md\">\r\n        <!-- Logo and Title -->\r\n        <div class=\"text-center mb-8\">\r\n          <div class=\"inline-flex items-center justify-center w-16 h-16 bg-white rounded-full shadow-lg mb-4\">\r\n            <mat-icon class=\"text-3xl text-primary-600\">account_balance</mat-icon>\r\n          </div>\r\n          <h1 class=\"text-3xl font-bold text-white mb-2\">Financial Management System</h1>\r\n          <p class=\"text-primary-100\">Sign in to access your account</p>\r\n        </div>\r\n\r\n        <!-- Login Form -->\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-8\">\r\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"space-y-6\">\r\n            <!-- Username Field -->\r\n            <div>\r\n              <label for=\"username\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Username\r\n              </label>\r\n              <div class=\"relative\">\r\n                <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                  <mat-icon class=\"text-gray-400\">person</mat-icon>\r\n                </div>\r\n                <input\r\n                  id=\"username\"\r\n                  type=\"text\"\r\n                  formControlName=\"username\"\r\n                  placeholder=\"Enter your username\"\r\n                  class=\"w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white transition-colors duration-200\"\r\n                  [class.border-red-500]=\"loginForm.get('username')?.invalid && loginForm.get('username')?.touched\"\r\n                >\r\n              </div>\r\n              <div *ngIf=\"loginForm.get('username')?.invalid && loginForm.get('username')?.touched\" \r\n                   class=\"mt-1 text-sm text-red-600 dark:text-red-400\">\r\n                Username is required\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Password Field -->\r\n            <div>\r\n              <label for=\"password\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Password\r\n              </label>\r\n              <div class=\"relative\">\r\n                <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                  <mat-icon class=\"text-gray-400\">lock</mat-icon>\r\n                </div>\r\n                <input\r\n                  id=\"password\"\r\n                  [type]=\"showPassword ? 'text' : 'password'\"\r\n                  formControlName=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  class=\"w-full pl-10 pr-12 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white transition-colors duration-200\"\r\n                  [class.border-red-500]=\"loginForm.get('password')?.invalid && loginForm.get('password')?.touched\"\r\n                >\r\n                <button\r\n                  type=\"button\"\r\n                  (click)=\"togglePasswordVisibility()\"\r\n                  class=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                >\r\n                  <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"loginForm.get('password')?.invalid && loginForm.get('password')?.touched\" \r\n                   class=\"mt-1 text-sm text-red-600 dark:text-red-400\">\r\n                Password is required\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Login Button -->\r\n            <button\r\n              type=\"submit\"\r\n              [disabled]=\"loginForm.invalid || loading\"\r\n              class=\"w-full flex items-center justify-center px-4 py-3 bg-primary-600 hover:bg-primary-700 disabled:bg-gray-400 text-white font-medium rounded-lg shadow-sm transition-colors duration-200\"\r\n            >\r\n              <mat-spinner *ngIf=\"loading\" diameter=\"20\" class=\"mr-2\"></mat-spinner>\r\n              <span>{{ loading ? 'Signing in...' : 'Sign In' }}</span>\r\n            </button>\r\n          </form>\r\n\r\n          <!-- Demo Accounts -->\r\n          <div class=\"mt-8 pt-6 border-t border-gray-200 dark:border-gray-600\">\r\n            <h3 class=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">Demo Accounts</h3>\r\n            <div class=\"grid grid-cols-1 gap-2\">\r\n              <button\r\n                *ngFor=\"let account of demoAccounts\"\r\n                (click)=\"loginWithDemo(account.username)\"\r\n                class=\"flex items-center justify-between p-3 text-left bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg transition-colors duration-200\"\r\n              >\r\n                <div>\r\n                  <div class=\"text-sm font-medium text-gray-900 dark:text-white\">{{ account.role }}</div>\r\n                  <div class=\"text-xs text-gray-500 dark:text-gray-400\">{{ account.username }}</div>\r\n                </div>\r\n                <mat-icon class=\"text-gray-400\">arrow_forward</mat-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Footer -->\r\n        <div class=\"text-center mt-8\">\r\n          <p class=\"text-sm text-primary-100\">\r\n            Secure financial management for your society\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .mat-mdc-progress-spinner {\r\n      --mdc-circular-progress-active-indicator-color: white;\r\n    }\r\n  `]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  loading = false;\r\n  showPassword = false;\r\n  returnUrl: string = '/dashboard';\r\n\r\n  demoAccounts = [\r\n    { role: 'Super Admin', username: 'superadmin' },\r\n    { role: 'Society Admin', username: 'societyadmin' },\r\n    { role: 'Accountant', username: 'accountant1' },\r\n    { role: 'Member', username: 'member1' }\r\n  ];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\r\n\r\n    // Redirect if already logged in\r\n    if (this.authService.getCurrentUser()) {\r\n      this.router.navigate([this.returnUrl]);\r\n    }\r\n  }\r\n\r\n  togglePasswordVisibility() {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n\r\n  loginWithDemo(username: string) {\r\n    console.log(username)\r\n    this.loginForm.patchValue({\r\n      username: username,\r\n      password: 'password'\r\n    });\r\n    this.onSubmit();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.loginForm.invalid) return;\r\n\r\n    this.loading = true;\r\n    const { username, password } = this.loginForm.value;\r\n    console.log('username == ', username)\r\n    console.log('password == ', password)\r\n    this.authService.login(username, password).subscribe({\r\n      next: (success:any) => {\r\n        this.loading = false;\r\n        if (success) {\r\n          const user = this.authService.getCurrentUser();\r\n          this.snackBar.open(`Welcome ${user?.firstName} ${user?.lastName}!`, 'Close', {\r\n            duration: 3000,\r\n            panelClass: ['success-snackbar']\r\n          });\r\n          this.router.navigate([this.returnUrl]);\r\n        } else {\r\n          this.snackBar.open('Invalid username or password', 'Close', {\r\n            duration: 3000,\r\n            panelClass: ['error-snackbar']\r\n          });\r\n        }\r\n      },\r\n      error: () => {\r\n        this.loading = false;\r\n        this.snackBar.open('Login failed. Please try again.', 'Close', {\r\n          duration: 3000,\r\n          panelClass: ['error-snackbar']\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","size_bytes":9054},"src/app/components/file/create-new-year/create-new-year.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-create-new-year',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Create New Year</h1><mat-card><mat-card-content><p>Create new financial year.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class CreateNewYearComponent {}\n","size_bytes":540},"src/app/components/file/edit-opening-balance/edit-opening-balance.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-edit-opening-balance',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Edit Opening Balance</h1><mat-card><mat-card-content><p>Edit opening balance for accounts.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class EditOpeningBalanceComponent {}\n","size_bytes":563},"src/app/components/file/society/society.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatBadgeModule } from '@angular/material/badge';\n\ninterface SocietyData {\n  id: string;\n  name: string;\n  registrationNo: string;\n  address: string;\n  city: string;\n  phone: string;\n  fax?: string;\n  email: string;\n  website?: string;\n  interests: {\n    dividend: number;\n    od: number;\n    cd: number;\n    loan: number;\n    emergencyLoan: number;\n    las: number;\n  };\n  limits: {\n    share: number;\n    loan: number;\n    emergencyLoan: number;\n  };\n  chBounceCharge: number;\n  chequeReturnCharge: string;\n  cash: number;\n  bonus: number;\n}\n\ninterface ApprovalRequest {\n  id: string;\n  societyId: string;\n  requestedBy: string;\n  requestedAt: Date;\n  changes: any;\n  approvals: {\n    userId: string;\n    userName: string;\n    approved: boolean;\n    approvedAt?: Date;\n    comments?: string;\n  }[];\n  totalRequired: number;\n  status: 'pending' | 'approved' | 'rejected';\n}\n\ninterface User {\n  id: string;\n  name: string;\n  role: string;\n}\n\n@Component({\n  selector: 'app-society',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDividerModule,\n    MatProgressBarModule,\n    MatChipsModule,\n    MatBadgeModule\n  ],\n  template: `\n    <div class=\"animate-fade-in\">\n      <!-- Page Header -->\n      <div class=\"content-header\">\n        <div class=\"breadcrumb\">\n          <span>File</span>\n          <mat-icon class=\"breadcrumb-separator\">chevron_right</mat-icon>\n          <span class=\"breadcrumb-active\">Society</span>\n        </div>\n        <h1 class=\"text-page-title\">Society Management</h1>\n        <p class=\"text-body text-gray-600 dark:text-gray-400\">Manage society information, interest rates, and limits</p>\n      </div>\n\n      <!-- Pending Approval Alert -->\n      <div *ngIf=\"pendingRequest\" class=\"card mb-6 border-l-4 border-l-orange-400\">\n        <div class=\"card-header bg-gradient-to-r from-orange-500 to-red-500\">\n          <div class=\"card-title\">\n            <mat-icon>pending_actions</mat-icon>\n            <span>Pending Approval Request</span>\n          </div>\n          <div class=\"flex items-center gap-2 text-sm\">\n            <mat-icon class=\"text-lg\">schedule</mat-icon>\n            <span>{{ pendingRequest.requestedAt | date:'short' }}</span>\n          </div>\n        </div>\n        <div class=\"card-content\">\n          <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-4\">\n            <!-- Request Info -->\n            <div>\n              <h4 class=\"text-section-header mb-3\">Request Details</h4>\n              <div class=\"space-y-2 text-body\">\n                <div class=\"flex justify-between\">\n                  <span class=\"text-gray-600\">Requested by:</span>\n                  <span class=\"font-medium\">{{ pendingRequest.requestedBy }}</span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-gray-600\">Status:</span>\n                  <span class=\"badge badge-warning\">{{ pendingRequest.status | titlecase }}</span>\n                </div>\n              </div>\n            </div>\n\n            <!-- Approval Progress -->\n            <div>\n              <h4 class=\"text-section-header mb-3\">Approval Progress</h4>\n              <div class=\"space-y-3\">\n                <div class=\"flex justify-between text-body\">\n                  <span>{{ getApprovedCount() }} of {{ pendingRequest.totalRequired }} approved</span>\n                  <span class=\"font-medium\">{{ getApprovalProgress() | number:'1.0-0' }}%</span>\n                </div>\n                <div class=\"w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700\">\n                  <div \n                    class=\"bg-gradient-to-r from-green-500 to-emerald-500 h-2 rounded-full transition-all duration-300\"\n                    [style.width.%]=\"getApprovalProgress()\">\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Quick Actions -->\n            <div>\n              <h4 class=\"text-section-header mb-3\">Actions</h4>\n              <div class=\"space-y-2\">\n                <button \n                  *ngIf=\"canApprove()\" \n                  (click)=\"openApprovalDialog()\"\n                  class=\"btn btn-success btn-sm w-full\">\n                  <mat-icon class=\"text-sm\">check_circle</mat-icon>\n                  Approve Changes\n                </button>\n                <button class=\"btn btn-outline btn-sm w-full\">\n                  <mat-icon class=\"text-sm\">visibility</mat-icon>\n                  View Changes\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <!-- Approval Status List -->\n          <div class=\"border-t pt-4\">\n            <h4 class=\"text-section-header mb-3\">Approval Status</h4>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n              <div *ngFor=\"let approval of pendingRequest.approvals\" \n                   class=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <div class=\"flex items-center gap-3\">\n                  <mat-icon [class]=\"approval.approved ? 'text-green-500' : 'text-gray-400'\">\n                    {{ approval.approved ? 'check_circle' : 'schedule' }}\n                  </mat-icon>\n                  <div>\n                    <p class=\"font-medium text-sm\">{{ approval.userName }}</p>\n                    <p class=\"text-xs text-gray-500\">\n                      {{ approval.approved ? (approval.approvedAt | date:'short') : 'Pending' }}\n                    </p>\n                  </div>\n                </div>\n                <span [class]=\"approval.approved ? 'badge badge-success' : 'badge badge-secondary'\">\n                  {{ approval.approved ? 'Approved' : 'Pending' }}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Main Society Form -->\n      <form [formGroup]=\"societyForm\" class=\"form-container\">\n        \n        <!-- Basic Information Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>business</mat-icon>\n            <span>Basic Information</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-2\">\n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Society Name</label>\n                <input \n                  type=\"text\" \n                  class=\"form-input\"\n                  formControlName=\"name\"\n                  placeholder=\"Enter society name\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Registration Number</label>\n                <input \n                  type=\"text\" \n                  class=\"form-input\"\n                  formControlName=\"registrationNo\"\n                  placeholder=\"Enter registration number\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Address</label>\n                <textarea \n                  class=\"form-textarea\"\n                  formControlName=\"address\"\n                  placeholder=\"Enter complete address\"\n                  [readonly]=\"!isEditing\"\n                  rows=\"3\"></textarea>\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">City</label>\n                <input \n                  type=\"text\" \n                  class=\"form-input\"\n                  formControlName=\"city\"\n                  placeholder=\"Enter city name\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Contact Information Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>contact_phone</mat-icon>\n            <span>Contact Information</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-2\">\n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Phone</label>\n                <input \n                  type=\"tel\" \n                  class=\"form-input\"\n                  formControlName=\"phone\"\n                  placeholder=\"+91 9876543210\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Fax</label>\n                <input \n                  type=\"tel\" \n                  class=\"form-input\"\n                  formControlName=\"fax\"\n                  placeholder=\"+91 2234567890\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Email</label>\n                <input \n                  type=\"email\" \n                  class=\"form-input\"\n                  formControlName=\"email\"\n                  placeholder=\"info@society.com\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Website</label>\n                <input \n                  type=\"url\" \n                  class=\"form-input\"\n                  formControlName=\"website\"\n                  placeholder=\"www.society.com\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Interest Rates Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>trending_up</mat-icon>\n            <span>Interest Rates (%)</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-3\">\n              <div class=\"form-field\">\n                <label class=\"form-label\">Dividend</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"dividend\"\n                  placeholder=\"8.5\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Overdraft (OD)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"od\"\n                  placeholder=\"12.0\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Current Deposit (CD)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"cd\"\n                  placeholder=\"6.5\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Loan</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"loan\"\n                  placeholder=\"10.0\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Emergency Loan</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"emergencyLoan\"\n                  placeholder=\"15.0\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">LAS</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"las\"\n                  placeholder=\"7.5\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Financial Limits Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>account_balance</mat-icon>\n            <span>Financial Limits</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-3\">\n              <div class=\"form-field\">\n                <label class=\"form-label\">Share Limit (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"shareLimit\"\n                  placeholder=\"500000\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Loan Limit (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"loanLimit\"\n                  placeholder=\"1000000\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Emergency Loan Limit (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"emergencyLoanLimit\"\n                  placeholder=\"200000\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Additional Settings Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>settings</mat-icon>\n            <span>Additional Settings</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-4\">\n              <div class=\"form-field\">\n                <label class=\"form-label\">Cheque Bounce Charge (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"chBounceCharge\"\n                  placeholder=\"500\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Cheque Return Charge</label>\n                <select class=\"form-select\" formControlName=\"chequeReturnCharge\" [disabled]=\"!isEditing\">\n                  <option value=\"fixed\">Fixed Amount</option>\n                  <option value=\"percentage\">Percentage</option>\n                </select>\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Cash (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"cash\"\n                  placeholder=\"1000\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Bonus (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"bonus\"\n                  placeholder=\"2500\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Form Actions -->\n        <div class=\"card-actions\">\n          <div class=\"flex justify-end gap-3\">\n            <button \n              *ngIf=\"!isEditing\" \n              type=\"button\"\n              (click)=\"enableEdit()\"\n              class=\"btn btn-primary\">\n              <mat-icon>edit</mat-icon>\n              Edit Society Details\n            </button>\n            \n            <div *ngIf=\"isEditing\" class=\"flex gap-3\">\n              <button \n                type=\"button\"\n                (click)=\"cancelEdit()\"\n                class=\"btn btn-secondary\">\n                <mat-icon>close</mat-icon>\n                Cancel\n              </button>\n              <button \n                type=\"button\"\n                (click)=\"saveChanges()\"\n                [disabled]=\"societyForm.invalid\"\n                class=\"btn btn-success\">\n                <mat-icon>save</mat-icon>\n                Save Changes\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  `,\n  styles: [`\n    .content-header {\n      margin-bottom: 2rem;\n      padding-bottom: 1rem;\n      border-bottom: 1px solid var(--color-border-primary);\n    }\n\n    .breadcrumb {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n      font-size: 0.875rem;\n      color: var(--color-text-muted);\n    }\n\n    .breadcrumb-separator {\n      font-size: 1rem;\n      color: var(--color-text-light);\n    }\n\n    .breadcrumb-active {\n      color: var(--color-text-primary);\n      font-weight: 500;\n    }\n\n    .border-l-4 {\n      border-left-width: 4px;\n    }\n\n    .border-l-orange-400 {\n      border-left-color: #fb923c;\n    }\n\n    .grid {\n      display: grid;\n    }\n\n    .grid-cols-1 {\n      grid-template-columns: repeat(1, minmax(0, 1fr));\n    }\n\n    .grid-cols-2 {\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n    }\n\n    .grid-cols-3 {\n      grid-template-columns: repeat(3, minmax(0, 1fr));\n    }\n\n    @media (min-width: 768px) {\n      .md\\\\:grid-cols-2 {\n        grid-template-columns: repeat(2, minmax(0, 1fr));\n      }\n    }\n\n    @media (min-width: 1024px) {\n      .lg\\\\:grid-cols-3 {\n        grid-template-columns: repeat(3, minmax(0, 1fr));\n      }\n    }\n\n    .gap-2 { gap: 0.5rem; }\n    .gap-3 { gap: 0.75rem; }\n    .gap-4 { gap: 1rem; }\n    .gap-6 { gap: 1.5rem; }\n\n    .space-y-2 > * + * { margin-top: 0.5rem; }\n    .space-y-3 > * + * { margin-top: 0.75rem; }\n\n    .mb-3 { margin-bottom: 0.75rem; }\n    .mb-4 { margin-bottom: 1rem; }\n    .mb-6 { margin-bottom: 1.5rem; }\n\n    .p-3 { padding: 0.75rem; }\n    .pt-4 { padding-top: 1rem; }\n\n    .w-full { width: 100%; }\n    .h-2 { height: 0.5rem; }\n\n    .bg-gray-50 { background-color: #f9fafb; }\n    .bg-gray-200 { background-color: #e5e7eb; }\n\n    .dark .bg-gray-700 { background-color: #374151; }\n    .dark .bg-gray-800 { background-color: #1f2937; }\n\n    .rounded-full { border-radius: 9999px; }\n    .rounded-lg { border-radius: 0.5rem; }\n\n    .text-xs { font-size: 0.75rem; }\n    .text-sm { font-size: 0.875rem; }\n    .text-lg { font-size: 1.125rem; }\n\n    .font-medium { font-weight: 500; }\n\n    .text-gray-400 { color: #9ca3af; }\n    .text-gray-500 { color: #6b7280; }\n    .text-gray-600 { color: #4b5563; }\n    .text-green-500 { color: #10b981; }\n\n    .transition-all { transition-property: all; }\n    .duration-300 { transition-duration: 300ms; }\n\n    .flex { display: flex; }\n    .items-center { align-items: center; }\n    .justify-between { justify-content: space-between; }\n    .justify-end { justify-content: flex-end; }\n\n    .border-t { border-top: 1px solid var(--color-border-primary); }\n  `]\n})\nexport class SocietyComponent implements OnInit {\n  societyForm: FormGroup;\n  isEditing = false;\n  societyData: SocietyData | null = null;\n  pendingRequest: ApprovalRequest | null = null;\n  currentUser = { id: 'user1', name: 'John Doe', role: 'society_admin' };\n  \n  // Mock users who need to approve\n  approvalUsers: User[] = [\n    { id: 'user1', name: 'John Doe', role: 'society_admin' },\n    { id: 'user2', name: 'Jane Smith', role: 'society_admin' },\n    { id: 'user3', name: 'Bob Wilson', role: 'super_admin' }\n  ];\n\n  constructor(\n    private fb: FormBuilder,\n    private dialog: MatDialog\n  ) {\n    this.societyForm = this.createForm();\n  }\n\n  ngOnInit() {\n    this.loadSocietyData();\n    this.loadPendingRequest();\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      name: ['', Validators.required],\n      registrationNo: ['', Validators.required],\n      address: ['', Validators.required],\n      city: ['', Validators.required],\n      phone: ['', Validators.required],\n      fax: [''],\n      email: ['', [Validators.required, Validators.email]],\n      website: [''],\n      dividend: [0, [Validators.min(0), Validators.max(100)]],\n      od: [0, [Validators.min(0), Validators.max(100)]],\n      cd: [0, [Validators.min(0), Validators.max(100)]],\n      loan: [0, [Validators.min(0), Validators.max(100)]],\n      emergencyLoan: [0, [Validators.min(0), Validators.max(100)]],\n      las: [0, [Validators.min(0), Validators.max(100)]],\n      shareLimit: [0, Validators.min(0)],\n      loanLimit: [0, Validators.min(0)],\n      emergencyLoanLimit: [0, Validators.min(0)],\n      chBounceCharge: [0, Validators.min(0)],\n      chequeReturnCharge: ['fixed'],\n      cash: [0, Validators.min(0)],\n      bonus: [0, Validators.min(0)]\n    });\n  }\n\n  loadSocietyData() {\n    // Mock data - replace with actual API call\n    this.societyData = {\n      id: 'society1',\n      name: 'ABC Housing Society',\n      address: '123 Main Street, Downtown',\n      city: 'Mumbai',\n      phone: '+91 9876543210',\n      fax: '+91 2234567890',\n      email: 'info@abcsociety.com',\n      website: 'www.abcsociety.com',\n      registrationNo: 'REG123456789',\n      interests: {\n        dividend: 8.5,\n        od: 12.0,\n        cd: 6.5,\n        loan: 10.0,\n        emergencyLoan: 15.0,\n        las: 7.5\n      },\n      limits: {\n        share: 500000,\n        loan: 1000000,\n        emergencyLoan: 200000\n      },\n      chBounceCharge: 500,\n      chequeReturnCharge: 'fixed',\n      cash: 1000,\n      bonus: 2500\n    };\n\n    this.populateForm();\n  }\n\n  loadPendingRequest() {\n    // Mock pending request - replace with actual API call\n    this.pendingRequest = {\n      id: 'req1',\n      societyId: 'society1',\n      requestedBy: 'John Doe',\n      requestedAt: new Date(),\n      changes: {\n        name: 'ABC Premium Housing Society',\n        interests: { dividend: 9.0, od: 12.0, cd: 7.0, loan: 10.5, emergencyLoan: 15.5, las: 8.0 }\n      },\n      approvals: [\n        { userId: 'user1', userName: 'John Doe', approved: true, approvedAt: new Date() },\n        { userId: 'user2', userName: 'Jane Smith', approved: false },\n        { userId: 'user3', userName: 'Bob Wilson', approved: false }\n      ],\n      totalRequired: 3,\n      status: 'pending'\n    };\n  }\n\n  populateForm() {\n    if (this.societyData) {\n      this.societyForm.patchValue({\n        name: this.societyData.name,\n        registrationNo: this.societyData.registrationNo,\n        address: this.societyData.address,\n        city: this.societyData.city,\n        phone: this.societyData.phone,\n        fax: this.societyData.fax,\n        email: this.societyData.email,\n        website: this.societyData.website,\n        dividend: this.societyData.interests.dividend,\n        od: this.societyData.interests.od,\n        cd: this.societyData.interests.cd,\n        loan: this.societyData.interests.loan,\n        emergencyLoan: this.societyData.interests.emergencyLoan,\n        las: this.societyData.interests.las,\n        shareLimit: this.societyData.limits.share,\n        loanLimit: this.societyData.limits.loan,\n        emergencyLoanLimit: this.societyData.limits.emergencyLoan,\n        chBounceCharge: this.societyData.chBounceCharge,\n        chequeReturnCharge: this.societyData.chequeReturnCharge,\n        cash: this.societyData.cash,\n        bonus: this.societyData.bonus\n      });\n    }\n  }\n\n  enableEdit() {\n    this.isEditing = true;\n  }\n\n  cancelEdit() {\n    this.isEditing = false;\n    this.populateForm(); // Reset form to original values\n  }\n\n  saveChanges() {\n    if (this.societyForm.valid) {\n      // Create approval request\n      const changes = this.societyForm.value;\n      \n      // Simulate creating a new approval request\n      this.pendingRequest = {\n        id: 'req' + Date.now(),\n        societyId: 'society1',\n        requestedBy: this.currentUser.name,\n        requestedAt: new Date(),\n        changes: changes,\n        approvals: this.approvalUsers.map(user => ({\n          userId: user.id,\n          userName: user.name,\n          approved: false\n        })),\n        totalRequired: this.approvalUsers.length,\n        status: 'pending'\n      };\n\n      this.isEditing = false;\n      \n      // Show success message\n      console.log('Changes saved and sent for approval');\n    }\n  }\n\n  getApprovedCount(): number {\n    return this.pendingRequest?.approvals.filter(a => a.approved).length || 0;\n  }\n\n  getPendingCount(): number {\n    return this.pendingRequest?.approvals.filter(a => !a.approved).length || 0;\n  }\n\n  getApprovalProgress(): number {\n    if (!this.pendingRequest) return 0;\n    return (this.getApprovedCount() / this.pendingRequest.totalRequired) * 100;\n  }\n\n  canApprove(): boolean {\n    if (!this.pendingRequest) return false;\n    const userApproval = this.pendingRequest.approvals.find(a => a.userId === this.currentUser.id);\n    return userApproval ? !userApproval.approved : false;\n  }\n\n  openApprovalDialog() {\n    // Implementation for approval dialog\n    console.log('Opening approval dialog...');\n  }\n\n  approveChanges(comments?: string) {\n    if (!this.pendingRequest) return;\n\n    const userApproval = this.pendingRequest.approvals.find(a => a.userId === this.currentUser.id);\n    if (userApproval) {\n      userApproval.approved = true;\n      userApproval.approvedAt = new Date();\n      userApproval.comments = comments;\n\n      // Check if all approvals are complete\n      const allApproved = this.pendingRequest.approvals.every(a => a.approved);\n      if (allApproved) {\n        // Apply changes to society data\n        this.applyPendingChanges();\n        this.pendingRequest = null;\n      }\n    }\n  }\n\n  applyPendingChanges() {\n    if (!this.pendingRequest || !this.societyData) return;\n\n    // Merge pending changes with society data\n    Object.assign(this.societyData, this.pendingRequest.changes);\n    this.populateForm();\n    \n    console.log('All approvals complete. Changes applied successfully!');\n  }\n}\n","size_bytes":27539},"src/app/components/master/deposit-scheme/deposit-scheme.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\n\ninterface DepositScheme {\n  id: string;\n  name: string;\n  interestRate: number;\n  tenure: number;\n  tenureType: string;\n  minAmount: number;\n  maxAmount: number;\n  status: string;\n}\n\n@Component({\n  selector: 'app-deposit-scheme',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatChipsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatTableModule,\n    MatIconModule\n  ],\n  template: `\n    <div class=\"page-container p-6 space-y-6\">\n      <!-- Header -->\n      <div class=\"relative overflow-hidden rounded-2xl p-6 bg-gradient-to-br from-green-600 via-emerald-600 to-teal-600 text-white shadow-xl\">\n        <div class=\"absolute inset-0 bg-black/10\"></div>\n        <div class=\"relative z-10\">\n          <div class=\"flex items-center space-x-4\">\n            <div class=\"p-3 bg-white/20 rounded-full backdrop-blur-sm\">\n              <mat-icon class=\"text-2xl\">account_balance</mat-icon>\n            </div>\n            <div>\n              <h1 class=\"text-2xl font-bold\">Deposit Scheme Management</h1>\n              <p class=\"text-emerald-100 text-sm\">Configure deposit schemes and interest rates</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Form Section -->\n      <div class=\"form-section\">\n        <div class=\"form-section-header\">\n          <div class=\"flex items-center\">\n            <mat-icon class=\"mr-2\">add_circle</mat-icon>\n            {{isEditing ? 'Edit' : 'Add New'}} Deposit Scheme\n          </div>\n        </div>\n        <div class=\"form-section-content\">\n          <form [formGroup]=\"schemeForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Scheme Name</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"name\" placeholder=\"Enter scheme name\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('name')?.errors?.['required'] && schemeForm.get('name')?.touched\">\n                  Scheme name is required\n                </div>\n              </div>\n              \n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Interest Rate (%)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"interestRate\" type=\"number\" step=\"0.01\" placeholder=\"0.00\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('interestRate')?.errors?.['required'] && schemeForm.get('interestRate')?.touched\">\n                  Interest rate is required\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Tenure</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"tenure\" type=\"number\" placeholder=\"0\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('tenure')?.errors?.['required'] && schemeForm.get('tenure')?.touched\">\n                  Tenure is required\n                </div>\n              </div>\n              \n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Tenure Type</label>\n                <mat-form-field appearance=\"outline\">\n                  <mat-select formControlName=\"tenureType\">\n                    <mat-option value=\"months\">Months</mat-option>\n                    <mat-option value=\"years\">Years</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('tenureType')?.errors?.['required'] && schemeForm.get('tenureType')?.touched\">\n                  Tenure type is required\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Minimum Amount (‚Çπ)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"minAmount\" type=\"number\" placeholder=\"0\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('minAmount')?.errors?.['required'] && schemeForm.get('minAmount')?.touched\">\n                  Minimum amount is required\n                </div>\n              </div>\n              \n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Maximum Amount (‚Çπ)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"maxAmount\" type=\"number\" placeholder=\"0\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('maxAmount')?.errors?.['required'] && schemeForm.get('maxAmount')?.touched\">\n                  Maximum amount is required\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"form-field-group\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Status</label>\n                <mat-form-field appearance=\"outline\">\n                  <mat-select formControlName=\"status\">\n                    <mat-option value=\"Active\">Active</mat-option>\n                    <mat-option value=\"Inactive\">Inactive</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('status')?.errors?.['required'] && schemeForm.get('status')?.touched\">\n                  Status is required\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"form-actions\">\n              <button mat-button type=\"button\" (click)=\"resetForm()\" *ngIf=\"isEditing\">\n                Cancel\n              </button>\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"schemeForm.invalid\">\n                <mat-icon class=\"mr-1\">{{isEditing ? 'update' : 'add'}}</mat-icon>\n                {{isEditing ? 'Update' : 'Add'}} Scheme\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <!-- Table Section -->\n      <div class=\"bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 overflow-hidden\">\n        <div class=\"bg-gradient-to-r from-green-600 via-emerald-600 to-teal-600 p-4\">\n          <div class=\"flex items-center space-x-3\">\n            <mat-icon class=\"text-white text-xl\">table_chart</mat-icon>\n            <h3 class=\"text-lg font-semibold text-white\">Deposit Schemes</h3>\n          </div>\n        </div>\n        \n        <div class=\"overflow-x-auto\">\n          <table mat-table [dataSource]=\"schemes\" class=\"w-full\">\n            <ng-container matColumnDef=\"name\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white font-semibold py-3 px-4 text-left text-sm\">Scheme Name</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">{{scheme.name}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"interestRate\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-emerald-500 to-teal-600 text-white font-semibold py-3 px-4 text-left text-sm\">Interest Rate</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">{{scheme.interestRate}}%</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"tenure\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-teal-500 to-cyan-600 text-white font-semibold py-3 px-4 text-left text-sm\">Tenure</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">{{scheme.tenure}} {{scheme.tenureType}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"amount\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-semibold py-3 px-4 text-left text-sm\">Amount Range</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">‚Çπ{{scheme.minAmount | number}} - ‚Çπ{{scheme.maxAmount | number}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"status\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-semibold py-3 px-4 text-left text-sm\">Status</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">\n                <mat-chip class=\"status-chip text-xs\" [class]=\"getStatusClass(scheme.status)\">\n                  {{scheme.status}}\n                </mat-chip>\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"actions\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-indigo-500 to-purple-600 text-white font-semibold py-3 px-4 text-center text-sm\">Actions</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4\">\n                <div class=\"flex space-x-2 justify-center\">\n                  <button mat-mini-fab color=\"primary\" (click)=\"editScheme(scheme)\" class=\"!w-8 !h-8\">\n                    <mat-icon class=\"text-sm\">edit</mat-icon>\n                  </button>\n                  <button mat-mini-fab color=\"warn\" (click)=\"deleteScheme(scheme.id)\" class=\"!w-8 !h-8\">\n                    <mat-icon class=\"text-sm\">delete</mat-icon>\n                  </button>\n                </div>\n              </td>\n            </ng-container>\n            \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors duration-200\"></tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1200px;\n      margin: 0 auto;\n      animation: fadeIn 0.6s ease-out;\n    }\n    \n    .status-chip {\n      font-weight: 500;\n      border-radius: 16px;\n      padding: 4px 12px;\n      display: inline-flex;\n      align-items: center;\n    }\n    \n    .mat-mdc-table {\n      background: transparent !important;\n    }\n    \n    @keyframes fadeIn {\n      from { opacity: 0; transform: translateY(10px); }\n      to { opacity: 1; transform: translateY(0); }\n    }\n  `]\n})\nexport class DepositSchemeComponent implements OnInit {\n  schemeForm!: FormGroup;\n  isEditing = false;\n  displayedColumns: string[] = ['name', 'interestRate', 'tenure', 'amount', 'status', 'actions'];\n  \n  schemes: DepositScheme[] = [\n    {\n      id: 'DS001',\n      name: 'Regular Savings',\n      interestRate: 7.5,\n      tenure: 12,\n      tenureType: 'months',\n      minAmount: 1000,\n      maxAmount: 100000,\n      status: 'Active'\n    },\n    {\n      id: 'DS002',\n      name: 'Fixed Deposit',\n      interestRate: 8.5,\n      tenure: 2,\n      tenureType: 'years',\n      minAmount: 5000,\n      maxAmount: 500000,\n      status: 'Active'\n    }\n  ];\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n\n  initializeForm() {\n    this.schemeForm = this.fb.group({\n      name: ['', Validators.required],\n      interestRate: ['', [Validators.required, Validators.min(0)]],\n      tenure: ['', [Validators.required, Validators.min(1)]],\n      tenureType: ['', Validators.required],\n      minAmount: ['', [Validators.required, Validators.min(1)]],\n      maxAmount: ['', [Validators.required, Validators.min(1)]],\n      status: ['Active', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    if (this.schemeForm.valid) {\n      console.log('Form submitted:', this.schemeForm.value);\n      this.resetForm();\n    }\n  }\n\n  resetForm() {\n    this.schemeForm.reset();\n    this.schemeForm.patchValue({ status: 'Active' });\n    this.isEditing = false;\n  }\n\n  editScheme(scheme: DepositScheme) {\n    this.isEditing = true;\n    this.schemeForm.patchValue(scheme);\n  }\n\n  deleteScheme(id: string) {\n    this.schemes = this.schemes.filter(scheme => scheme.id !== id);\n  }\n\n  getStatusClass(status: string): string {\n    return status === 'Active' \n      ? 'bg-green-100 text-green-800' \n      : 'bg-red-100 text-red-800';\n  }\n}\n","size_bytes":13307},"src/app/components/master/interest-master/interest-master.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-interest-master',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Interest Master</h1><mat-card><mat-card-content><p>Interest rate configuration and management.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class InterestMasterComponent {}\n","size_bytes":558},"src/app/components/master/member-details/member-details.component.css":{"content":"\r\n/* Member Details Component Styles - Matching Loan Receipt Design */\r\n\r\n/* Animation */\r\n.animate-fade-in {\r\n  animation: fadeIn 0.3s ease-in-out;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n/* Form Container */\r\n.form-container {\r\n  width: 100%;\r\n}\r\n\r\n/* Card Styles */\r\n.card {\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);\r\n  border: none;\r\n}\r\n\r\n.card-header {\r\n  padding: 20px 24px;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.card-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card-content {\r\n  padding: 24px;\r\n}\r\n\r\n.card-actions {\r\n  padding: 20px 24px;\r\n  border-top: 1px solid #e5e7eb;\r\n  background-color: #f9fafb;\r\n}\r\n\r\n/* Form Sections */\r\n.form-section {\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.form-section-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin-bottom: 20px;\r\n  font-size: 1.125rem;\r\n  font-weight: 600;\r\n  color: #374151;\r\n  padding-bottom: 8px;\r\n  /* border-bottom: 2px solid #e5e7eb; */\r\n}\r\n\r\n.form-section-content {\r\n  padding: 0 8px;\r\n}\r\n\r\n/* Form Grid */\r\n.form-grid {\r\n  display: grid;\r\n  gap: 20px;\r\n}\r\n\r\n.form-grid-1 {\r\n  grid-template-columns: 1fr;\r\n}\r\n\r\n.form-grid-2 {\r\n  grid-template-columns: repeat(1, minmax(0, 1fr));\r\n}\r\n\r\n.form-grid-3 {\r\n  grid-template-columns: repeat(1, minmax(0, 1fr));\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .form-grid-2 {\r\n    grid-template-columns: repeat(2, minmax(0, 1fr));\r\n  }\r\n  \r\n  .form-grid-3 {\r\n    grid-template-columns: repeat(2, minmax(0, 1fr));\r\n  }\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  .form-grid-3 {\r\n    grid-template-columns: repeat(3, minmax(0, 1fr));\r\n  }\r\n}\r\n\r\n/* Form Fields */\r\n.form-field {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 6px;\r\n}\r\n\r\n.form-label {\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n  color: #374151;\r\n}\r\n\r\n.form-label-required::after {\r\n  content: \" *\";\r\n  color: #ef4444;\r\n}\r\n\r\n.form-input, .form-select {\r\n  padding: 12px 16px;\r\n  border: 2px solid #e5e7eb;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  transition: all 0.2s;\r\n  background-color: white;\r\n}\r\n\r\n.form-input:focus, .form-select:focus {\r\n  outline: none;\r\n  border-color: #3b82f6;\r\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\r\n}\r\n\r\n.form-input[readonly] {\r\n  background-color: #f9fafb;\r\n  color: #6b7280;\r\n}\r\n\r\n.form-error {\r\n  font-size: 0.875rem;\r\n  color: #ef4444;\r\n  margin-top: 4px;\r\n}\r\n\r\n/* Input Group */\r\n.input-group {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.input-group .form-input {\r\n  flex: 1;\r\n}\r\n\r\n/* Table Styles */\r\n.table-container {\r\n  overflow-x: auto;\r\n  margin-top: 24px;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f8fafc;\r\n  padding: 16px;\r\n  text-align: left;\r\n  font-weight: 600;\r\n  color: #374151;\r\n  border-bottom: 1px solid #e5e7eb;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.data-table td {\r\n  padding: 16px;\r\n  border-bottom: 1px solid #f1f5f9;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.data-table tbody tr:hover {\r\n  background-color: #f8fafc;\r\n}\r\n\r\n.data-table tbody tr:last-child td {\r\n  border-bottom: none;\r\n}\r\n\r\n/* Button Styles */\r\n.btn {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 10px 20px;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  text-decoration: none;\r\n  border: 1px solid transparent;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.btn-sm {\r\n  padding: 6px 12px;\r\n  font-size: 0.75rem;\r\n}\r\n\r\n.btn-icon {\r\n  padding: 8px;\r\n  min-width: auto;\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #3b82f6;\r\n  color: white;\r\n  border-color: #3b82f6;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #2563eb;\r\n  border-color: #2563eb;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  background-color: #9ca3af;\r\n  border-color: #9ca3af;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.btn-secondary {\r\n  background-color: #6b7280;\r\n  color: white;\r\n  border-color: #6b7280;\r\n}\r\n\r\n.btn-secondary:hover {\r\n  background-color: #4b5563;\r\n  border-color: #4b5563;\r\n}\r\n\r\n.btn-outline {\r\n  background-color: transparent;\r\n  border-color: #d1d5db;\r\n  color: #374151;\r\n}\r\n\r\n.btn-outline:hover {\r\n  background-color: #f9fafb;\r\n  border-color: #9ca3af;\r\n}\r\n\r\n.btn-danger {\r\n  background-color: #ef4444;\r\n  color: white;\r\n  border-color: #ef4444;\r\n}\r\n\r\n.btn-danger:hover {\r\n  background-color: #dc2626;\r\n  border-color: #dc2626;\r\n}\r\n\r\n.btn-success {\r\n  background-color: #10b981;\r\n  color: white;\r\n  border-color: #10b981;\r\n}\r\n\r\n.btn-success:hover {\r\n  background-color: #059669;\r\n  border-color: #059669;\r\n}\r\n\r\n/* Off-canvas Styles */\r\n.off-canvas-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 998;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n\r\n.off-canvas-overlay.active {\r\n  opacity: 1;\r\n  visibility: visible;\r\n}\r\n\r\n.off-canvas {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  width: 800px;\r\n  max-width: 90vw;\r\n  height: 100vh;\r\n  background: white;\r\n  z-index: 999;\r\n  transform: translateX(100%);\r\n  transition: transform 0.3s ease-in-out;\r\n  box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.off-canvas.active {\r\n  transform: translateX(0);\r\n}\r\n\r\n.off-canvas-header {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  padding: 20px 24px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.off-canvas-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.off-canvas-footer {\r\n  padding: 20px 24px;\r\n  border-top: 1px solid #e5e7eb;\r\n  background: #f9fafb;\r\n  flex-shrink: 0;\r\n}\r\n\r\n/* Breadcrumb */\r\n.breadcrumb {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-bottom: 12px;\r\n  font-size: 0.875rem;\r\n  color: #6b7280;\r\n}\r\n\r\n.breadcrumb-separator {\r\n  font-size: 16px;\r\n  width: 16px;\r\n  height: 16px;\r\n  color: #9ca3af;\r\n}\r\n\r\n.breadcrumb-active {\r\n  color: #374151;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Content Header */\r\n.content-header {\r\n  padding-bottom: 16px;\r\n  border-bottom: 1px solid #e5e7eb;\r\n}\r\n\r\n.text-page-title {\r\n  font-size: 1.875rem;\r\n  font-weight: 700;\r\n  color: #111827;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.text-body {\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* Status Badge */\r\n.px-2 {\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n}\r\n\r\n.py-1 {\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n}\r\n\r\n.rounded-full {\r\n  border-radius: 9999px;\r\n}\r\n\r\n.text-xs {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n.font-medium {\r\n  font-weight: 500;\r\n}\r\n\r\n.bg-green-100 {\r\n  background-color: #dcfce7;\r\n}\r\n\r\n.text-green-800 {\r\n  color: #166534;\r\n}\r\n\r\n.bg-red-100 {\r\n  background-color: #fee2e2;\r\n}\r\n\r\n.text-red-800 {\r\n  color: #991b1b;\r\n}\r\n\r\n/* Avatar */\r\n.w-8 {\r\n  width: 2rem;\r\n}\r\n\r\n.h-8 {\r\n  height: 2rem;\r\n}\r\n\r\n.bg-blue-100 {\r\n  background-color: #dbeafe;\r\n}\r\n\r\n.text-blue-600 {\r\n  color: #2563eb;\r\n}\r\n\r\n.text-sm {\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.space-x-3 > * + * {\r\n  margin-left: 12px;\r\n}\r\n\r\n/* Utility Classes */\r\n.flex {\r\n  display: flex;\r\n}\r\n\r\n.justify-end {\r\n  justify-content: flex-end;\r\n}\r\n\r\n.justify-between {\r\n  justify-content: space-between;\r\n}\r\n\r\n.items-center {\r\n  align-items: center;\r\n}\r\n\r\n.gap-2 {\r\n  gap: 8px;\r\n}\r\n\r\n.gap-3 {\r\n  gap: 12px;\r\n}\r\n\r\n.gap-4 {\r\n  gap: 16px;\r\n}\r\n\r\n.text-4xl {\r\n  font-size: 2.25rem;\r\n}\r\n\r\n.text-6xl {\r\n  font-size: 3.75rem;\r\n}\r\n\r\n.text-lg {\r\n  font-size: 1.125rem;\r\n}\r\n\r\n.text-gray-400 {\r\n  color: #9ca3af;\r\n}\r\n\r\n.text-gray-500 {\r\n  color: #6b7280;\r\n}\r\n\r\n.text-gray-600 {\r\n  color: #4b5563;\r\n}\r\n\r\n.mb-2 {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.mb-4 {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.mb-6 {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.mt-4 {\r\n  margin-top: 16px;\r\n}\r\n\r\n.mt-6 {\r\n  margin-top: 24px;\r\n}\r\n\r\n.p-0 {\r\n  padding: 0;\r\n}\r\n\r\n.p-6 {\r\n  padding: 24px;\r\n}\r\n\r\n.py-8 {\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n}\r\n\r\n.w-80 {\r\n  width: 20rem;\r\n}\r\n\r\n.text-center {\r\n  text-align: center;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .off-canvas {\r\n    width: 100vw;\r\n    max-width: none;\r\n  }\r\n  \r\n  .form-grid-2 {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .form-grid-3 {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .w-80 {\r\n    width: 100%;\r\n  }\r\n  \r\n  .data-table th,\r\n  .data-table td {\r\n    padding: 8px;\r\n    font-size: 0.75rem;\r\n  }\r\n  \r\n  .card-header {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .input-group {\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\n/* Focus states for accessibility */\r\n.btn:focus,\r\n.form-input:focus,\r\n.form-select:focus {\r\n  outline: 2px solid #3b82f6;\r\n  outline-offset: 2px;\r\n}\r\n\r\n/* Loading states */\r\n.btn:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* Smooth transitions */\r\n* {\r\n  transition: background-color 0.2s, border-color 0.2s, color 0.2s;\r\n}\r\n","size_bytes":9034},"src/app/components/master/member-details/member-details.component.ts":{"content":"\r\nimport { Component, signal, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule, MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MemberService, Member } from '../../../services/member.service';\r\n\r\n@Component({\r\n  selector: 'app-member-details',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule\r\n  ],\r\n  templateUrl: './member-details.component.html',\r\n  styleUrls: ['./member-details.component.css']\r\n})\r\nexport class MemberDetailsComponent implements OnInit {\r\n  memberForm: FormGroup;\r\n  dataSource = new MatTableDataSource<Member>([]);\r\n  displayedColumns: string[] = ['memberNo', 'name', 'mobile', 'status', 'actions'];\r\n  \r\n  // Signals for component state\r\n  private offCanvasOpen = signal(false);\r\n  private editMode = signal(false);\r\n  private currentMember = signal<Member | null>(null);\r\n  private submitting = signal(false);\r\n  \r\n  searchTerm: string = '';\r\n  allMembers: Member[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private memberService: MemberService,\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    this.memberForm = this.createMemberForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadMembers();\r\n  }\r\n\r\n  // Signal getters\r\n  isOffCanvasOpen = () => this.offCanvasOpen();\r\n  isEditMode = () => this.editMode();\r\n  isSubmitting = () => this.submitting();\r\n\r\n  private createMemberForm(): FormGroup {\r\n    return this.fb.group({\r\n      memberNo: ['', Validators.required],\r\n      name: ['', Validators.required],\r\n      fhName: ['', Validators.required],\r\n      dateOfBirth: [''],\r\n      mobile: [''],\r\n      email: ['', Validators.email],\r\n      designation: [''],\r\n      dojJob: [''],\r\n      doRetirement: [''],\r\n      branch: [''],\r\n      dojSociety: [''],\r\n      officeAddress: [''],\r\n      residenceAddress: [''],\r\n      city: [''],\r\n      phoneOffice: [''],\r\n      phoneResidence: [''],\r\n      nominee: [''],\r\n      nomineeRelation: [''],\r\n      shareAmount: [0, [Validators.min(0)]],\r\n      cdAmount: [0, [Validators.min(0)]],\r\n      bankName: [''],\r\n      payableAt: [''],\r\n      accountNo: [''],\r\n      status: ['Active'],\r\n      shareDeduction: [0],\r\n      withdrawal: [0],\r\n      gLoanInstalment: [0],\r\n      eLoanInstalment: [0]\r\n    });\r\n  }\r\n\r\n  loadMembers() {\r\n    this.memberService.getAllMembers().subscribe({\r\n      next: (members) => {\r\n        this.allMembers = members;\r\n        this.dataSource.data = members;\r\n        console.log('Members loaded:', members);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading members:', error);\r\n        this.showSnackBar('Error loading members');\r\n      }\r\n    });\r\n  }\r\n\r\n  onSearch() {\r\n    if (!this.searchTerm.trim()) {\r\n      this.dataSource.data = this.allMembers;\r\n      return;\r\n    }\r\n\r\n    const filtered = this.allMembers.filter(member =>\r\n      member.name?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\r\n      member.memberNo?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\r\n      member.mobile?.includes(this.searchTerm)\r\n    );\r\n    \r\n    this.dataSource.data = filtered;\r\n  }\r\n\r\n  openOffCanvas(mode: 'create' | 'edit', member?: Member) {\r\n    this.editMode.set(mode === 'edit');\r\n    \r\n    if (mode === 'edit' && member) {\r\n      this.currentMember.set(member);\r\n      this.populateForm(member);\r\n    } else {\r\n      this.currentMember.set(null);\r\n      this.memberForm.reset();\r\n      this.memberForm.patchValue({\r\n        shareAmount: 0,\r\n        cdAmount: 0,\r\n        status: 'Active'\r\n      });\r\n    }\r\n    \r\n    this.offCanvasOpen.set(true);\r\n  }\r\n\r\n  closeOffCanvas() {\r\n    this.offCanvasOpen.set(false);\r\n    this.memberForm.reset();\r\n    this.editMode.set(false);\r\n    this.currentMember.set(null);\r\n  }\r\n\r\n  populateForm(member: Member) {\r\n    this.memberForm.patchValue({\r\n      memberNo: member.memberNo,\r\n      name: member.name,\r\n      fhName: member.fhName,\r\n      dateOfBirth: member.dateOfBirth ? new Date(member.dateOfBirth) : null,\r\n      mobile: member.mobile,\r\n      email: member.email,\r\n      designation: member.designation,\r\n      dojJob: member.dojJob ? new Date(member.dojJob) : null,\r\n      doRetirement: member.doRetirement ? new Date(member.doRetirement) : null,\r\n      branch: member.branch,\r\n      dojSociety: member.dojSociety ? new Date(member.dojSociety) : null,\r\n      officeAddress: member.officeAddress,\r\n      residenceAddress: member.residenceAddress,\r\n      city: member.city,\r\n      phoneOffice: member.phoneOffice,\r\n      phoneResidence: member.phoneResidence,\r\n      nominee: member.nominee,\r\n      nomineeRelation: member.nomineeRelation,\r\n      shareAmount: member.shareAmount,\r\n      cdAmount: member.cdAmount,\r\n      bankName: member.bankName,\r\n      payableAt: member.payableAt,\r\n      accountNo: member.accountNo,\r\n      status: member.status,\r\n      shareDeduction: member.shareDeduction,\r\n      withdrawal: member.withdrawal,\r\n      gLoanInstalment: member.gLoanInstalment,\r\n      eLoanInstalment: member.eLoanInstalment\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.memberForm.valid) {\r\n      this.submitting.set(true);\r\n      const formData = { ...this.memberForm.value };\r\n\r\n      if (this.isEditMode()) {\r\n        const currentMember = this.currentMember();\r\n        if (currentMember) {\r\n          this.memberService.updateMember(currentMember.id!, formData).subscribe({\r\n            next: () => {\r\n              this.showSnackBar('Member updated successfully');\r\n              this.loadMembers();\r\n              this.closeOffCanvas();\r\n            },\r\n            error: (error) => {\r\n              console.error('Error updating member:', error);\r\n              this.showSnackBar('Error updating member');\r\n            },\r\n            complete: () => this.submitting.set(false)\r\n          });\r\n        }\r\n      } else {\r\n        this.memberService.createMember(formData).subscribe({\r\n          next: () => {\r\n            this.showSnackBar('Member created successfully');\r\n            this.loadMembers();\r\n            this.closeOffCanvas();\r\n          },\r\n          error: (error) => {\r\n            console.error('Error creating member:', error);\r\n            this.showSnackBar('Error creating member');\r\n          },\r\n          complete: () => this.submitting.set(false)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  onView(member: Member) {\r\n    console.log('Viewing member:', member);\r\n    // Implement view logic - could open a read-only modal\r\n  }\r\n\r\n  onEdit(member: Member) {\r\n    this.openOffCanvas('edit', member);\r\n  }\r\n\r\n  onDelete(member: Member) {\r\n    if (confirm(`Are you sure you want to delete member ${member.name}?`)) {\r\n      this.memberService.deleteMember(member.id!).subscribe({\r\n        next: () => {\r\n          this.showSnackBar('Member deleted successfully');\r\n          this.loadMembers();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error deleting member:', error);\r\n          this.showSnackBar('Error deleting member');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private showSnackBar(message: string) {\r\n    this.snackBar.open(message, 'Close', {\r\n      duration: 3000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'top'\r\n    });\r\n  }\r\n}\r\n","size_bytes":8373},"src/app/components/master/table/table.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\n\n@Component({\n  selector: 'app-table',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatIconModule, MatButtonModule],\n  template: `\n    <div class=\"space-y-6\">\n      <!-- Page Header -->\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-200 dark:border-gray-700\">\n        <div class=\"flex items-center space-x-3 mb-4\">\n          <div class=\"p-3 bg-primary-100 dark:bg-primary-900/30 rounded-full\">\n            <mat-icon class=\"text-primary-600 dark:text-primary-400\">table_chart</mat-icon>\n          </div>\n          <div>\n            <h1 class=\"text-3xl font-bold text-gray-900 dark:text-white\">Table Management</h1>\n            <p class=\"text-gray-600 dark:text-gray-400\">Data table configuration and management</p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Content Card -->\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n        <div class=\"p-6\">\n          <div class=\"text-center py-12\">\n            <mat-icon class=\"text-6xl text-gray-400 dark:text-gray-500 mb-4\">table_view</mat-icon>\n            <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Table Configuration</h3>\n            <p class=\"text-gray-500 dark:text-gray-400 mb-6\">Data table configuration and management tools will be available here.</p>\n            <button class=\"inline-flex items-center px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white font-medium rounded-lg shadow-sm transition-colors duration-200\">\n              <mat-icon class=\"mr-2\">add</mat-icon>\n              Create Table\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: block;\n    }\n  `]\n})\nexport class TableComponent {}\n","size_bytes":2055},"src/app/components/reports/closing-balance/closing-balance.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-closing-balance',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Closing Balance Report</h1><mat-card><mat-card-content><p>Closing balance reports.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class ClosingBalanceComponent {}\n","size_bytes":546},"src/app/components/reports/employees/employees.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\nimport { FormsModule } from '@angular/forms';\n\ninterface Employee {\n  id: number;\n  employeeId: string;\n  name: string;\n  designation: string;\n  department: string;\n  joinDate: string;\n  salary: number;\n  status: string;\n  phone: string;\n  email: string;\n}\n\n@Component({\n  selector: 'app-employees',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatSelectModule,\n    MatSnackBarModule\n  ],\n  template: `\n    <div class=\"page-container\">\n      <h1>Employee Reports</h1>\n      \n      <!-- Filters -->\n      <mat-card class=\"filter-card\">\n        <mat-card-header>\n          <mat-card-title>Report Filters</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"filter-row\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Department</mat-label>\n              <mat-select [(value)]=\"selectedDepartment\" (selectionChange)=\"applyFilters()\">\n                <mat-option value=\"\">All Departments</mat-option>\n                <mat-option value=\"Administration\">Administration</mat-option>\n                <mat-option value=\"Finance\">Finance</mat-option>\n                <mat-option value=\"Operations\">Operations</mat-option>\n                <mat-option value=\"IT\">IT</mat-option>\n              </mat-select>\n            </mat-form-field>\n            \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Status</mat-label>\n              <mat-select [(value)]=\"selectedStatus\" (selectionChange)=\"applyFilters()\">\n                <mat-option value=\"\">All Status</mat-option>\n                <mat-option value=\"Active\">Active</mat-option>\n                <mat-option value=\"Inactive\">Inactive</mat-option>\n                <mat-option value=\"On Leave\">On Leave</mat-option>\n              </mat-select>\n            </mat-form-field>\n            \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Search Employee</mat-label>\n              <input matInput [(ngModel)]=\"searchTerm\" (input)=\"applyFilters()\" placeholder=\"Name or ID\">\n            </mat-form-field>\n            \n            <button mat-raised-button color=\"primary\" (click)=\"resetFilters()\">\n              <mat-icon>refresh</mat-icon>\n              Reset\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Export Actions -->\n      <mat-card class=\"actions-card\">\n        <mat-card-content>\n          <div class=\"export-actions\">\n            <button mat-raised-button color=\"accent\" (click)=\"exportToExcel()\">\n              <mat-icon>file_download</mat-icon>\n              Export to Excel\n            </button>\n            <button mat-raised-button color=\"accent\" (click)=\"exportToCSV()\">\n              <mat-icon>file_download</mat-icon>\n              Export to CSV\n            </button>\n            <button mat-raised-button color=\"primary\" (click)=\"printReport()\">\n              <mat-icon>print</mat-icon>\n              Print Report\n            </button>\n            <button mat-raised-button color=\"warn\" (click)=\"exportToPDF()\">\n              <mat-icon>picture_as_pdf</mat-icon>\n              Export to PDF\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Summary Stats -->\n      <div class=\"stats-grid\">\n        <mat-card class=\"stat-card\">\n          <mat-card-content>\n            <div class=\"stat-number\">{{filteredEmployees.length}}</div>\n            <div class=\"stat-label\">Total Employees</div>\n          </mat-card-content>\n        </mat-card>\n        \n        <mat-card class=\"stat-card\">\n          <mat-card-content>\n            <div class=\"stat-number\">{{getActiveCount()}}</div>\n            <div class=\"stat-label\">Active Employees</div>\n          </mat-card-content>\n        </mat-card>\n        \n        <mat-card class=\"stat-card\">\n          <mat-card-content>\n            <div class=\"stat-number\">‚Çπ{{getTotalSalary() | number}}</div>\n            <div class=\"stat-label\">Total Salary</div>\n          </mat-card-content>\n        </mat-card>\n        \n        <mat-card class=\"stat-card\">\n          <mat-card-content>\n            <div class=\"stat-number\">{{getAverageSalary() | number}}</div>\n            <div class=\"stat-label\">Average Salary</div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n      \n      <!-- Employees Table -->\n      <mat-card class=\"table-card\">\n        <mat-card-header>\n          <mat-card-title>Employee List ({{filteredEmployees.length}} records)</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <table mat-table [dataSource]=\"filteredEmployees\" class=\"mat-elevation-z2\">\n            <ng-container matColumnDef=\"employeeId\">\n              <th mat-header-cell *matHeaderCellDef>Employee ID</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.employeeId}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"name\">\n              <th mat-header-cell *matHeaderCellDef>Name</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.name}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"designation\">\n              <th mat-header-cell *matHeaderCellDef>Designation</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.designation}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"department\">\n              <th mat-header-cell *matHeaderCellDef>Department</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.department}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"joinDate\">\n              <th mat-header-cell *matHeaderCellDef>Join Date</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.joinDate | date}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"salary\">\n              <th mat-header-cell *matHeaderCellDef>Salary</th>\n              <td mat-cell *matCellDef=\"let employee\">‚Çπ{{employee.salary | number}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"status\">\n              <th mat-header-cell *matHeaderCellDef>Status</th>\n              <td mat-cell *matCellDef=\"let employee\">\n                <span [class]=\"'status-' + employee.status.toLowerCase().replace(' ', '-')\">\n                  {{employee.status}}\n                </span>\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"contact\">\n              <th mat-header-cell *matHeaderCellDef>Contact</th>\n              <td mat-cell *matCellDef=\"let employee\">\n                <div>{{employee.phone}}</div>\n                <div class=\"email\">{{employee.email}}</div>\n              </td>\n            </ng-container>\n            \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .filter-card, .actions-card, .table-card {\n      margin-bottom: 20px;\n    }\n    \n    .filter-row {\n      display: flex;\n      gap: 16px;\n      align-items: flex-end;\n    }\n    \n    .filter-row mat-form-field {\n      flex: 1;\n    }\n    \n    .export-actions {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n    }\n    \n    .stats-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 16px;\n      margin-bottom: 20px;\n    }\n    \n    .stat-card {\n      text-align: center;\n    }\n    \n    .stat-number {\n      font-size: 2em;\n      font-weight: bold;\n      color: #1976d2;\n    }\n    \n    .stat-label {\n      color: #666;\n      margin-top: 8px;\n    }\n    \n    table {\n      width: 100%;\n    }\n    \n    .email {\n      font-size: 0.8em;\n      color: #666;\n    }\n    \n    .status-active {\n      color: green;\n      font-weight: bold;\n    }\n    \n    .status-inactive {\n      color: red;\n      font-weight: bold;\n    }\n    \n    .status-on-leave {\n      color: orange;\n      font-weight: bold;\n    }\n  `]\n})\nexport class EmployeesComponent implements OnInit {\n  employees: Employee[] = [];\n  filteredEmployees: Employee[] = [];\n  \n  selectedDepartment = '';\n  selectedStatus = '';\n  searchTerm = '';\n  \n  displayedColumns: string[] = ['employeeId', 'name', 'designation', 'department', 'joinDate', 'salary', 'status', 'contact'];\n\n  constructor(private snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.loadSampleData();\n    this.applyFilters();\n  }\n\n  loadSampleData() {\n    this.employees = [\n      {\n        id: 1,\n        employeeId: 'EMP001',\n        name: 'John Smith',\n        designation: 'Branch Manager',\n        department: 'Administration',\n        joinDate: '2022-01-15',\n        salary: 75000,\n        status: 'Active',\n        phone: '9876543210',\n        email: 'john.smith@company.com'\n      },\n      {\n        id: 2,\n        employeeId: 'EMP002',\n        name: 'Sarah Johnson',\n        designation: 'Accountant',\n        department: 'Finance',\n        joinDate: '2022-03-20',\n        salary: 45000,\n        status: 'Active',\n        phone: '9876543211',\n        email: 'sarah.johnson@company.com'\n      },\n      {\n        id: 3,\n        employeeId: 'EMP003',\n        name: 'Michael Brown',\n        designation: 'Operations Officer',\n        department: 'Operations',\n        joinDate: '2023-06-10',\n        salary: 35000,\n        status: 'On Leave',\n        phone: '9876543212',\n        email: 'michael.brown@company.com'\n      },\n      {\n        id: 4,\n        employeeId: 'EMP004',\n        name: 'Emily Davis',\n        designation: 'IT Support',\n        department: 'IT',\n        joinDate: '2023-01-05',\n        salary: 40000,\n        status: 'Active',\n        phone: '9876543213',\n        email: 'emily.davis@company.com'\n      },\n      {\n        id: 5,\n        employeeId: 'EMP005',\n        name: 'David Wilson',\n        designation: 'Cashier',\n        department: 'Operations',\n        joinDate: '2021-11-12',\n        salary: 25000,\n        status: 'Inactive',\n        phone: '9876543214',\n        email: 'david.wilson@company.com'\n      }\n    ];\n  }\n\n  applyFilters() {\n    this.filteredEmployees = this.employees.filter(employee => {\n      const matchesDepartment = !this.selectedDepartment || employee.department === this.selectedDepartment;\n      const matchesStatus = !this.selectedStatus || employee.status === this.selectedStatus;\n      const matchesSearch = !this.searchTerm || \n        employee.name.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n        employee.employeeId.toLowerCase().includes(this.searchTerm.toLowerCase());\n      \n      return matchesDepartment && matchesStatus && matchesSearch;\n    });\n  }\n\n  resetFilters() {\n    this.selectedDepartment = '';\n    this.selectedStatus = '';\n    this.searchTerm = '';\n    this.applyFilters();\n  }\n\n  getActiveCount(): number {\n    return this.filteredEmployees.filter(emp => emp.status === 'Active').length;\n  }\n\n  getTotalSalary(): number {\n    return this.filteredEmployees.reduce((total, emp) => total + emp.salary, 0);\n  }\n\n  getAverageSalary(): number {\n    return this.filteredEmployees.length > 0 ? this.getTotalSalary() / this.filteredEmployees.length : 0;\n  }\n\n  exportToExcel() {\n    this.snackBar.open('Exporting employee report to Excel...', 'Close', { duration: 3000 });\n    // Simulate Excel export\n    this.downloadFile('employees-report.xlsx', 'excel');\n  }\n\n  exportToCSV() {\n    this.snackBar.open('Exporting employee report to CSV...', 'Close', { duration: 3000 });\n    // Simulate CSV export\n    const csvContent = this.convertToCSV(this.filteredEmployees);\n    this.downloadFile('employees-report.csv', 'csv', csvContent);\n  }\n\n  exportToPDF() {\n    this.snackBar.open('Exporting employee report to PDF...', 'Close', { duration: 3000 });\n    // Simulate PDF export\n    this.downloadFile('employees-report.pdf', 'pdf');\n  }\n\n  printReport() {\n    this.snackBar.open('Printing employee report...', 'Close', { duration: 3000 });\n    // Simulate print functionality\n    window.print();\n  }\n\n  private convertToCSV(data: Employee[]): string {\n    const headers = ['Employee ID', 'Name', 'Designation', 'Department', 'Join Date', 'Salary', 'Status', 'Phone', 'Email'];\n    const csvRows = [headers.join(',')];\n    \n    data.forEach(emp => {\n      const row = [\n        emp.employeeId,\n        emp.name,\n        emp.designation,\n        emp.department,\n        emp.joinDate,\n        emp.salary.toString(),\n        emp.status,\n        emp.phone,\n        emp.email\n      ];\n      csvRows.push(row.join(','));\n    });\n    \n    return csvRows.join('\\n');\n  }\n\n  private downloadFile(filename: string, type: string, content?: string) {\n    // Simulate file download\n    console.log(`Downloading ${filename} as ${type}`);\n    if (content) {\n      console.log('File content:', content);\n    }\n  }\n}\n","size_bytes":13760},"src/app/components/reports/loan/loan.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-loan-report',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Loan Reports</h1><mat-card><mat-card-content><p>Loan reports and analytics.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class LoanReportComponent {}\n","size_bytes":531},"src/app/components/reports/opening-balance/opening-balance.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-opening-balance',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Opening Balance Report</h1><mat-card><mat-card-content><p>Opening balance reports.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class OpeningBalanceComponent {}\n","size_bytes":546},"src/app/components/reports/voucher/voucher.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-voucher-report',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Voucher Reports</h1><mat-card><mat-card-content><p>Voucher reports and analysis.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class VoucherReportComponent {}\n","size_bytes":542},"src/app/components/transaction/account-closure/account-closure.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-account-closure',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Account Closure</h1><mat-card><mat-card-content><p>Account closure processing.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class AccountClosureComponent {}\n","size_bytes":542},"src/app/components/transaction/demand-process/demand-process.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-demand-process',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Demand Process</h1><mat-card><mat-card-content><p>Demand processing functionality.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DemandProcessComponent {}\n","size_bytes":544},"src/app/components/transaction/deposit-payment/deposit-payment.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-deposit-payment',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Deposit Payment</h1><mat-card><mat-card-content><p>Deposit payment processing.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DepositPaymentComponent {}\n","size_bytes":542},"src/app/components/transaction/deposit-receipt/deposit-receipt.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-deposit-receipt',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatButtonModule,\n    MatIconModule\n  ],\n  template: `\n    <div class=\"page-container p-6 space-y-6\">\n      <!-- Header -->\n      <div class=\"relative overflow-hidden rounded-2xl p-6 bg-gradient-to-br from-blue-600 via-cyan-600 to-teal-600 text-white shadow-xl\">\n        <div class=\"absolute inset-0 bg-black/10\"></div>\n        <div class=\"relative z-10\">\n          <div class=\"flex items-center space-x-4\">\n            <div class=\"p-3 bg-white/20 rounded-full backdrop-blur-sm\">\n              <mat-icon class=\"text-2xl\">receipt</mat-icon>\n            </div>\n            <div>\n              <h1 class=\"text-2xl font-bold\">Deposit Receipt</h1>\n              <p class=\"text-cyan-100 text-sm\">Create new deposit receipt transaction</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Member Information Section -->\n      <div class=\"form-section\">\n        <div class=\"form-section-header\">\n          <div class=\"flex items-center\">\n            <mat-icon class=\"mr-2\">person</mat-icon>\n            Member Information\n          </div>\n        </div>\n        <div class=\"form-section-content\">\n          <form [formGroup]=\"depositForm\">\n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Member ID</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"memberId\" placeholder=\"Enter member ID\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('memberId')?.errors?.['required'] && depositForm.get('memberId')?.touched\">\n                  Member ID is required\n                </div>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Member Name</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"memberName\" readonly>\n                </mat-form-field>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <!-- Deposit Details Section -->\n      <div class=\"form-section\">\n        <div class=\"form-section-header\">\n          <div class=\"flex items-center\">\n            <mat-icon class=\"mr-2\">account_balance_wallet</mat-icon>\n            Deposit Details\n          </div>\n        </div>\n        <div class=\"form-section-content\">\n          <form [formGroup]=\"depositForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Deposit Type</label>\n                <mat-form-field appearance=\"outline\">\n                  <mat-select formControlName=\"depositType\">\n                    <mat-option value=\"fixed\">Fixed Deposit</mat-option>\n                    <mat-option value=\"recurring\">Recurring Deposit</mat-option>\n                    <mat-option value=\"savings\">Savings Account</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('depositType')?.errors?.['required'] && depositForm.get('depositType')?.touched\">\n                  Deposit type is required\n                </div>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Amount (‚Çπ)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput type=\"number\" formControlName=\"amount\" (blur)=\"calculateMaturity()\" min=\"1000\" placeholder=\"0.00\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('amount')?.errors?.['required'] && depositForm.get('amount')?.touched\">\n                  Amount is required\n                </div>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('amount')?.errors?.['min'] && depositForm.get('amount')?.touched\">\n                  Minimum amount is ‚Çπ1,000\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-field-group three-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Interest Rate (%)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput type=\"number\" formControlName=\"interestRate\" readonly>\n                </mat-form-field>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Maturity Date</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput [matDatepicker]=\"mpicker\" formControlName=\"maturityDate\" readonly>\n                  <mat-datepicker-toggle matIconSuffix [for]=\"mpicker\"></mat-datepicker-toggle>\n                  <mat-datepicker #mpicker></mat-datepicker>\n                </mat-form-field>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Maturity Amount (‚Çπ)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput type=\"number\" formControlName=\"maturityAmount\" readonly>\n                </mat-form-field>\n              </div>\n            </div>\n\n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Nominee</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"nominee\" placeholder=\"Enter nominee name\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('nominee')?.errors?.['required'] && depositForm.get('nominee')?.touched\">\n                  Nominee is required\n                </div>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Status</label>\n                <mat-form-field appearance=\"outline\">\n                  <mat-select formControlName=\"status\">\n                    <mat-option value=\"Active\">Active</mat-option>\n                    <mat-option value=\"Matured\">Matured</mat-option>\n                    <mat-option value=\"Closed\">Closed</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('status')?.errors?.['required'] && depositForm.get('status')?.touched\">\n                  Status is required\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-field-group\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Remarks</label>\n                <mat-form-field appearance=\"outline\">\n                  <textarea matInput formControlName=\"remarks\" rows=\"3\" placeholder=\"Enter any additional remarks\"></textarea>\n                </mat-form-field>\n              </div>\n            </div>\n\n            <div class=\"form-actions\">\n              <button mat-button type=\"button\" (click)=\"resetForm()\">\n                <mat-icon class=\"mr-1\">clear</mat-icon>\n                Clear\n              </button>\n              <button mat-button type=\"button\">\n                <mat-icon class=\"mr-1\">print</mat-icon>\n                Print Receipt\n              </button>\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"depositForm.invalid\">\n                <mat-icon class=\"mr-1\">save</mat-icon>\n                Save Receipt\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1000px;\n      margin: 0 auto;\n      animation: fadeIn 0.6s ease-out;\n    }\n\n    @keyframes fadeIn {\n      from { opacity: 0; transform: translateY(10px); }\n      to { opacity: 1; transform: translateY(0); }\n    }\n\n    textarea {\n      resize: vertical;\n      min-height: 80px;\n    }\n\n    .form-section {\n      @apply bg-white p-6 rounded-lg shadow-md border border-gray-200;\n    }\n\n    .form-section-header {\n      @apply text-lg font-semibold mb-4 pb-2 border-b border-gray-300 flex items-center text-gray-700;\n    }\n\n    .form-section-content {\n      @apply space-y-6;\n    }\n\n    .form-field-group {\n      @apply grid gap-6;\n    }\n\n    .form-field-group.two-column {\n      @apply grid-cols-1 md:grid-cols-2;\n    }\n\n    .form-field-group.three-column {\n      @apply grid-cols-1 md:grid-cols-3;\n    }\n\n    .form-field-container {\n      @apply flex flex-col;\n    }\n\n    .form-label {\n      @apply block text-sm font-medium text-gray-700 mb-1;\n    }\n\n    .form-label.required::after {\n      content: ' *';\n      color: red;\n    }\n\n    mat-form-field {\n      @apply w-full;\n    }\n\n    .form-error {\n      @apply text-red-500 text-xs mt-1;\n    }\n\n    .form-actions {\n      @apply flex justify-end space-x-4 pt-6 border-t border-gray-200;\n    }\n  `]\n})\nexport class DepositReceiptComponent implements OnInit {\n  depositForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n\n  initializeForm() {\n    this.depositForm = this.fb.group({\n      memberId: ['', Validators.required],\n      memberName: [''],\n      depositType: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(1000)]],\n      interestRate: [{ value: '', disabled: true }],\n      maturityDate: [{ value: '', disabled: true }],\n      maturityAmount: [{ value: '', disabled: true }],\n      nominee: ['', Validators.required],\n      status: ['Active', Validators.required],\n      remarks: ['']\n    });\n  }\n\n  calculateMaturity() {\n    const amount = this.depositForm.get('amount')?.value;\n    const depositType = this.depositForm.get('depositType')?.value;\n\n    if (amount && depositType) {\n      // Mock calculation - in real app, this would call a service\n      let interestRate = 7.5;\n      let maturityMonths = 12;\n\n      switch (depositType) {\n        case 'fixed':\n          interestRate = 8.5;\n          maturityMonths = 24;\n          break;\n        case 'recurring':\n          interestRate = 7.0;\n          maturityMonths = 12;\n          break;\n        case 'savings':\n          interestRate = 4.0;\n          maturityMonths = 0;\n          break;\n      }\n\n      const maturityAmount = amount * (1 + (interestRate / 100) * (maturityMonths / 12));\n      const maturityDate = new Date();\n      maturityDate.setMonth(maturityDate.getMonth() + maturityMonths);\n\n      this.depositForm.patchValue({\n        interestRate: interestRate,\n        maturityDate: maturityDate,\n        maturityAmount: Math.round(maturityAmount)\n      });\n    }\n  }\n\n  onSubmit() {\n    if (this.depositForm.valid) {\n      console.log('Deposit receipt created:', this.depositForm.value);\n      // Here you would typically call a service to save the data\n    }\n  }\n\n  resetForm() {\n    this.depositForm.reset();\n    this.depositForm.patchValue({ status: 'Active' });\n  }\n}","size_bytes":11923},"src/app/components/transaction/deposit-renew/deposit-renew.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-deposit-renew',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Deposit Renew</h1><mat-card><mat-card-content><p>Deposit renewal processing.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DepositRenewComponent {}\n","size_bytes":536},"src/app/components/transaction/deposit-slip/deposit-slip.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-deposit-slip',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Deposit Slip</h1><mat-card><mat-card-content><p>Deposit slip generation and management.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DepositSlipComponent {}\n","size_bytes":545},"src/app/components/transaction/loan-taken/loan-taken.component.css":{"content":"\n/* Loan Taken Component Styles */\n\n/* Form Container */\n.form-container {\n  width: 100%;\n}\n\n/* Card Styles */\n.card {\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);\n}\n\n.card-header {\n  padding: 20px 24px;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.card-title {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.card-actions {\n  padding: 20px 24px;\n  border-top: 1px solid #e5e7eb;\n  background-color: #f9fafb;\n}\n\n/* Form Sections */\n.form-section {\n  margin-bottom: 32px;\n}\n\n.form-section-header {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 20px;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: white;\n  padding-bottom: 8px;\n  border-bottom: 2px solid #e5e7eb;\n}\n\n.form-section-content {\n  padding: 0 8px;\n}\n\n/* Form Layout */\n.form-row {\n  display: flex;\n  gap: 32px;\n  flex-wrap: wrap;\n}\n\n.form-column {\n  flex: 1;\n  min-width: 300px;\n}\n\n/* Form Grid */\n.form-grid {\n  display: grid;\n  gap: 20px;\n}\n\n.form-grid-2 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n\n.form-grid-3 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n\n@media (min-width: 768px) {\n  .form-grid-2 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n  \n  .form-grid-3 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n\n@media (min-width: 1024px) {\n  .form-grid-3 {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n\n/* Form Fields */\n.form-field {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  margin-bottom: 16px;\n}\n\n.form-label {\n  font-size: 0.875rem;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 4px;\n}\n\n.form-label-required::after {\n  content: \" *\";\n  color: #ef4444;\n}\n\n.form-input, .form-select, .form-textarea {\n  padding: 8px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 0.875rem;\n  transition: border-color 0.2s, box-shadow 0.2s;\n}\n\n.form-input:focus, .form-select:focus, .form-textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.form-input[readonly] {\n  background-color: #f9fafb;\n  color: #6b7280;\n}\n\n.calculation-field {\n  background-color: #f0f9ff !important;\n  border-color: #0ea5e9 !important;\n  font-weight: 600;\n}\n\n.form-error {\n  font-size: 0.75rem;\n  color: #ef4444;\n  margin-top: 4px;\n}\n\n.input-group {\n  display: flex;\n  gap: 8px;\n  align-items: stretch;\n}\n\n.input-group .form-input {\n  flex: 1;\n}\n\n/* Payment Mode */\n.payment-mode-group {\n  display: flex;\n  gap: 24px;\n  margin-bottom: 20px;\n}\n\n.payment-mode-option {\n  margin-right: 16px;\n}\n\n.cheque-details {\n  margin-top: 20px;\n  padding: 16px;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  border: 1px solid #e2e8f0;\n}\n\n/* Tabs */\n.member-tabs {\n  margin-top: 16px;\n}\n\n.tab-content {\n  padding: 20px 0;\n}\n\n.table-container {\n  background: white;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.member-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.member-table th {\n  background-color: #f8fafc;\n  padding: 12px;\n  text-align: left;\n  font-weight: 600;\n  color: #374151;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.member-table td {\n  padding: 12px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.member-table tbody tr:hover {\n  background-color: #f9fafb;\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 0.875rem;\n  font-weight: 500;\n  text-decoration: none;\n  border: 1px solid transparent;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.btn-primary {\n  background-color: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.btn-primary:hover {\n  background-color: #2563eb;\n  border-color: #2563eb;\n}\n\n.btn-secondary {\n  background-color: #6b7280;\n  color: white;\n  border-color: #6b7280;\n}\n\n.btn-secondary:hover {\n  background-color: #4b5563;\n  border-color: #4b5563;\n}\n\n.btn-warning {\n  background-color: #f59e0b;\n  color: white;\n  border-color: #f59e0b;\n}\n\n.btn-warning:hover {\n  background-color: #d97706;\n  border-color: #d97706;\n}\n\n.btn-danger {\n  background-color: #ef4444;\n  color: white;\n  border-color: #ef4444;\n}\n\n.btn-danger:hover {\n  background-color: #dc2626;\n  border-color: #dc2626;\n}\n\n.btn-outline {\n  background-color: transparent;\n  color: #374151;\n  border-color: #d1d5db;\n}\n\n.btn-outline:hover {\n  background-color: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.btn-sm {\n  padding: 4px 8px;\n  font-size: 0.75rem;\n}\n\n/* Utilities */\n.flex {\n  display: flex;\n}\n\n.justify-end {\n  justify-content: flex-end;\n}\n\n.gap-3 {\n  gap: 12px;\n}\n\n.mt-3 {\n  margin-top: 12px;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-gray-500 {\n  color: #6b7280;\n}\n\n/* Dialog Styles */\n.clickable-row {\n  cursor: pointer;\n}\n\n.clickable-row:hover {\n  background-color: #f5f5f5;\n}\n\n.form-label {\n  font-weight: 500;\n  color: #374151;\n  font-size: 0.875rem;\n}\n\n.form-label-required::after {\n  content: \"*\";\n  color: #ef4444;\n  margin-left: 4px;\n}\n\n.form-input, .form-select, .form-textarea {\n  padding: 10px 14px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 0.875rem;\n  transition: border-color 0.15s ease;\n  background-color: white;\n}\n\n.form-input:focus, .form-select:focus, .form-textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.form-input:read-only {\n  background-color: #f9fafb;\n  color: #6b7280;\n}\n\n.calculation-field {\n  background-color: #f0f9ff !important;\n  border-color: #3b82f6 !important;\n  font-weight: 600 !important;\n  color: #1e40af !important;\n}\n\n.form-textarea {\n  resize: vertical;\n  min-height: 80px;\n}\n\n.form-error {\n  color: #ef4444;\n  font-size: 0.75rem;\n  margin-top: 4px;\n}\n\n/* Input Group */\n.input-group {\n  display: flex;\n  gap: 8px;\n  align-items: stretch;\n}\n\n.input-group .form-input {\n  flex: 1;\n}\n\n/* Balance Grid */\n.balance-grid {\n  display: grid;\n  gap: 24px;\n  grid-template-columns: 1fr;\n}\n\n@media (min-width: 768px) {\n  .balance-grid {\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n.balance-column {\n  padding: 20px;\n  border: 2px solid #e5e7eb;\n  border-radius: 8px;\n  background-color: #f9fafb;\n}\n\n.balance-column-title {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #374151;\n  margin-bottom: 16px;\n  text-align: center;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #d1d5db;\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-weight: 500;\n  font-size: 0.875rem;\n  cursor: pointer;\n  transition: all 0.15s ease;\n  border: 1px solid transparent;\n}\n\n.btn-primary {\n  background-color: #3b82f6;\n  color: white;\n}\n\n.btn-primary:hover {\n  background-color: #2563eb;\n}\n\n.btn-secondary {\n  background-color: #6b7280;\n  color: white;\n}\n\n.btn-secondary:hover {\n  background-color: #4b5563;\n}\n\n.btn-outline {\n  background-color: transparent;\n  border-color: #d1d5db;\n  color: #374151;\n}\n\n.btn-outline:hover {\n  background-color: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.btn-outline-light {\n  background-color: rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  color: white;\n}\n\n.btn-outline-light:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n/* Utility Classes */\n.flex {\n  display: flex;\n}\n\n.justify-end {\n  justify-content: flex-end;\n}\n\n.gap-3 {\n  gap: 12px;\n}\n\n.mb-6 {\n  margin-bottom: 24px;\n}\n\n.mt-4 {\n  margin-top: 16px;\n}\n\n.p-6 {\n  padding: 24px;\n}\n\n.p-0 {\n  padding: 0;\n}\n\n/* Breadcrumb */\n.breadcrumb {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 12px;\n  font-size: 0.875rem;\n  color: #6b7280;\n}\n\n.breadcrumb-separator {\n  font-size: 16px;\n  width: 16px;\n  height: 16px;\n  color: #9ca3af;\n}\n\n.breadcrumb-active {\n  color: #374151;\n  font-weight: 500;\n}\n\n/* Content Header */\n.content-header {\n  padding-bottom: 16px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.text-page-title {\n  font-size: 1.875rem;\n  font-weight: 700;\n  color: #111827;\n  margin-bottom: 8px;\n}\n\n.text-body {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n/* Animation */\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n","size_bytes":8300},"src/app/components/transaction/loan-taken/loan-taken.component.ts":{"content":"\nimport { Component, signal, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDialogModule, MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTableDataSource } from '@angular/material/table';\n\ninterface LoanSummary {\n  loanNo: string;\n  loanDate: Date;\n  amount: number;\n  member: string;\n  edpNo: string;\n}\n\ninterface Employee {\n  edpNo: string;\n  memberName: string;\n}\n\ninterface GivenTakenMember {\n  memNo: string;\n  name: string;\n}\n\n@Component({\n  selector: 'app-loan-taken',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatIconModule,\n    MatRadioModule,\n    MatDialogModule,\n    MatTableModule\n  ],\n  template: `\n    <div class=\"animate-fade-in\">\n      <!-- Page Header -->\n      <div class=\"content-header mb-6\">\n        <div class=\"breadcrumb\">\n          <span>Transaction</span>\n          <mat-icon class=\"breadcrumb-separator\">chevron_right</mat-icon>\n          <span class=\"breadcrumb-active\">Loan Taken</span>\n        </div>\n        <h1 class=\"text-page-title\">Loan Entry</h1>\n        <p class=\"text-body text-gray-600 dark:text-gray-400\">Manage loan applications and processing</p>\n      </div>\n\n      <!-- Main Loan Form -->\n      <form class=\"form-container\" [formGroup]=\"loanForm\">\n        <mat-card class=\"card\">\n          <!-- Card Header -->\n          <div class=\"card-header bg-gradient-to-r from-blue-600 to-purple-600\">\n            <div class=\"card-title\">\n              <mat-icon>account_balance</mat-icon>\n              <span>Loan Entry</span>\n            </div>\n          </div>\n\n          <mat-card-content class=\"p-0\">\n            <div class=\"p-6\">\n              <!-- Main Form Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>description</mat-icon>\n                  <span>Loan Information</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-row\">\n                    <!-- Left Column -->\n                    <div class=\"form-column\">\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">Loan Type</label>\n                        <select class=\"form-select\" formControlName=\"loanType\">\n                          <option value=\"\">Select loan type</option>\n                          <option value=\"General\">General Loan</option>\n                          <option value=\"Emergency\">Emergency Loan</option>\n                          <option value=\"Festival\">Festival Loan</option>\n                          <option value=\"Medical\">Medical Loan</option>\n                        </select>\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('loanType')?.invalid && loanForm.get('loanType')?.touched\">\n                          Loan type is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">Loan No.</label>\n                        <div class=\"input-group\">\n                          <input \n                            type=\"text\" \n                            class=\"form-input\"\n                            placeholder=\"Enter loan number\"\n                            formControlName=\"loanNo\">\n                          <button type=\"button\" class=\"btn btn-outline\" (click)=\"openLoanSummary()\">\n                            <mat-icon>search</mat-icon>\n                          </button>\n                        </div>\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('loanNo')?.invalid && loanForm.get('loanNo')?.touched\">\n                          Loan number is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">Loan Date</label>\n                        <input \n                          type=\"date\" \n                          class=\"form-input\"\n                          formControlName=\"loanDate\">\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('loanDate')?.invalid && loanForm.get('loanDate')?.touched\">\n                          Loan date is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">EDP No.</label>\n                        <div class=\"input-group\">\n                          <input \n                            type=\"text\" \n                            class=\"form-input\"\n                            placeholder=\"Enter EDP number\"\n                            formControlName=\"edpNo\">\n                          <button type=\"button\" class=\"btn btn-outline\" (click)=\"openEmployeeSearch()\">\n                            <mat-icon>search</mat-icon>\n                          </button>\n                        </div>\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('edpNo')?.invalid && loanForm.get('edpNo')?.touched\">\n                          EDP number is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Name</label>\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Auto-filled from employee search\"\n                          formControlName=\"name\"\n                          readonly>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">Loan Amount</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Enter loan amount\"\n                          formControlName=\"loanAmount\"\n                          (input)=\"calculateNetLoan()\">\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('loanAmount')?.invalid && loanForm.get('loanAmount')?.touched\">\n                          Loan amount is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Previous Loan (Remaining)</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Previous loan amount\"\n                          formControlName=\"previousLoan\"\n                          (input)=\"calculateNetLoan()\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Net Loan</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input calculation-field\"\n                          placeholder=\"Auto-calculated\"\n                          formControlName=\"netLoan\"\n                          readonly>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">No. of Inst.</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Number of installments\"\n                          formControlName=\"noOfInstallments\"\n                          (input)=\"calculateInstallmentAmount()\">\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('noOfInstallments')?.invalid && loanForm.get('noOfInstallments')?.touched\">\n                          Number of installments is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Inst. Amount</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input calculation-field\"\n                          placeholder=\"Auto-calculated\"\n                          formControlName=\"installmentAmount\"\n                          readonly>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Purpose</label>\n                        <textarea \n                          class=\"form-textarea\"\n                          placeholder=\"Enter purpose of loan\"\n                          rows=\"3\"\n                          formControlName=\"purpose\"></textarea>\n                      </div>\n\n                      <div class=\"form-field\" *ngIf=\"requiresAuthorization()\">\n                        <label class=\"form-label form-label-required\">Authorized By</label>\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Authorization required\"\n                          formControlName=\"authorizedBy\">\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('authorizedBy')?.invalid && loanForm.get('authorizedBy')?.touched\">\n                          Authorization is required for this loan amount\n                        </div>\n                      </div>\n                    </div>\n\n                    <!-- Right Column -->\n                    <div class=\"form-column\">\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Share</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Share amount\"\n                          formControlName=\"share\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">CD</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"CD amount\"\n                          formControlName=\"cd\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Last Salary</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Last salary\"\n                          formControlName=\"lastSalary\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Share</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Share amount\"\n                          formControlName=\"shareRight\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">CD</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"CD amount\"\n                          formControlName=\"cdRight\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">MWF</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"MWF amount\"\n                          formControlName=\"mwf\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Pay Amount</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Pay amount\"\n                          formControlName=\"payAmount\">\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Payment Mode Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>payment</mat-icon>\n                  <span>Payment Mode</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <mat-radio-group formControlName=\"paymentMode\" class=\"payment-mode-group\">\n                    <mat-radio-button value=\"Cash\" class=\"payment-mode-option\">Cash</mat-radio-button>\n                    <mat-radio-button value=\"Cheque\" class=\"payment-mode-option\">Cheque</mat-radio-button>\n                    <mat-radio-button value=\"Opening\" class=\"payment-mode-option\">Opening</mat-radio-button>\n                  </mat-radio-group>\n\n                  <div class=\"cheque-details\" *ngIf=\"loanForm.get('paymentMode')?.value === 'Cheque'\">\n                    <div class=\"form-grid form-grid-3\">\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Bank Name</label>\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Enter bank name\"\n                          formControlName=\"bankName\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Cheque No.</label>\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Enter cheque number\"\n                          formControlName=\"chequeNo\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Cheque Date</label>\n                        <input \n                          type=\"date\" \n                          class=\"form-input\"\n                          formControlName=\"chequeDate\">\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Tabs Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>swap_horiz</mat-icon>\n                  <span>Given & Taken Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <mat-tab-group class=\"member-tabs\">\n                    <mat-tab label=\"Given\">\n                      <div class=\"tab-content\">\n                        <div class=\"table-container\">\n                          <table class=\"member-table\">\n                            <thead>\n                              <tr>\n                                <th>Mem No</th>\n                                <th>Name</th>\n                                <th>Actions</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr *ngFor=\"let member of givenMembers; let i = index\">\n                                <td>{{member.memNo}}</td>\n                                <td>{{member.name}}</td>\n                                <td>\n                                  <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"removeGivenMember(i)\">\n                                    <mat-icon>delete</mat-icon>\n                                  </button>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"givenMembers.length === 0\">\n                                <td colspan=\"3\" class=\"text-center text-gray-500\">No members added</td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n                        <button type=\"button\" class=\"btn btn-primary mt-3\" (click)=\"addGivenMember()\">\n                          <mat-icon>add</mat-icon>\n                          Add Member\n                        </button>\n                      </div>\n                    </mat-tab>\n\n                    <mat-tab label=\"Taken\">\n                      <div class=\"tab-content\">\n                        <div class=\"table-container\">\n                          <table class=\"member-table\">\n                            <thead>\n                              <tr>\n                                <th>Mem No</th>\n                                <th>Name</th>\n                                <th>Actions</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr *ngFor=\"let member of takenMembers; let i = index\">\n                                <td>{{member.memNo}}</td>\n                                <td>{{member.name}}</td>\n                                <td>\n                                  <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"removeTakenMember(i)\">\n                                    <mat-icon>delete</mat-icon>\n                                  </button>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"takenMembers.length === 0\">\n                                <td colspan=\"3\" class=\"text-center text-gray-500\">No members added</td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n                        <button type=\"button\" class=\"btn btn-primary mt-3\" (click)=\"addTakenMember()\">\n                          <mat-icon>add</mat-icon>\n                          Add Member\n                        </button>\n                      </div>\n                    </mat-tab>\n                  </mat-tab-group>\n                </div>\n              </div>\n              <!-- Loan Basic Details Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>description</mat-icon>\n                  <span>Loan Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-3\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Loan Type</label>\n                      <select class=\"form-select\" formControlName=\"loanType\">\n                        <option value=\"\">Select loan type</option>\n                        <option value=\"General\">General Loan</option>\n                        <option value=\"Emergency\">Emergency Loan</option>\n                        <option value=\"Festival\">Festival Loan</option>\n                        <option value=\"Medical\">Medical Loan</option>\n                      </select>\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('loanType')?.invalid && loanForm.get('loanType')?.touched\">\n                        Loan type is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Loan No.</label>\n                      <input \n                        type=\"text\" \n                        class=\"form-input\"\n                        placeholder=\"Enter loan number\"\n                        formControlName=\"loanNo\">\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('loanNo')?.invalid && loanForm.get('loanNo')?.touched\">\n                        Loan number is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Loan Date</label>\n                      <input \n                        type=\"date\" \n                        class=\"form-input\"\n                        formControlName=\"loanDate\">\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('loanDate')?.invalid && loanForm.get('loanDate')?.touched\">\n                        Loan date is required\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Employee Details Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>person</mat-icon>\n                  <span>Employee Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-2\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">EDP No.</label>\n                      <div class=\"input-group\">\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Enter EDP number\"\n                          formControlName=\"edpNo\">\n                        <button type=\"button\" class=\"btn btn-outline\" (click)=\"openEmployeeSearch()\">\n                          <mat-icon>search</mat-icon>\n                          Search\n                        </button>\n                      </div>\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('edpNo')?.invalid && loanForm.get('edpNo')?.touched\">\n                        EDP number is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Name</label>\n                      <input \n                        type=\"text\" \n                        class=\"form-input\"\n                        placeholder=\"Auto-filled from employee search\"\n                        formControlName=\"name\"\n                        readonly>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Loan Amount Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>payments</mat-icon>\n                  <span>Loan Amount & Terms</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-3\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Loan Amount</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter loan amount\"\n                        formControlName=\"loanAmount\"\n                        (input)=\"calculateNetLoan()\">\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('loanAmount')?.invalid && loanForm.get('loanAmount')?.touched\">\n                        Loan amount is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Previous Loan (Remaining)</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Auto-calculated\"\n                        formControlName=\"previousLoan\"\n                        readonly>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Net Loan</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input calculation-field\"\n                        placeholder=\"Auto-calculated\"\n                        formControlName=\"netLoan\"\n                        readonly>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">No. of Installments</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter number of installments\"\n                        formControlName=\"noOfInstallments\"\n                        (input)=\"calculateInstallmentAmount()\">\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('noOfInstallments')?.invalid && loanForm.get('noOfInstallments')?.touched\">\n                        Number of installments is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Installment Amount</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input calculation-field\"\n                        placeholder=\"Auto-calculated\"\n                        formControlName=\"installmentAmount\"\n                        readonly>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Last Salary</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter last salary\"\n                        formControlName=\"lastSalary\">\n                    </div>\n                  </div>\n\n                  <div class=\"form-field mt-4\">\n                    <label class=\"form-label\">Purpose</label>\n                    <textarea \n                      class=\"form-textarea\"\n                      placeholder=\"Enter purpose of loan\"\n                      rows=\"3\"\n                      formControlName=\"purpose\"></textarea>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Balance Information Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>account_balance_wallet</mat-icon>\n                  <span>Balance Information</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"balance-grid\">\n                    <div class=\"balance-column\">\n                      <h4 class=\"balance-column-title\">Current Balance</h4>\n                      <div class=\"form-grid form-grid-2\">\n                        <div class=\"form-field\">\n                          <label class=\"form-label\">Share</label>\n                          <input \n                            type=\"number\" \n                            class=\"form-input\"\n                            placeholder=\"Current share\"\n                            formControlName=\"shareLeft\">\n                        </div>\n                        <div class=\"form-field\">\n                          <label class=\"form-label\">CD (Credit Deposit)</label>\n                          <input \n                            type=\"number\" \n                            class=\"form-input\"\n                            placeholder=\"Current CD\"\n                            formControlName=\"cdLeft\">\n                        </div>\n                      </div>\n                    </div>\n\n                    <div class=\"balance-column\">\n                      <h4 class=\"balance-column-title\">After Loan</h4>\n                      <div class=\"form-grid form-grid-2\">\n                        <div class=\"form-field\">\n                          <label class=\"form-label\">Share</label>\n                          <input \n                            type=\"number\" \n                            class=\"form-input\"\n                            placeholder=\"Remaining share\"\n                            formControlName=\"shareRight\">\n                        </div>\n                        <div class=\"form-field\">\n                          <label class=\"form-label\">CD</label>\n                          <input \n                            type=\"number\" \n                            class=\"form-input\"\n                            placeholder=\"Remaining CD\"\n                            formControlName=\"cdRight\">\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div class=\"form-grid form-grid-2 mt-4\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">MWF</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter MWF amount\"\n                        formControlName=\"mwf\">\n                    </div>\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Pay Amount</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter pay amount\"\n                        formControlName=\"payAmount\">\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Authorization Section -->\n              <div class=\"form-section\" *ngIf=\"requiresAuthorization()\">\n                <div class=\"form-section-header\">\n                  <mat-icon>verified</mat-icon>\n                  <span>Authorization</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-field\">\n                    <label class=\"form-label form-label-required\">Authorized By</label>\n                    <select class=\"form-select\" formControlName=\"authorizedBy\">\n                      <option value=\"\">Select authorizing officer</option>\n                      <option value=\"Manager\">Manager</option>\n                      <option value=\"Assistant Manager\">Assistant Manager</option>\n                      <option value=\"President\">President</option>\n                      <option value=\"Secretary\">Secretary</option>\n                    </select>\n                    <div class=\"form-error\" *ngIf=\"loanForm.get('authorizedBy')?.invalid && loanForm.get('authorizedBy')?.touched\">\n                      Authorization is required for this loan amount\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Payment Details Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>payment</mat-icon>\n                  <span>Payment Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-3\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Payment Mode</label>\n                      <select class=\"form-select\" formControlName=\"paymentMode\">\n                        <option value=\"\">Select payment mode</option>\n                        <option value=\"Cash\">Cash</option>\n                        <option value=\"Cheque\">Cheque</option>\n                        <option value=\"Bank Transfer\">Bank Transfer</option>\n                      </select>\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('paymentMode')?.invalid && loanForm.get('paymentMode')?.touched\">\n                        Payment mode is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Bank</label>\n                      <input \n                        type=\"text\" \n                        class=\"form-input\"\n                        placeholder=\"Enter bank name\"\n                        formControlName=\"bank\">\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Cheque No.</label>\n                      <input \n                        type=\"text\" \n                        class=\"form-input\"\n                        placeholder=\"Enter cheque number\"\n                        formControlName=\"chequeNo\">\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Cheque Date</label>\n                      <input \n                        type=\"date\" \n                        class=\"form-input\"\n                        formControlName=\"chequeDate\">\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Transaction Details Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>swap_horiz</mat-icon>\n                  <span>Transaction Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-2\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Given</label>\n                      <select class=\"form-select\" formControlName=\"given\">\n                        <option value=\"\">Select member</option>\n                        <option value=\"M001 - John Doe\">M001 - John Doe</option>\n                        <option value=\"M002 - Jane Smith\">M002 - Jane Smith</option>\n                        <option value=\"M003 - Mike Johnson\">M003 - Mike Johnson</option>\n                      </select>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Taken</label>\n                      <select class=\"form-select\" formControlName=\"taken\">\n                        <option value=\"\">Select member</option>\n                        <option value=\"M001 - John Doe\">M001 - John Doe</option>\n                        <option value=\"M002 - Jane Smith\">M002 - Jane Smith</option>\n                        <option value=\"M003 - Mike Johnson\">M003 - Mike Johnson</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </mat-card-content>\n\n          <!-- Action Buttons -->\n          <div class=\"card-actions\">\n            <div class=\"flex justify-end gap-3\">\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onValidate()\">\n                <mat-icon>check_circle</mat-icon>\n                Validate\n              </button>\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSave()\">\n                <mat-icon>save</mat-icon>\n                Save\n              </button>\n              <button type=\"button\" class=\"btn btn-warning\" (click)=\"onClear()\">\n                <mat-icon>clear</mat-icon>\n                Clear\n              </button>\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onClose()\">\n                <mat-icon>close</mat-icon>\n                Close\n              </button>\n            </div>\n          </div>\n        </mat-card>\n      </form>\n    </div>\n  `,\n  styleUrl: './loan-taken.component.css'\n})\nexport class LoanTakenComponent {\n  loanForm: FormGroup;\n  givenMembers: GivenTakenMember[] = [];\n  takenMembers: GivenTakenMember[] = [];\n  \n  // Sample data\n  loanSummaryData: LoanSummary[] = [\n    { loanNo: 'L001', loanDate: new Date('2024-01-15'), amount: 50000, member: 'John Doe', edpNo: 'EMP001' },\n    { loanNo: 'L002', loanDate: new Date('2024-01-20'), amount: 75000, member: 'Jane Smith', edpNo: 'EMP002' },\n    { loanNo: 'L003', loanDate: new Date('2024-01-25'), amount: 30000, member: 'Mike Johnson', edpNo: 'EMP003' }\n  ];\n\n  employeeData: Employee[] = [\n    { edpNo: 'EMP001', memberName: 'John Doe' },\n    { edpNo: 'EMP002', memberName: 'Jane Smith' },\n    { edpNo: 'EMP003', memberName: 'Mike Johnson' },\n    { edpNo: 'EMP004', memberName: 'Sarah Wilson' },\n    { edpNo: 'EMP005', memberName: 'David Brown' }\n  ];\n\n  constructor(private fb: FormBuilder, private dialog: MatDialog) {\n    this.loanForm = this.fb.group({\n      loanType: ['', Validators.required],\n      loanNo: ['', Validators.required],\n      loanDate: [new Date().toISOString().split('T')[0], Validators.required],\n      edpNo: ['', Validators.required],\n      name: [''],\n      loanAmount: ['', [Validators.required, Validators.min(1)]],\n      previousLoan: [0],\n      netLoan: [0],\n      noOfInstallments: ['', [Validators.required, Validators.min(1)]],\n      installmentAmount: [0],\n      purpose: [''],\n      authorizedBy: [''],\n      paymentMode: ['Cash', Validators.required],\n      bankName: [''],\n      chequeNo: [''],\n      chequeDate: [''],\n      share: [0],\n      cd: [0],\n      shareRight: [0],\n      cdRight: [0],\n      lastSalary: [0],\n      mwf: [0],\n      payAmount: [0]\n    });\n  }\n\n  calculateNetLoan() {\n    const loanAmount = this.loanForm.get('loanAmount')?.value || 0;\n    const previousLoan = this.loanForm.get('previousLoan')?.value || 0;\n    const netLoan = loanAmount - previousLoan;\n    this.loanForm.patchValue({ netLoan });\n    this.calculateInstallmentAmount();\n  }\n\n  calculateInstallmentAmount() {\n    const netLoan = this.loanForm.get('netLoan')?.value || 0;\n    const noOfInstallments = this.loanForm.get('noOfInstallments')?.value || 1;\n    const installmentAmount = netLoan / noOfInstallments;\n    this.loanForm.patchValue({ installmentAmount: Math.round(installmentAmount) });\n  }\n\n  requiresAuthorization(): boolean {\n    const loanAmount = this.loanForm.get('loanAmount')?.value || 0;\n    return loanAmount > 100000; // Require authorization for loans above 1 lakh\n  }\n\n  addGivenMember() {\n    // In a real application, this would open a member selection dialog\n    const newMember: GivenTakenMember = {\n      memNo: 'M' + (this.givenMembers.length + 1).toString().padStart(3, '0'),\n      name: 'Member ' + (this.givenMembers.length + 1)\n    };\n    this.givenMembers.push(newMember);\n  }\n\n  removeGivenMember(index: number) {\n    this.givenMembers.splice(index, 1);\n  }\n\n  addTakenMember() {\n    // In a real application, this would open a member selection dialog\n    const newMember: GivenTakenMember = {\n      memNo: 'M' + (this.takenMembers.length + 1).toString().padStart(3, '0'),\n      name: 'Member ' + (this.takenMembers.length + 1)\n    };\n    this.takenMembers.push(newMember);\n  }\n\n  removeTakenMember(index: number) {\n    this.takenMembers.splice(index, 1);\n  }\n\n  openLoanSummary() {\n    const dialogRef = this.dialog.open(LoanSummaryDialog, {\n      width: '800px',\n      data: this.loanSummaryData\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.loanForm.patchValue({\n          loanNo: result.loanNo\n        });\n      }\n    });\n  }\n\n  openEmployeeSearch() {\n    const dialogRef = this.dialog.open(EmployeeSearchDialog, {\n      width: '600px',\n      data: this.employeeData\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.loanForm.patchValue({\n          edpNo: result.edpNo,\n          name: result.memberName\n        });\n      }\n    });\n  }\n\n  onValidate() {\n    this.markFormGroupTouched(this.loanForm);\n    if (this.loanForm.valid) {\n      alert('All fields are valid!');\n    } else {\n      alert('Please fill in all required fields.');\n    }\n  }\n\n  onSave() {\n    if (this.loanForm.valid) {\n      const formData = {\n        ...this.loanForm.value,\n        givenMembers: this.givenMembers,\n        takenMembers: this.takenMembers\n      };\n      console.log('Loan data:', formData);\n      alert('Loan data saved successfully!');\n    } else {\n      this.markFormGroupTouched(this.loanForm);\n      alert('Please fill in all required fields.');\n    }\n  }\n\n  onClear() {\n    this.loanForm.reset();\n    this.loanForm.patchValue({\n      loanDate: new Date().toISOString().split('T')[0],\n      paymentMode: 'Cash',\n      previousLoan: 0,\n      netLoan: 0,\n      installmentAmount: 0,\n      share: 0,\n      cd: 0,\n      shareRight: 0,\n      cdRight: 0,\n      lastSalary: 0,\n      mwf: 0,\n      payAmount: 0\n    });\n    this.givenMembers = [];\n    this.takenMembers = [];\n  }\n\n  onClose() {\n    if (confirm('Are you sure you want to close? Any unsaved changes will be lost.')) {\n      this.onClear();\n    }\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      control?.markAsTouched({ onlySelf: true });\n    });\n  }\n}\n\n// Loan Summary Dialog Component\n@Component({\n  selector: 'loan-summary-dialog',\n  standalone: true,\n  imports: [CommonModule, MatDialogModule, MatButtonModule, MatIconModule, MatTableModule, MatFormFieldModule, MatInputModule],\n  template: `\n    <div class=\"dialog-container\">\n      <div class=\"dialog-header\">\n        <h2 class=\"dialog-title\">\n          <mat-icon>list</mat-icon>\n          Loan Summary\n        </h2>\n        <button mat-icon-button (click)=\"close()\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n\n      <div class=\"dialog-content\">\n        <div class=\"search-container mb-4\">\n          <mat-form-field appearance=\"outline\" class=\"w-full\">\n            <mat-icon matPrefix>search</mat-icon>\n            <input matInput placeholder=\"Search loans...\" (input)=\"applyFilter()\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"table-container\">\n          <table mat-table [dataSource]=\"dataSource\" class=\"loan-summary-table\">\n            <ng-container matColumnDef=\"loanNo\">\n              <th mat-header-cell *matHeaderCellDef>Loan No.</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.loanNo}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"loanDate\">\n              <th mat-header-cell *matHeaderCellDef>Loan Date</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.loanDate | date:'dd/MM/yyyy'}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"amount\">\n              <th mat-header-cell *matHeaderCellDef>Amount</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.amount | currency:'INR':'symbol':'1.0-0'}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"member\">\n              <th mat-header-cell *matHeaderCellDef>Member</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.member}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"edpNo\">\n              <th mat-header-cell *matHeaderCellDef>EDP No.</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.edpNo}}</td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" \n                class=\"clickable-row\" \n                (click)=\"selectLoan(row)\"></tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .dialog-container {\n      padding: 0;\n    }\n    .dialog-header {\n      padding: 20px 24px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .dialog-title {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      margin: 0;\n      font-size: 1.25rem;\n      font-weight: 600;\n    }\n    .dialog-content {\n      padding: 24px;\n    }\n    .table-container {\n      max-height: 400px;\n      overflow-y: auto;\n    }\n    .loan-summary-table {\n      width: 100%;\n    }\n    .w-full {\n      width: 100%;\n    }\n    .mb-4 {\n      margin-bottom: 16px;\n    }\n  `]\n})\nexport class LoanSummaryDialog {\n  displayedColumns: string[] = ['loanNo', 'loanDate', 'amount', 'member', 'edpNo'];\n  dataSource = new MatTableDataSource<LoanSummary>([]);\n  searchTerm = '';\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: LoanSummary[], private dialogRef: MatDialogRef<LoanSummaryDialog>) {\n    this.dataSource.data = data;\n  }\n\n  applyFilter() {\n    this.dataSource.filter = this.searchTerm.trim().toLowerCase();\n  }\n\n  selectLoan(loan: LoanSummary) {\n    this.dialogRef.close(loan);\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n\n// Employee Search Dialog Component\n@Component({\n  selector: 'employee-search-dialog',\n  standalone: true,\n  imports: [CommonModule, MatDialogModule, MatButtonModule, MatIconModule, MatTableModule, MatFormFieldModule, MatInputModule],\n  template: `\n    <div class=\"dialog-container\">\n      <div class=\"dialog-header\">\n        <h2 class=\"dialog-title\">\n          <mat-icon>search</mat-icon>\n          Employee Search\n        </h2>\n        <button mat-icon-button (click)=\"close()\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n\n      <div class=\"dialog-content\">\n        <div class=\"search-container mb-4\">\n          <mat-form-field appearance=\"outline\" class=\"w-full\">\n            <mat-icon matPrefix>search</mat-icon>\n            <input matInput placeholder=\"Search employees...\" (input)=\"applyFilter()\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"table-container\">\n          <table mat-table [dataSource]=\"dataSource\" class=\"employee-search-table\">\n            <ng-container matColumnDef=\"edpNo\">\n              <th mat-header-cell *matHeaderCellDef>EDP No.</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.edpNo}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"memberName\">\n              <th mat-header-cell *matHeaderCellDef>Member Name</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.memberName}}</td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" \n                class=\"clickable-row\" \n                (click)=\"selectEmployee(row)\"></tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .dialog-container {\n      padding: 0;\n    }\n    .dialog-header {\n      padding: 20px 24px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .dialog-title {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      margin: 0;\n      font-size: 1.25rem;\n      font-weight: 600;\n    }\n    .dialog-content {\n      padding: 24px;\n    }\n    .table-container {\n      max-height: 400px;\n      overflow-y: auto;\n    }\n    .employee-search-table {\n      width: 100%;\n    }\n    .clickable-row {\n      cursor: pointer;\n    }\n    .clickable-row:hover {\n      background-color: #f5f5f5;\n    }\n    .w-full {\n      width: 100%;\n    }\n    .mb-4 {\n      margin-bottom: 16px;\n    }\n  `]\n})\nexport class EmployeeSearchDialog {\n  displayedColumns: string[] = ['edpNo', 'memberName'];\n  dataSource = new MatTableDataSource<Employee>([]);\n  searchTerm = '';\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Employee[], private dialogRef: MatDialogRef<EmployeeSearchDialog>) {\n    this.dataSource.data = data;\n  }\n\n  applyFilter() {\n    this.dataSource.filter = this.searchTerm.trim().toLowerCase();\n  }\n\n  selectEmployee(employee: Employee) {\n    this.dialogRef.close(employee);\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n","size_bytes":48143},"src/app/components/transaction/monthly-demand/monthly-demand.component.css":{"content":"\n/* Monthly Demand Processing Styles */\n/* @import '../../../styles/forms.css';\n@import '../../../styles/cards.css';\n@import '../../../styles/buttons.css';\n@import '../../../styles/tables.css'; */\n\n.demand-tabs {\n  --mdc-tab-text-label-color-active: #1976d2;\n  --mdc-tab-indicator-active-indicator-color: #1976d2;\n}\n\n.demand-table {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.875rem;\n  margin: 0;\n}\n\n.demand-table th {\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n  color: #1e293b;\n  font-weight: 600;\n  padding: 12px 8px;\n  text-align: left;\n  border-bottom: 2px solid #e2e8f0;\n  white-space: nowrap;\n  font-size: 0.8rem;\n}\n\n.demand-table td {\n  padding: 10px 8px;\n  border-bottom: 1px solid #f1f5f9;\n  white-space: nowrap;\n}\n\n.demand-table tbody tr {\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.demand-table tbody tr:hover {\n  background-color: #f8fafc;\n}\n\n.demand-table tbody tr.selected-row {\n  background: linear-gradient(135deg, #dbeafe 0%, #e0f2fe 100%);\n  border-left: 4px solid #3b82f6;\n}\n\n.number-cell {\n  text-align: right;\n  font-family: 'Roboto Mono', monospace;\n  font-size: 0.8rem;\n}\n\n.interest-cell {\n  background-color: #fef3c7;\n  font-weight: 600;\n}\n\n.summary-panel {\n  padding: 16px 24px;\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n  border-top: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.summary-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n}\n\n.summary-item label {\n  font-size: 0.875rem;\n  color: #64748b;\n  font-weight: 500;\n}\n\n.total-amount {\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #1e293b;\n  font-family: 'Roboto Mono', monospace;\n}\n\n.closing-panel {\n  padding: 24px;\n}\n\n.closing-stats {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 16px;\n  margin-bottom: 24px;\n}\n\n.stat-card {\n  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.stat-value {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 4px;\n  font-family: 'Roboto Mono', monospace;\n}\n\n.stat-label {\n  font-size: 0.875rem;\n  color: #64748b;\n  font-weight: 500;\n}\n\n.closing-actions {\n  display: flex;\n  gap: 16px;\n  justify-content: center;\n}\n\n.interest-summary-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 16px;\n}\n\n.interest-summary-table th,\n.interest-summary-table td {\n  padding: 12px;\n  text-align: left;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.interest-summary-table th {\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n  font-weight: 600;\n}\n\n.total-row {\n  background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);\n  font-weight: 600;\n}\n\n.total-field {\n  background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);\n  font-weight: 700;\n  color: #166534;\n  font-family: 'Roboto Mono', monospace;\n}\n\n.btn-group {\n  display: flex;\n  gap: 12px;\n  align-items: center;\n}\n\n.card-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 24px;\n  border-top: 1px solid #e2e8f0;\n  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n}\n\n.form-grid-4 {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 16px;\n}\n\n@media (max-width: 1200px) {\n  .form-grid-4 {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .closing-stats {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@media (max-width: 768px) {\n  .form-grid-4 {\n    grid-template-columns: 1fr;\n  }\n  \n  .closing-stats {\n    grid-template-columns: 1fr;\n  }\n  \n  .summary-panel {\n    flex-direction: column;\n    gap: 16px;\n  }\n  \n  .card-actions {\n    flex-direction: column;\n    gap: 16px;\n  }\n  \n  .demand-table {\n    font-size: 0.75rem;\n  }\n  \n  .demand-table th,\n  .demand-table td {\n    padding: 8px 4px;\n  }\n}\n\n.table-container {\n  overflow-x: auto;\n  margin: 16px 0;\n}\n\n.tab-content {\n  padding: 16px;\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-in;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Print styles */\n@media print {\n  .card-actions,\n  .btn,\n  .mat-tab-header {\n    display: none !important;\n  }\n  \n  .demand-table {\n    font-size: 0.7rem;\n  }\n  \n  .demand-table th,\n  .demand-table td {\n    padding: 4px 2px;\n  }\n}\n","size_bytes":4457},"src/app/components/transaction/monthly-demand/monthly-demand.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatDialogModule } from '@angular/material/dialog';\n\ninterface DemandRecord {\n  edpNo: string;\n  memberName: string;\n  loanAmt: number;\n  cd: number;\n  loan: number;\n  interest: number;\n  eLoan: number;\n  eInterest: number;\n  net: number;\n  intDue: number;\n  pInt: number;\n  pDed: number;\n  las: number;\n  int: number;\n  lasIntDue: number;\n}\n\ninterface LoanInterestRecord {\n  edpNo: string;\n  memberName: string;\n  loanIntAmt: number;\n}\n\n@Component({\n  selector: 'app-monthly-demand',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatIconModule,\n    MatTableModule,\n    MatDialogModule\n  ],\n  template: `\n    <div class=\"animate-fade-in\">\n      <!-- Page Header -->\n      <div class=\"content-header mb-6\">\n        <div class=\"breadcrumb\">\n          <span>Transaction</span>\n          <mat-icon class=\"breadcrumb-separator\">chevron_right</mat-icon>\n          <span class=\"breadcrumb-active\">Monthly Demand Processing</span>\n        </div>\n        <h1 class=\"text-page-title\">Monthly Demand Processing</h1>\n        <p class=\"text-body text-gray-600 dark:text-gray-400\">Process monthly loan demands and interest calculations</p>\n      </div>\n\n      <!-- Month Selection -->\n      <mat-card class=\"card mb-6\">\n        <div class=\"card-header bg-gradient-to-r from-blue-600 to-purple-600\">\n          <div class=\"card-title\">\n            <mat-icon>calendar_month</mat-icon>\n            <span>Month Selection</span>\n          </div>\n        </div>\n        <mat-card-content class=\"p-6\">\n          <div class=\"form-grid form-grid-3\">\n            <div class=\"form-field\">\n              <label class=\"form-label form-label-required\">Processing Month</label>\n              <select class=\"form-select\" [(ngModel)]=\"selectedMonth\" (change)=\"loadMonthData()\">\n                <option value=\"\">Select Month</option>\n                <option value=\"2024-01\">January 2024</option>\n                <option value=\"2024-02\">February 2024</option>\n                <option value=\"2024-03\">March 2024</option>\n                <option value=\"2024-04\">April 2024</option>\n                <option value=\"2024-05\">May 2024</option>\n                <option value=\"2024-06\">June 2024</option>\n                <option value=\"2024-07\">July 2024</option>\n                <option value=\"2024-08\">August 2024</option>\n                <option value=\"2024-09\">September 2024</option>\n                <option value=\"2024-10\">October 2024</option>\n                <option value=\"2024-11\">November 2024</option>\n                <option value=\"2024-12\">December 2024</option>\n              </select>\n            </div>\n            <div class=\"form-field\">\n              <label class=\"form-label\">Status</label>\n              <input type=\"text\" class=\"form-input\" [value]=\"monthStatus\" readonly>\n            </div>\n            <div class=\"form-field\">\n              <label class=\"form-label\">Last Processed</label>\n              <input type=\"text\" class=\"form-input\" [value]=\"lastProcessed\" readonly>\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n\n      <!-- Demand Table Section -->\n      <mat-card class=\"card mb-6\">\n        <div class=\"card-header bg-gradient-to-r from-green-600 to-blue-600\">\n          <div class=\"card-title\">\n            <mat-icon>table_view</mat-icon>\n            <span>Monthly Demand Table</span>\n          </div>\n          <div class=\"card-actions\">\n            <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"calculateInterest()\">\n              <mat-icon>calculate</mat-icon>\n              Calculate Interest\n            </button>\n            <button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"postInterest()\" [disabled]=\"!canPostInterest()\">\n              <mat-icon>post_add</mat-icon>\n              Interest Post\n            </button>\n          </div>\n        </div>\n\n        <mat-card-content class=\"p-0\">\n          <mat-tab-group class=\"demand-tabs\">\n            <mat-tab label=\"Demand Processing\">\n              <div class=\"tab-content\">\n                <div class=\"table-container\">\n                  <table class=\"demand-table\">\n                    <thead>\n                      <tr>\n                        <th>EDP No.</th>\n                        <th>Member Name</th>\n                        <th>Loan Amt</th>\n                        <th>CD</th>\n                        <th>Loan</th>\n                        <th>Interest</th>\n                        <th>E-Loan</th>\n                        <th>Interest...</th>\n                        <th>Net...</th>\n                        <th>IntDue</th>\n                        <th>PInt</th>\n                        <th>PDed</th>\n                        <th>LAS</th>\n                        <th>Int</th>\n                        <th>LASIntDue</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let record of demandRecords; let i = index\" [class.selected-row]=\"selectedRowIndex === i\" (click)=\"selectRow(i, record)\">\n                        <td>{{record.edpNo}}</td>\n                        <td>{{record.memberName}}</td>\n                        <td class=\"number-cell\">{{record.loanAmt | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.cd | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.loan | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell interest-cell\">{{record.interest | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.eLoan | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell interest-cell\">{{record.eInterest | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.net | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.intDue | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.pInt | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.pDed | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.las | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.int | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.lasIntDue | currency:'INR':'symbol':'1.2-2'}}</td>\n                      </tr>\n                      <tr *ngIf=\"demandRecords.length === 0\">\n                        <td colspan=\"15\" class=\"text-center text-gray-500 py-8\">No demand records found for selected month</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                \n                <!-- Total Interest Summary -->\n                <div class=\"summary-panel\">\n                  <div class=\"summary-item\">\n                    <label>Total Interest:</label>\n                    <span class=\"total-amount\">{{getTotalInterest() | currency:'INR':'symbol':'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Total E-Interest:</label>\n                    <span class=\"total-amount\">{{getTotalEInterest() | currency:'INR':'symbol':'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Total Amount Due:</label>\n                    <span class=\"total-amount\">{{getTotalAmountDue() | currency:'INR':'symbol':'1.2-2'}}</span>\n                  </div>\n                </div>\n              </div>\n            </mat-tab>\n\n            <mat-tab label=\"Month Closing\">\n              <div class=\"tab-content\">\n                <div class=\"closing-panel\">\n                  <div class=\"closing-stats\">\n                    <div class=\"stat-card\">\n                      <div class=\"stat-value\">{{demandRecords.length}}</div>\n                      <div class=\"stat-label\">Total Members</div>\n                    </div>\n                    <div class=\"stat-card\">\n                      <div class=\"stat-value\">{{getTotalInterest() | currency:'INR':'symbol':'1.0-0'}}</div>\n                      <div class=\"stat-label\">Total Interest</div>\n                    </div>\n                    <div class=\"stat-card\">\n                      <div class=\"stat-value\">{{getProcessedCount()}}</div>\n                      <div class=\"stat-label\">Processed</div>\n                    </div>\n                    <div class=\"stat-card\">\n                      <div class=\"stat-value\">{{getPendingCount()}}</div>\n                      <div class=\"stat-label\">Pending</div>\n                    </div>\n                  </div>\n\n                  <div class=\"closing-actions\">\n                    <button type=\"button\" class=\"btn btn-warning\" (click)=\"validateMonth()\">\n                      <mat-icon>check_circle</mat-icon>\n                      Validate Month\n                    </button>\n                    <button type=\"button\" class=\"btn btn-success\" (click)=\"closeMonth()\" [disabled]=\"!canCloseMonth()\">\n                      <mat-icon>lock</mat-icon>\n                      Close Month\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </mat-tab>\n\n            <mat-tab label=\"Loan Interest Summary\">\n              <div class=\"tab-content\">\n                <div class=\"table-container\">\n                  <table class=\"interest-summary-table\">\n                    <thead>\n                      <tr>\n                        <th>EDP No.</th>\n                        <th>Member Name</th>\n                        <th>Loan Int Amt</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let record of loanInterestRecords\">\n                        <td>{{record.edpNo}}</td>\n                        <td>{{record.memberName}}</td>\n                        <td class=\"number-cell\">{{record.loanIntAmt | currency:'INR':'symbol':'1.2-2'}}</td>\n                      </tr>\n                      <tr class=\"total-row\">\n                        <td colspan=\"2\"><strong>Total</strong></td>\n                        <td class=\"number-cell\"><strong>{{getLoanInterestTotal() | currency:'INR':'symbol':'1.2-2'}}</strong></td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </mat-tab>\n          </mat-tab-group>\n        </mat-card-content>\n      </mat-card>\n\n      <!-- Member Detail Fields Section -->\n      <form [formGroup]=\"memberForm\">\n        <mat-card class=\"card\">\n          <div class=\"card-header bg-gradient-to-r from-purple-600 to-pink-600\">\n            <div class=\"card-title\">\n              <mat-icon>person</mat-icon>\n              <span>Member Detail Entry</span>\n            </div>\n          </div>\n\n          <mat-card-content class=\"p-6\">\n            <div class=\"form-section\">\n              <div class=\"form-section-header\">\n                <mat-icon>account_circle</mat-icon>\n                <span>Basic Information</span>\n              </div>\n              <div class=\"form-section-content\">\n                <div class=\"form-grid form-grid-4\">\n                  <div class=\"form-field\">\n                    <label class=\"form-label form-label-required\">EDP No.</label>\n                    <input \n                      type=\"text\" \n                      class=\"form-input\"\n                      formControlName=\"edpNo\"\n                      placeholder=\"Enter EDP number\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Name</label>\n                    <input \n                      type=\"text\" \n                      class=\"form-input\"\n                      formControlName=\"name\"\n                      placeholder=\"Member name\"\n                      readonly>\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Loan</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"loan\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Emrg. Loan</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"emergencyLoan\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-section\">\n              <div class=\"form-section-header\">\n                <mat-icon>payments</mat-icon>\n                <span>Interest & Deductions</span>\n              </div>\n              <div class=\"form-section-content\">\n                <div class=\"form-grid form-grid-4\">\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Int Due</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"intDue\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">LAS Int Due</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"lasIntDue\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">CD</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"cd\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Interest</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"interest\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">P. Int</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"pInt\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">LAS</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"las\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Interest</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"interestSecond\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">P. Ded</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"pDed\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-section\">\n              <div class=\"form-section-header\">\n                <mat-icon>calculate</mat-icon>\n                <span>Calculated Total</span>\n              </div>\n              <div class=\"form-section-content\">\n                <div class=\"form-field\">\n                  <label class=\"form-label\">Total Amount</label>\n                  <input \n                    type=\"number\" \n                    class=\"form-input total-field\"\n                    formControlName=\"totalAmount\"\n                    readonly>\n                </div>\n              </div>\n            </div>\n          </mat-card-content>\n\n          <!-- Action Buttons -->\n          <div class=\"card-actions\">\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"clearMemberForm()\">\n                <mat-icon>clear</mat-icon>\n                Clear\n              </button>\n              <button type=\"button\" class=\"btn btn-success\" (click)=\"exportToExcel()\">\n                <mat-icon>file_download</mat-icon>\n                Excel\n              </button>\n              <button type=\"button\" class=\"btn btn-info\" (click)=\"printDemandTable()\">\n                <mat-icon>print</mat-icon>\n                Print\n              </button>\n              <button type=\"button\" class=\"btn btn-warning\" (click)=\"printLoanDetails()\">\n                <mat-icon>description</mat-icon>\n                Print Loan\n              </button>\n            </div>\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"saveMemberData()\">\n                <mat-icon>save</mat-icon>\n                Save\n              </button>\n              <button type=\"button\" class=\"btn btn-danger\" (click)=\"resetAll()\">\n                <mat-icon>refresh</mat-icon>\n                Reset\n              </button>\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeForm()\">\n                <mat-icon>close</mat-icon>\n                Close\n              </button>\n            </div>\n          </div>\n        </mat-card>\n      </form>\n    </div>\n  `,\n  styleUrl: './monthly-demand.component.css'\n})\nexport class MonthlyDemandComponent implements OnInit {\n  memberForm: FormGroup;\n  selectedMonth = '';\n  monthStatus = 'Open';\n  lastProcessed = 'Not processed';\n  selectedRowIndex = -1;\n  \n  demandRecords: DemandRecord[] = [\n    {\n      edpNo: 'EMP001',\n      memberName: 'John Doe',\n      loanAmt: 50000,\n      cd: 5000,\n      loan: 45000,\n      interest: 2250,\n      eLoan: 10000,\n      eInterest: 500,\n      net: 42750,\n      intDue: 1750,\n      pInt: 500,\n      pDed: 1250,\n      las: 1000,\n      int: 50,\n      lasIntDue: 50\n    },\n    {\n      edpNo: 'EMP002',\n      memberName: 'Jane Smith',\n      loanAmt: 75000,\n      cd: 7500,\n      loan: 67500,\n      interest: 3375,\n      eLoan: 15000,\n      eInterest: 750,\n      net: 63750,\n      intDue: 2625,\n      pInt: 750,\n      pDed: 1875,\n      las: 1500,\n      int: 75,\n      lasIntDue: 75\n    },\n    {\n      edpNo: 'EMP003',\n      memberName: 'Mike Johnson',\n      loanAmt: 30000,\n      cd: 3000,\n      loan: 27000,\n      interest: 1350,\n      eLoan: 5000,\n      eInterest: 250,\n      net: 25650,\n      intDue: 1100,\n      pInt: 250,\n      pDed: 850,\n      las: 500,\n      int: 25,\n      lasIntDue: 25\n    }\n  ];\n\n  loanInterestRecords: LoanInterestRecord[] = [];\n\n  constructor(private fb: FormBuilder) {\n    this.memberForm = this.fb.group({\n      edpNo: ['', Validators.required],\n      name: [''],\n      loan: [0],\n      emergencyLoan: [0],\n      intDue: [0],\n      lasIntDue: [0],\n      cd: [0],\n      interest: [0],\n      pInt: [0],\n      las: [0],\n      interestSecond: [0],\n      pDed: [0],\n      totalAmount: [0]\n    });\n  }\n\n  ngOnInit() {\n    this.generateLoanInterestRecords();\n  }\n\n  loadMonthData() {\n    if (this.selectedMonth) {\n      // Simulate loading data for selected month\n      this.monthStatus = 'Open';\n      this.lastProcessed = 'Not processed';\n      console.log('Loading data for month:', this.selectedMonth);\n    }\n  }\n\n  selectRow(index: number, record: DemandRecord) {\n    this.selectedRowIndex = index;\n    this.memberForm.patchValue({\n      edpNo: record.edpNo,\n      name: record.memberName,\n      loan: record.loan,\n      emergencyLoan: record.eLoan,\n      intDue: record.intDue,\n      lasIntDue: record.lasIntDue,\n      cd: record.cd,\n      interest: record.interest,\n      pInt: record.pInt,\n      las: record.las,\n      interestSecond: record.int,\n      pDed: record.pDed\n    });\n    this.calculateTotals();\n  }\n\n  calculateInterest() {\n    // Simulate interest calculation\n    this.demandRecords.forEach(record => {\n      const interestRate = 0.05; // 5% monthly interest\n      record.interest = record.loan * interestRate;\n      record.eInterest = record.eLoan * interestRate;\n      record.intDue = record.interest - record.pInt;\n    });\n    this.generateLoanInterestRecords();\n    alert('Interest calculated for all members');\n  }\n\n  postInterest() {\n    if (this.canPostInterest()) {\n      // Simulate posting interest\n      alert(`Interest of ‚Çπ${this.getTotalInterest().toFixed(2)} posted successfully`);\n      this.monthStatus = 'Interest Posted';\n    }\n  }\n\n  canPostInterest(): boolean {\n    return this.selectedMonth !== '' && this.getTotalInterest() > 0;\n  }\n\n  validateMonth() {\n    // Simulate month validation\n    const validationErrors = [];\n    if (this.demandRecords.some(r => r.interest === 0)) {\n      validationErrors.push('Some members have zero interest');\n    }\n    \n    if (validationErrors.length > 0) {\n      alert('Validation errors found:\\n' + validationErrors.join('\\n'));\n    } else {\n      alert('Month validation successful');\n    }\n  }\n\n  closeMonth() {\n    if (this.canCloseMonth()) {\n      if (confirm('Are you sure you want to close this month? This action cannot be undone.')) {\n        this.monthStatus = 'Closed';\n        alert('Month closed successfully');\n      }\n    }\n  }\n\n  canCloseMonth(): boolean {\n    return this.monthStatus === 'Interest Posted';\n  }\n\n  calculateTotals() {\n    const formValues = this.memberForm.value;\n    const total = \n      (formValues.loan || 0) + \n      (formValues.emergencyLoan || 0) + \n      (formValues.intDue || 0) + \n      (formValues.lasIntDue || 0) + \n      (formValues.interest || 0) + \n      (formValues.interestSecond || 0);\n    \n    this.memberForm.patchValue({ totalAmount: total });\n  }\n\n  getTotalInterest(): number {\n    return this.demandRecords.reduce((sum, record) => sum + record.interest, 0);\n  }\n\n  getTotalEInterest(): number {\n    return this.demandRecords.reduce((sum, record) => sum + record.eInterest, 0);\n  }\n\n  getTotalAmountDue(): number {\n    return this.demandRecords.reduce((sum, record) => sum + record.intDue + record.lasIntDue, 0);\n  }\n\n  getProcessedCount(): number {\n    return this.demandRecords.filter(r => r.interest > 0).length;\n  }\n\n  getPendingCount(): number {\n    return this.demandRecords.filter(r => r.interest === 0).length;\n  }\n\n  generateLoanInterestRecords() {\n    this.loanInterestRecords = this.demandRecords.map(record => ({\n      edpNo: record.edpNo,\n      memberName: record.memberName,\n      loanIntAmt: record.interest + record.eInterest\n    }));\n  }\n\n  getLoanInterestTotal(): number {\n    return this.loanInterestRecords.reduce((sum, record) => sum + record.loanIntAmt, 0);\n  }\n\n  clearMemberForm() {\n    this.memberForm.reset();\n    this.selectedRowIndex = -1;\n  }\n\n  exportToExcel() {\n    // Simulate Excel export\n    const csvContent = this.generateCSVContent();\n    console.log('Exporting to Excel:', csvContent);\n    alert('Demand table exported to Excel successfully');\n  }\n\n  printDemandTable() {\n    window.print();\n  }\n\n  printLoanDetails() {\n    if (this.selectedRowIndex >= 0) {\n      const selectedRecord = this.demandRecords[this.selectedRowIndex];\n      console.log('Printing loan details for:', selectedRecord.memberName);\n      alert(`Printing loan details for ${selectedRecord.memberName}`);\n    } else {\n      alert('Please select a member first');\n    }\n  }\n\n  saveMemberData() {\n    if (this.memberForm.valid) {\n      const formData = this.memberForm.value;\n      if (this.selectedRowIndex >= 0) {\n        // Update existing record\n        const record = this.demandRecords[this.selectedRowIndex];\n        record.loan = formData.loan;\n        record.eLoan = formData.emergencyLoan;\n        record.cd = formData.cd;\n        record.interest = formData.interest;\n        record.intDue = formData.intDue;\n        record.lasIntDue = formData.lasIntDue;\n      }\n      alert('Member data saved successfully');\n    } else {\n      alert('Please fill all required fields');\n    }\n  }\n\n  resetAll() {\n    if (confirm('Are you sure you want to reset all data? This action cannot be undone.')) {\n      this.clearMemberForm();\n      this.selectedMonth = '';\n      this.monthStatus = 'Open';\n      this.lastProcessed = 'Not processed';\n      // Reset all calculations\n      this.demandRecords.forEach(record => {\n        record.interest = 0;\n        record.eInterest = 0;\n        record.intDue = 0;\n      });\n      this.generateLoanInterestRecords();\n    }\n  }\n\n  closeForm() {\n    if (confirm('Are you sure you want to close? Any unsaved changes will be lost.')) {\n      this.clearMemberForm();\n    }\n  }\n\n  private generateCSVContent(): string {\n    const headers = ['EDP No.', 'Member Name', 'Loan Amt', 'CD', 'Loan', 'Interest', 'E-Loan', 'Interest...', 'Net...', 'IntDue', 'PInt', 'PDed', 'LAS', 'Int', 'LASIntDue'];\n    const rows = this.demandRecords.map(record => [\n      record.edpNo, record.memberName, record.loanAmt, record.cd, record.loan,\n      record.interest, record.eLoan, record.eInterest, record.net, record.intDue,\n      record.pInt, record.pDed, record.las, record.int, record.lasIntDue\n    ]);\n    \n    return [headers, ...rows].map(row => row.join(',')).join('\\n');\n  }\n}\n","size_bytes":27212},"attached_assets/extracted_frontend/fintcs/src/app/guards/auth.guard.ts":{"content":"\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const currentUser = this.authService.getCurrentUser();\n    \n    if (currentUser) {\n      // Check if user can access this specific route\n      if (this.authService.canAccessRoute(state.url)) {\n        return true;\n      } else {\n        this.router.navigate(['/unauthorized']);\n        return false;\n      }\n    }\n\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}\n","size_bytes":872},"attached_assets/extracted_frontend/fintcs/src/app/guards/role.guard.ts":{"content":"\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';\nimport { AuthService, UserRole } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const currentUser = this.authService.getCurrentUser();\n    const requiredRoles = route.data['roles'] as UserRole[];\n\n    if (currentUser && requiredRoles.includes(currentUser.role)) {\n      return true;\n    }\n\n    this.router.navigate(['/unauthorized']);\n    return false;\n  }\n}\n","size_bytes":692},"attached_assets/extracted_frontend/fintcs/src/app/services/auth.interceptor.ts":{"content":"import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(req);\n  }\n}\n","size_bytes":549},"attached_assets/extracted_frontend/fintcs/src/app/services/auth.service.ts":{"content":"import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface User {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n  role: UserRole;\r\n  societyId?: number;\r\n  societyName?: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  isActive: boolean;\r\n  createdBy?: number;\r\n  createdDate: Date;\r\n  lastLogin?: Date;\r\n}\r\n\r\nexport enum UserRole {\r\n  SUPER_ADMIN = 'super_admin',\r\n  SOCIETY_ADMIN = 'society_admin',\r\n  BRANCH_ADMIN = 'branch_admin',\r\n  ACCOUNTANT = 'accountant',\r\n  OPERATOR = 'operator',\r\n  MEMBER = 'member'\r\n}\r\n\r\nexport interface Permission {\r\n  module: string;\r\n  actions: string[]; // create, read, update, delete, approve\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\r\n\r\n  private users: User[] = [\r\n    {\r\n      id: 1,\r\n      username: 'superadmin',\r\n      email: 'superadmin@system.com',\r\n      role: UserRole.SUPER_ADMIN,\r\n      firstName: 'Super',\r\n      lastName: 'Admin',\r\n      isActive: true,\r\n      createdDate: new Date('2024-01-01')\r\n    },\r\n    {\r\n      id: 2,\r\n      username: 'societyadmin',\r\n      email: 'admin@society1.com',\r\n      role: UserRole.SOCIETY_ADMIN,\r\n      societyId: 1,\r\n      societyName: 'ABC Society',\r\n      firstName: 'Society',\r\n      lastName: 'Admin',\r\n      isActive: true,\r\n      createdBy: 1,\r\n      createdDate: new Date('2024-01-15')\r\n    },\r\n    {\r\n      id: 3,\r\n      username: 'accountant1',\r\n      email: 'accountant1@society1.com',\r\n      role: UserRole.ACCOUNTANT,\r\n      societyId: 1,\r\n      societyName: 'ABC Society',\r\n      firstName: 'John',\r\n      lastName: 'Accountant',\r\n      isActive: true,\r\n      createdBy: 2,\r\n      createdDate: new Date('2024-02-01')\r\n    },\r\n    {\r\n      id: 4,\r\n      username: 'member1',\r\n      email: 'member1@society1.com',\r\n      role: UserRole.MEMBER,\r\n      societyId: 1,\r\n      societyName: 'ABC Society',\r\n      firstName: 'Jane',\r\n      lastName: 'Member',\r\n      isActive: true,\r\n      createdBy: 2,\r\n      createdDate: new Date('2024-02-15')\r\n    }\r\n  ];\r\n\r\n  private rolePermissions: Map<UserRole, Permission[]> = new Map([\r\n    [UserRole.SUPER_ADMIN, [\r\n      { module: 'all', actions: ['create', 'read', 'update', 'delete', 'approve'] }\r\n    ]],\r\n    [UserRole.SOCIETY_ADMIN, [\r\n      { module: 'members', actions: ['create', 'read', 'update', 'delete'] },\r\n      { module: 'accounts', actions: ['create', 'read', 'update', 'delete'] },\r\n      { module: 'transactions', actions: ['create', 'read', 'update', 'approve'] },\r\n      { module: 'reports', actions: ['read'] },\r\n      { module: 'master', actions: ['create', 'read', 'update'] },\r\n      { module: 'accountants', actions: ['create', 'read', 'update', 'delete'] }\r\n    ]],\r\n    [UserRole.ACCOUNTANT, [\r\n      { module: 'accounts', actions: ['create', 'read', 'update'] },\r\n      { module: 'transactions', actions: ['create', 'read', 'update'] },\r\n      { module: 'reports', actions: ['read'] },\r\n      { module: 'members', actions: ['read'] }\r\n    ]],\r\n    [UserRole.MEMBER, [\r\n      { module: 'own-account', actions: ['read'] },\r\n      { module: 'own-transactions', actions: ['read'] }\r\n    ]]\r\n  ]);\r\n\r\n  constructor(private router: Router) {\r\n    this.loadUserFromStorage();\r\n  }\r\n\r\n  login(username: string, password: string): Observable<boolean> {\r\n    return new Observable(observer => {\r\n      setTimeout(() => {\r\n        const user = this.users.find(u => u.username === username && u.isActive);\r\n        if (user && password === 'password') {\r\n          user.lastLogin = new Date();\r\n          this.currentUserSubject.next(user);\r\n          this.isLoggedInSubject.next(true);\r\n\r\n          if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {\r\n            localStorage.setItem('currentUser', JSON.stringify(user));\r\n          }\r\n\r\n          observer.next(true);\r\n        } else {\r\n          observer.next(false);\r\n        }\r\n        observer.complete();\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  logout(): void {\r\n    if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {\r\n      localStorage.removeItem('currentUser');\r\n    }\r\n    this.currentUserSubject.next(null);\r\n    this.isLoggedInSubject.next(false);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  hasPermission(module: string, action: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n\r\n    const permissions = this.rolePermissions.get(user.role);\r\n    if (!permissions) return false;\r\n\r\n    // Super admin has all permissions\r\n    if (user.role === UserRole.SUPER_ADMIN) return true;\r\n\r\n    return permissions.some(permission =>\r\n      (permission.module === module || permission.module === 'all') &&\r\n      permission.actions.includes(action)\r\n    );\r\n  }\r\n\r\n  canAccessRoute(route: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n\r\n    if (user.role === UserRole.SUPER_ADMIN) return true;\r\n\r\n    const routePermissions: { [key: string]: { module: string, action: string } } = {\r\n      '/master/member-details': { module: 'members', action: 'read' },\r\n      '/transaction/deposit-receipt': { module: 'transactions', action: 'read' },\r\n      '/accounts/cash-book': { module: 'accounts', action: 'read' },\r\n      '/file/security/authority': { module: 'all', action: 'read' },\r\n      '/file/security/new-user': { module: 'all', action: 'create' },\r\n      // Add more route mappings as needed\r\n    };\r\n\r\n    const permission = routePermissions[route];\r\n    if (!permission) return true; // Allow access to unmapped routes\r\n\r\n    return this.hasPermission(permission.module, permission.action);\r\n  }\r\n\r\n  createUser(userData: Partial<User>): Observable<User> {\r\n    return new Observable(observer => {\r\n      const currentUser = this.getCurrentUser();\r\n      if (!currentUser) {\r\n        observer.error('Not authenticated');\r\n        return;\r\n      }\r\n\r\n      const newUser: User = {\r\n        id: Math.max(...this.users.map(u => u.id)) + 1,\r\n        username: userData.username!,\r\n        email: userData.email!,\r\n        role: userData.role!,\r\n        firstName: userData.firstName!,\r\n        lastName: userData.lastName!,\r\n        societyId: userData.societyId || currentUser.societyId,\r\n        societyName: userData.societyName || currentUser.societyName,\r\n        isActive: true,\r\n        createdBy: currentUser.id,\r\n        createdDate: new Date()\r\n      };\r\n\r\n      this.users.push(newUser);\r\n      observer.next(newUser);\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  getUsers(): Observable<User[]> {\r\n    const currentUser = this.getCurrentUser();\r\n    if (!currentUser) return new Observable(obs => obs.next([]));\r\n\r\n    let filteredUsers = this.users;\r\n\r\n    if (currentUser.role === UserRole.SOCIETY_ADMIN) {\r\n      filteredUsers = this.users.filter(u => u.societyId === currentUser.societyId);\r\n    }\r\n\r\n    return new Observable(observer => {\r\n      observer.next(filteredUsers);\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  updateUser(user: User): void {\r\n    const index = this.users.findIndex(u => u.id === user.id);\r\n    if (index !== -1) {\r\n      this.users[index] = user;\r\n    }\r\n  }\r\n\r\n  deleteUser(userId: number): void {\r\n    const index = this.users.findIndex(u => u.id === userId);\r\n    if (index !== -1) {\r\n      this.users[index].isActive = false;\r\n    }\r\n  }\r\n\r\n  private loadUserFromStorage(): void {\r\n    if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {\r\n      const userData = localStorage.getItem('currentUser');\r\n      if (userData) {\r\n        const user = JSON.parse(userData);\r\n        this.currentUserSubject.next(user);\r\n        this.isLoggedInSubject.next(true);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  getUserRoles(): UserRole[] {\r\n    return Object.values(UserRole);\r\n  }\r\n\r\n  canCreateRole(targetRole: UserRole): boolean {\r\n    const currentUser = this.getCurrentUser();\r\n    if (!currentUser) return false;\r\n\r\n    switch (currentUser.role) {\r\n      case UserRole.SUPER_ADMIN:\r\n        return true;\r\n      case UserRole.SOCIETY_ADMIN:\r\n        return [UserRole.ACCOUNTANT, UserRole.MEMBER].includes(targetRole);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n}","size_bytes":8572},"attached_assets/extracted_frontend/fintcs/src/app/services/data.service.ts":{"content":"\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface Member {\n  id: number;\n  memberCode: string;\n  name: string;\n  fatherName: string;\n  address: string;\n  phone: string;\n  email: string;\n  joinDate: string;\n  status: string;\n}\n\nexport interface DepositScheme {\n  id: number;\n  schemeName: string;\n  schemeCode: string;\n  interestRate: number;\n  minAmount: number;\n  maxAmount: number;\n  tenure: number;\n  tenureType: string;\n  status: string;\n}\n\nexport interface Loan {\n  id: number;\n  loanId: string;\n  memberCode: string;\n  memberName: string;\n  loanAmount: number;\n  interestRate: number;\n  tenure: number;\n  loanDate: string;\n  status: string;\n  emi: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private membersSubject = new BehaviorSubject<Member[]>([]);\n  private schemesSubject = new BehaviorSubject<DepositScheme[]>([]);\n  private loansSubject = new BehaviorSubject<Loan[]>([]);\n\n  members$ = this.membersSubject.asObservable();\n  schemes$ = this.schemesSubject.asObservable();\n  loans$ = this.loansSubject.asObservable();\n\n  constructor() {\n    this.loadInitialData();\n  }\n\n  private loadInitialData() {\n    // Load sample members\n    const members: Member[] = [\n      {\n        id: 1,\n        memberCode: 'MEM001',\n        name: 'John Doe',\n        fatherName: 'Robert Doe',\n        address: '123 Main St, City',\n        phone: '9876543210',\n        email: 'john@example.com',\n        joinDate: '2023-01-15',\n        status: 'Active'\n      },\n      {\n        id: 2,\n        memberCode: 'MEM002',\n        name: 'Jane Smith',\n        fatherName: 'Michael Smith',\n        address: '456 Oak Ave, Town',\n        phone: '9876543211',\n        email: 'jane@example.com',\n        joinDate: '2023-02-20',\n        status: 'Active'\n      }\n    ];\n\n    // Load sample schemes\n    const schemes: DepositScheme[] = [\n      {\n        id: 1,\n        schemeCode: 'RD001',\n        schemeName: 'Regular Deposit',\n        interestRate: 7.5,\n        minAmount: 500,\n        maxAmount: 50000,\n        tenure: 12,\n        tenureType: 'months',\n        status: 'Active'\n      }\n    ];\n\n    // Load sample loans\n    const loans: Loan[] = [\n      {\n        id: 1,\n        loanId: 'LN001',\n        memberCode: 'MEM001',\n        memberName: 'John Doe',\n        loanAmount: 100000,\n        interestRate: 12,\n        tenure: 24,\n        loanDate: '2024-01-15',\n        status: 'Active',\n        emi: 4707\n      }\n    ];\n\n    this.membersSubject.next(members);\n    this.schemesSubject.next(schemes);\n    this.loansSubject.next(loans);\n  }\n\n  // Member methods\n  getMembers(): Observable<Member[]> {\n    return this.members$;\n  }\n\n  addMember(member: Member): void {\n    const currentMembers = this.membersSubject.value;\n    this.membersSubject.next([...currentMembers, member]);\n  }\n\n  updateMember(member: Member): void {\n    const currentMembers = this.membersSubject.value;\n    const index = currentMembers.findIndex(m => m.id === member.id);\n    if (index !== -1) {\n      currentMembers[index] = member;\n      this.membersSubject.next([...currentMembers]);\n    }\n  }\n\n  deleteMember(id: number): void {\n    const currentMembers = this.membersSubject.value;\n    this.membersSubject.next(currentMembers.filter(m => m.id !== id));\n  }\n\n  // Scheme methods\n  getSchemes(): Observable<DepositScheme[]> {\n    return this.schemes$;\n  }\n\n  addScheme(scheme: DepositScheme): void {\n    const currentSchemes = this.schemesSubject.value;\n    this.schemesSubject.next([...currentSchemes, scheme]);\n  }\n\n  updateScheme(scheme: DepositScheme): void {\n    const currentSchemes = this.schemesSubject.value;\n    const index = currentSchemes.findIndex(s => s.id === scheme.id);\n    if (index !== -1) {\n      currentSchemes[index] = scheme;\n      this.schemesSubject.next([...currentSchemes]);\n    }\n  }\n\n  deleteScheme(id: number): void {\n    const currentSchemes = this.schemesSubject.value;\n    this.schemesSubject.next(currentSchemes.filter(s => s.id !== id));\n  }\n\n  // Loan methods\n  getLoans(): Observable<Loan[]> {\n    return this.loans$;\n  }\n\n  addLoan(loan: Loan): void {\n    const currentLoans = this.loansSubject.value;\n    this.loansSubject.next([...currentLoans, loan]);\n  }\n\n  updateLoan(loan: Loan): void {\n    const currentLoans = this.loansSubject.value;\n    const index = currentLoans.findIndex(l => l.id === loan.id);\n    if (index !== -1) {\n      currentLoans[index] = loan;\n      this.loansSubject.next([...currentLoans]);\n    }\n  }\n\n  deleteLoan(id: number): void {\n    const currentLoans = this.loansSubject.value;\n    this.loansSubject.next(currentLoans.filter(l => l.id !== id));\n  }\n\n  // Utility methods\n  calculateEMI(principal: number, rate: number, tenure: number): number {\n    const monthlyRate = rate / 12 / 100;\n    const emi = (principal * monthlyRate * Math.pow(1 + monthlyRate, tenure)) / \n                (Math.pow(1 + monthlyRate, tenure) - 1);\n    return Math.round(emi);\n  }\n\n  generateNextId(type: 'member' | 'scheme' | 'loan'): number {\n    switch (type) {\n      case 'member':\n        return Math.max(...this.membersSubject.value.map(m => m.id), 0) + 1;\n      case 'scheme':\n        return Math.max(...this.schemesSubject.value.map(s => s.id), 0) + 1;\n      case 'loan':\n        return Math.max(...this.loansSubject.value.map(l => l.id), 0) + 1;\n      default:\n        return 1;\n    }\n  }\n}\n","size_bytes":5396},"attached_assets/extracted_frontend/fintcs/src/app/services/member.service.ts":{"content":"\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\nexport interface Member {\r\n  id?: number;\r\n  memberNo: string;\r\n  name: string;\r\n  fhName: string;\r\n  dateOfBirth?: Date | string;\r\n  mobile?: string;\r\n  email?: string;\r\n  designation?: string;\r\n  dojJob?: Date | string;\r\n  doRetirement?: Date | string;\r\n  branch?: string;\r\n  dojSociety?: Date | string;\r\n  officeAddress?: string;\r\n  residenceAddress?: string;\r\n  city?: string;\r\n  phoneOffice?: string;\r\n  phoneResidence?: string;\r\n  nominee?: string;\r\n  nomineeRelation?: string;\r\n  shareAmount: number;\r\n  cdAmount: number;\r\n  bankName?: string;\r\n  payableAt?: string;\r\n  accountNo?: string;\r\n  status?: string;\r\n  date?: Date | string;\r\n  photoPath?: string;\r\n  signaturePath?: string;\r\n  shareDeduction?: number;\r\n  withdrawal?: number;\r\n  gLoanInstalment?: number;\r\n  eLoanInstalment?: number;\r\n  createdDate?: Date | string;\r\n  updatedDate?: Date | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MemberService {\r\n  private apiUrl = 'http://localhost:5000/api/members';\r\n\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllMembers(): Observable<Member[]> {\r\n    return this.http.get<Member[]>(this.apiUrl)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getMemberById(id: number): Observable<Member> {\r\n    return this.http.get<Member>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getMemberByNumber(memberNo: string): Observable<Member> {\r\n    return this.http.get<Member>(`${this.apiUrl}/by-number/${memberNo}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createMember(member: Member): Observable<Member> {\r\n    // Convert dates to proper format\r\n    const memberData = this.prepareMemberData(member);\r\n    \r\n    return this.http.post<Member>(this.apiUrl, memberData, this.httpOptions)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateMember(id: number, member: Member): Observable<Member> {\r\n    // Convert dates to proper format\r\n    const memberData = this.prepareMemberData(member);\r\n    \r\n    return this.http.put<Member>(`${this.apiUrl}/${id}`, memberData, this.httpOptions)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deleteMember(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private prepareMemberData(member: Member): any {\r\n    const data = { ...member };\r\n    \r\n    // Convert date objects to ISO strings for API\r\n    if (data.dateOfBirth instanceof Date) {\r\n      data.dateOfBirth = data.dateOfBirth.toISOString();\r\n    }\r\n    if (data.dojJob instanceof Date) {\r\n      data.dojJob = data.dojJob.toISOString();\r\n    }\r\n    if (data.doRetirement instanceof Date) {\r\n      data.doRetirement = data.doRetirement.toISOString();\r\n    }\r\n    if (data.dojSociety instanceof Date) {\r\n      data.dojSociety = data.dojSociety.toISOString();\r\n    }\r\n    if (data.date instanceof Date) {\r\n      data.date = data.date.toISOString();\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      switch (error.status) {\r\n        case 400:\r\n          errorMessage = 'Bad Request - Please check your input';\r\n          break;\r\n        case 401:\r\n          errorMessage = 'Unauthorized - Please login again';\r\n          break;\r\n        case 403:\r\n          errorMessage = 'Forbidden - You do not have permission';\r\n          break;\r\n        case 404:\r\n          errorMessage = 'Not Found - The requested resource was not found';\r\n          break;\r\n        case 409:\r\n          errorMessage = 'Conflict - Member number already exists';\r\n          break;\r\n        case 500:\r\n          errorMessage = 'Internal Server Error - Please try again later';\r\n          break;\r\n        default:\r\n          errorMessage = `Server Error: ${error.status} - ${error.message}`;\r\n      }\r\n    }\r\n    \r\n    console.error('API Error:', error);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}\r\n","size_bytes":4629},"src/app/components/file/security/admin-handover/admin-handover.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-admin-handover',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Admin Handover</h1><mat-card><mat-card-content><p>Administrative handover functionality.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class AdminHandoverComponent {}\n","size_bytes":550},"src/app/components/file/security/authority/authority.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { AuthService, UserRole } from '../../../../services/auth.service';\n\ninterface MenuPermission {\n  module: string;\n  menuName: string;\n  category: string;\n  view: boolean;\n  edit: boolean;\n  create: boolean;\n  delete: boolean;\n}\n\ninterface RolePermissions {\n  role: UserRole;\n  roleName: string;\n  permissions: MenuPermission[];\n}\n\n@Component({\n  selector: 'app-authority',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatCardModule, \n    MatTableModule, \n    MatCheckboxModule, \n    MatButtonModule,\n    MatTabsModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatExpansionModule\n  ],\n  template: `\n    <div class=\"authority-container\">\n      <mat-card class=\"header-card\">\n        <mat-card-header>\n          <mat-card-title>\n            <mat-icon>security</mat-icon>\n            Authority Management\n          </mat-card-title>\n          <mat-card-subtitle>Manage permissions for different user roles</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-actions>\n          <button mat-raised-button color=\"primary\" (click)=\"saveAllPermissions()\">\n            <mat-icon>save</mat-icon>\n            Save All Changes\n          </button>\n          <button mat-button (click)=\"resetToDefault()\">\n            <mat-icon>refresh</mat-icon>\n            Reset to Default\n          </button>\n        </mat-card-actions>\n      </mat-card>\n\n      <mat-tab-group class=\"role-tabs\">\n        <mat-tab *ngFor=\"let rolePermission of rolePermissions\" [label]=\"rolePermission.roleName\">\n          <div class=\"tab-content\">\n            <div class=\"role-actions\">\n              <button mat-button color=\"primary\" (click)=\"selectAllForRole(rolePermission)\">\n                <mat-icon>select_all</mat-icon>\n                Select All\n              </button>\n              <button mat-button color=\"warn\" (click)=\"deselectAllForRole(rolePermission)\">\n                <mat-icon>deselect</mat-icon>\n                Deselect All\n              </button>\n              <button mat-raised-button color=\"accent\" (click)=\"saveRolePermissions(rolePermission)\">\n                <mat-icon>save</mat-icon>\n                Save {{ rolePermission.roleName }}\n              </button>\n            </div>\n\n            <mat-accordion>\n              <mat-expansion-panel *ngFor=\"let category of getCategories()\" [expanded]=\"true\">\n                <mat-expansion-panel-header>\n                  <mat-panel-title>\n                    <mat-icon>{{ getCategoryIcon(category) }}</mat-icon>\n                    {{ category }}\n                  </mat-panel-title>\n                  <mat-panel-description>\n                    {{ getCategoryPermissions(rolePermission, category).length }} menus\n                  </mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <div class=\"permissions-table\">\n                  <table mat-table [dataSource]=\"getCategoryPermissions(rolePermission, category)\" class=\"permissions-mat-table\">\n                    <!-- Menu Name Column -->\n                    <ng-container matColumnDef=\"menuName\">\n                      <th mat-header-cell *matHeaderCellDef>Menu</th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"menu-name\">\n                        <mat-icon>{{ getMenuIcon(permission.module) }}</mat-icon>\n                        {{ permission.menuName }}\n                      </td>\n                    </ng-container>\n\n                    <!-- View Permission Column -->\n                    <ng-container matColumnDef=\"view\">\n                      <th mat-header-cell *matHeaderCellDef class=\"permission-header\">\n                        <mat-icon>visibility</mat-icon>\n                        View\n                      </th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"permission-cell\">\n                        <mat-checkbox \n                          [(ngModel)]=\"permission.view\"\n                          (change)=\"onPermissionChange(rolePermission, permission)\"\n                          color=\"primary\">\n                        </mat-checkbox>\n                      </td>\n                    </ng-container>\n\n                    <!-- Edit Permission Column -->\n                    <ng-container matColumnDef=\"edit\">\n                      <th mat-header-cell *matHeaderCellDef class=\"permission-header\">\n                        <mat-icon>edit</mat-icon>\n                        Edit\n                      </th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"permission-cell\">\n                        <mat-checkbox \n                          [(ngModel)]=\"permission.edit\"\n                          (change)=\"onPermissionChange(rolePermission, permission)\"\n                          color=\"accent\">\n                        </mat-checkbox>\n                      </td>\n                    </ng-container>\n\n                    <!-- Create Permission Column -->\n                    <ng-container matColumnDef=\"create\">\n                      <th mat-header-cell *matHeaderCellDef class=\"permission-header\">\n                        <mat-icon>add</mat-icon>\n                        Create\n                      </th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"permission-cell\">\n                        <mat-checkbox \n                          [(ngModel)]=\"permission.create\"\n                          (change)=\"onPermissionChange(rolePermission, permission)\"\n                          color=\"primary\">\n                        </mat-checkbox>\n                      </td>\n                    </ng-container>\n\n                    <!-- Delete Permission Column -->\n                    <ng-container matColumnDef=\"delete\">\n                      <th mat-header-cell *matHeaderCellDef class=\"permission-header\">\n                        <mat-icon>delete</mat-icon>\n                        Delete\n                      </th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"permission-cell\">\n                        <mat-checkbox \n                          [(ngModel)]=\"permission.delete\"\n                          (change)=\"onPermissionChange(rolePermission, permission)\"\n                          color=\"warn\">\n                        </mat-checkbox>\n                      </td>\n                    </ng-container>\n\n                    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n                  </table>\n                </div>\n              </mat-expansion-panel>\n            </mat-accordion>\n          </div>\n        </mat-tab>\n      </mat-tab-group>\n    </div>\n  `,\n  styles: [`\n    .authority-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n\n    .header-card {\n      margin-bottom: 24px;\n    }\n\n    .header-card mat-card-header {\n      display: flex;\n      align-items: center;\n    }\n\n    .header-card mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n    }\n\n    .role-tabs {\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .tab-content {\n      padding: 24px;\n    }\n\n    .role-actions {\n      display: flex;\n      gap: 12px;\n      margin-bottom: 24px;\n      flex-wrap: wrap;\n    }\n\n    .permissions-table {\n      margin-top: 16px;\n    }\n\n    .permissions-mat-table {\n      width: 100%;\n      background: #fafafa;\n      border-radius: 8px;\n    }\n\n    .menu-name {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      font-weight: 500;\n      min-width: 200px;\n    }\n\n    .permission-header {\n      text-align: center;\n      font-weight: 600;\n      width: 100px;\n    }\n\n    .permission-header mat-icon {\n      vertical-align: middle;\n      margin-right: 4px;\n    }\n\n    .permission-cell {\n      text-align: center;\n      padding: 8px;\n    }\n\n    mat-expansion-panel {\n      margin-bottom: 16px;\n      border-radius: 8px !important;\n    }\n\n    mat-expansion-panel-header {\n      background: #f5f5f5;\n    }\n\n    mat-panel-title {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n    }\n\n    @media (max-width: 768px) {\n      .authority-container {\n        padding: 12px;\n      }\n      \n      .role-actions {\n        flex-direction: column;\n      }\n      \n      .role-actions button {\n        width: 100%;\n      }\n      \n      .permissions-mat-table {\n        font-size: 12px;\n      }\n      \n      .menu-name {\n        min-width: 150px;\n      }\n      \n      .permission-header {\n        width: 80px;\n      }\n    }\n\n    @media (max-width: 480px) {\n      .header-card mat-card-title {\n        font-size: 18px;\n      }\n      \n      .tab-content {\n        padding: 12px;\n      }\n      \n      .permissions-mat-table {\n        font-size: 11px;\n      }\n    }\n  `]\n})\nexport class AuthorityComponent implements OnInit {\n  displayedColumns: string[] = ['menuName', 'view', 'edit', 'create', 'delete'];\n  rolePermissions: RolePermissions[] = [];\n  hasChanges = false;\n\n  private allMenus: Omit<MenuPermission, 'view' | 'edit' | 'create' | 'delete'>[] = [\n    // File Menu\n    { module: 'society', menuName: 'Society', category: 'File' },\n    { module: 'authority', menuName: 'Authority', category: 'File - Security' },\n    { module: 'my-rights', menuName: 'My Rights', category: 'File - Security' },\n    { module: 'new-user', menuName: 'New User', category: 'File - Security' },\n    { module: 'retrieve-password', menuName: 'Retrieve Password', category: 'File - Security' },\n    { module: 'change-password', menuName: 'Change Password', category: 'File - Security' },\n    { module: 'admin-handover', menuName: 'Admin Handover', category: 'File - Security' },\n    { module: 'create-new-year', menuName: 'Create New Year', category: 'File' },\n    { module: 'edit-opening-balance', menuName: 'Edit Opening Balance', category: 'File' },\n\n    // Master Menu\n    { module: 'member-details', menuName: 'Member Details', category: 'Master' },\n    { module: 'table', menuName: 'Table', category: 'Master' },\n    { module: 'deposit-scheme', menuName: 'Deposit Scheme', category: 'Master' },\n    { module: 'interest-master', menuName: 'Interest Master', category: 'Master' },\n\n    // Transaction Menu\n    { module: 'deposit-receipt', menuName: 'Deposit Receipt', category: 'Transaction' },\n    { module: 'deposit-payment', menuName: 'Deposit Payment', category: 'Transaction' },\n    { module: 'deposit-slip', menuName: 'Deposit Slip', category: 'Transaction' },\n    { module: 'deposit-renew', menuName: 'Deposit Renew', category: 'Transaction' },\n    { module: 'account-closure', menuName: 'Account Closure', category: 'Transaction' },\n    { module: 'loan-taken', menuName: 'Loan Taken', category: 'Transaction' },\n    { module: 'demand-process', menuName: 'Demand Process', category: 'Transaction' },\n\n    // Accounts Menu\n    { module: 'cash-book', menuName: 'Cash Book', category: 'Accounts' },\n    { module: 'day-book', menuName: 'Day Book', category: 'Accounts' },\n    { module: 'ledger', menuName: 'Ledger', category: 'Accounts' },\n    { module: 'group', menuName: 'Group', category: 'Accounts' },\n    { module: 'trial-balance', menuName: 'Trial Balance', category: 'Accounts' },\n    { module: 'balance-sheet', menuName: 'Balance Sheet', category: 'Accounts' },\n    { module: 'profit-loss', menuName: 'Profit & Loss', category: 'Accounts' },\n    { module: 'receipt-payment', menuName: 'Receipt & Payment', category: 'Accounts' },\n    { module: 'voucher', menuName: 'Voucher', category: 'Accounts' },\n    { module: 'loan-receipt', menuName: 'Loan Receipt', category: 'Accounts' },\n\n    // Reports Menu\n    { module: 'opening-balance', menuName: 'Opening Balance', category: 'Reports' },\n    { module: 'closing-balance', menuName: 'Closing Balance', category: 'Reports' },\n    { module: 'employees', menuName: 'Employees', category: 'Reports' },\n    { module: 'loan', menuName: 'Loan', category: 'Reports' },\n    { module: 'voucher-report', menuName: 'Voucher Report', category: 'Reports' },\n\n    // Other\n    { module: 'statement', menuName: 'Statement', category: 'Other' },\n    { module: 'backup', menuName: 'Backup', category: 'System' },\n    { module: 'user-management', menuName: 'User Management', category: 'System' }\n  ];\n\n  constructor(\n    private authService: AuthService,\n    private snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit() {\n    this.initializeRolePermissions();\n  }\n\n  initializeRolePermissions() {\n    const roles = [\n      { role: UserRole.SOCIETY_ADMIN, roleName: 'Society Admin' },\n      { role: UserRole.ACCOUNTANT, roleName: 'Accountant' },\n      { role: UserRole.MEMBER, roleName: 'Member' }\n    ];\n\n    this.rolePermissions = roles.map(roleInfo => ({\n      role: roleInfo.role,\n      roleName: roleInfo.roleName,\n      permissions: this.allMenus.map(menu => ({\n        ...menu,\n        ...this.getDefaultPermissions(roleInfo.role, menu.module)\n      }))\n    }));\n  }\n\n  getDefaultPermissions(role: UserRole, module: string): Pick<MenuPermission, 'view' | 'edit' | 'create' | 'delete'> {\n    switch (role) {\n      case UserRole.SOCIETY_ADMIN:\n        return { view: true, edit: true, create: true, delete: true };\n      case UserRole.ACCOUNTANT:\n        if (['member-details', 'user-management', 'authority', 'admin-handover'].includes(module)) {\n          return { view: false, edit: false, create: false, delete: false };\n        }\n        return { view: true, edit: true, create: true, delete: false };\n      case UserRole.MEMBER:\n        if (['cash-book', 'statement'].includes(module)) {\n          return { view: true, edit: false, create: false, delete: false };\n        }\n        return { view: false, edit: false, create: false, delete: false };\n      default:\n        return { view: false, edit: false, create: false, delete: false };\n    }\n  }\n\n  getCategories(): string[] {\n    const categories = new Set(this.allMenus.map(menu => menu.category));\n    return Array.from(categories).sort();\n  }\n\n  getCategoryPermissions(rolePermission: RolePermissions, category: string): MenuPermission[] {\n    return rolePermission.permissions.filter(p => p.category === category);\n  }\n\n  getCategoryIcon(category: string): string {\n    const icons: { [key: string]: string } = {\n      'File': 'folder',\n      'File - Security': 'security',\n      'Master': 'storage',\n      'Transaction': 'swap_horiz',\n      'Accounts': 'account_balance',\n      'Reports': 'assessment',\n      'Other': 'more_horiz',\n      'System': 'settings'\n    };\n    return icons[category] || 'menu';\n  }\n\n  getMenuIcon(module: string): string {\n    const icons: { [key: string]: string } = {\n      'society': 'business',\n      'authority': 'admin_panel_settings',\n      'my-rights': 'verified_user',\n      'new-user': 'person_add',\n      'member-details': 'people',\n      'deposit-receipt': 'receipt',\n      'cash-book': 'account_balance_wallet',\n      'backup': 'backup',\n      'user-management': 'manage_accounts'\n    };\n    return icons[module] || 'description';\n  }\n\n  onPermissionChange(rolePermission: RolePermissions, permission: MenuPermission) {\n    this.hasChanges = true;\n  }\n\n  selectAllForRole(rolePermission: RolePermissions) {\n    rolePermission.permissions.forEach(permission => {\n      permission.view = true;\n      permission.edit = true;\n      permission.create = true;\n      permission.delete = true;\n    });\n    this.hasChanges = true;\n  }\n\n  deselectAllForRole(rolePermission: RolePermissions) {\n    rolePermission.permissions.forEach(permission => {\n      permission.view = false;\n      permission.edit = false;\n      permission.create = false;\n      permission.delete = false;\n    });\n    this.hasChanges = true;\n  }\n\n  saveRolePermissions(rolePermission: RolePermissions) {\n    // Here you would typically save to a backend service\n    console.log(`Saving permissions for ${rolePermission.roleName}:`, rolePermission.permissions);\n    \n    this.snackBar.open(\n      `Permissions saved for ${rolePermission.roleName}`,\n      'Close',\n      { duration: 3000, panelClass: ['success-snackbar'] }\n    );\n  }\n\n  saveAllPermissions() {\n    // Here you would typically save all role permissions to a backend service\n    console.log('Saving all permissions:', this.rolePermissions);\n    \n    this.snackBar.open(\n      'All permissions saved successfully',\n      'Close',\n      { duration: 3000, panelClass: ['success-snackbar'] }\n    );\n    \n    this.hasChanges = false;\n  }\n\n  resetToDefault() {\n    this.initializeRolePermissions();\n    this.hasChanges = false;\n    \n    this.snackBar.open(\n      'Permissions reset to default values',\n      'Close',\n      { duration: 3000, panelClass: ['info-snackbar'] }\n    );\n  }\n}\n","size_bytes":17307},"src/app/components/file/security/change-password/change-password.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-change-password',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Change Password</h1><mat-card><mat-card-content><p>Password change form.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class ChangePasswordComponent {}\n","size_bytes":536},"src/app/components/file/security/my-rights/my-rights.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-my-rights',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>My Rights</h1><mat-card><mat-card-content><p>User rights and permissions display.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class MyRightsComponent {}\n","size_bytes":533},"src/app/components/file/security/new-user/new-user.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-new-user',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>New User</h1><mat-card><mat-card-content><p>New user creation form.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class NewUserComponent {}\n","size_bytes":517},"src/app/components/file/security/retrieve-password/retrieve-password.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-retrieve-password',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Retrieve Password</h1><mat-card><mat-card-content><p>Password recovery functionality.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class RetrievePasswordComponent {}\n","size_bytes":553},"attached_assets/extracted_frontend/fintcs/src/app/components/admin/admin.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTabsModule } from '@angular/material/tabs';\n\n@Component({\n  selector: 'app-admin',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatIconModule, MatTabsModule],\n  template: `\n    <div class=\"admin-container\">\n      <h1>Administration</h1>\n      \n      <mat-tab-group>\n        <mat-tab label=\"User Management\">\n          <div class=\"tab-content\">\n            <mat-card>\n              <mat-card-header>\n                <mat-card-title>Manage Users</mat-card-title>\n              </mat-card-header>\n              <mat-card-content>\n                <p>Total Users: 15</p>\n                <p>Active Users: 12</p>\n                <p>Administrators: 3</p>\n              </mat-card-content>\n              <mat-card-actions>\n                <button mat-raised-button color=\"primary\">\n                  <mat-icon>person_add</mat-icon>\n                  Add User\n                </button>\n                <button mat-button>View All Users</button>\n              </mat-card-actions>\n            </mat-card>\n          </div>\n        </mat-tab>\n        \n        <mat-tab label=\"System Settings\">\n          <div class=\"tab-content\">\n            <mat-card>\n              <mat-card-header>\n                <mat-card-title>System Configuration</mat-card-title>\n              </mat-card-header>\n              <mat-card-content>\n                <p>Interest Rate: 8.5% per annum</p>\n                <p>Late Fee: ‚Çπ500</p>\n                <p>Minimum Deposit: ‚Çπ1,000</p>\n              </mat-card-content>\n              <mat-card-actions>\n                <button mat-raised-button color=\"accent\">Update Settings</button>\n              </mat-card-actions>\n            </mat-card>\n          </div>\n        </mat-tab>\n      </mat-tab-group>\n    </div>\n  `,\n  styles: [`\n    .admin-container {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n\n    .tab-content {\n      padding: 20px;\n    }\n\n    mat-card-actions {\n      display: flex;\n      gap: 10px;\n    }\n  `]\n})\nexport class AdminComponent {}\n","size_bytes":2282},"attached_assets/extracted_frontend/fintcs/src/app/components/backup/backup.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-backup',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatIconModule],\n  template: `\n    <div class=\"backup-container\">\n      <h1>Backup Management</h1>\n      \n      <mat-card class=\"backup-card\">\n        <mat-card-header>\n          <mat-card-title>Database Backup</mat-card-title>\n          <mat-card-subtitle>Create and manage system backups</mat-card-subtitle>\n        </mat-card-header>\n        \n        <mat-card-content>\n          <p>Last backup: {{ lastBackupDate | date:'full' }}</p>\n          <p>Backup size: 45.2 MB</p>\n          <p>Status: All systems operational</p>\n        </mat-card-content>\n        \n        <mat-card-actions>\n          <button mat-raised-button color=\"primary\" (click)=\"downloadBackup()\">\n            <mat-icon>download</mat-icon>\n            Download Backup\n          </button>\n          <button mat-raised-button color=\"accent\" (click)=\"createBackup()\">\n            <mat-icon>backup</mat-icon>\n            Create New Backup\n          </button>\n        </mat-card-actions>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .backup-container {\n      max-width: 600px;\n      margin: 0 auto;\n    }\n\n    .backup-card {\n      margin: 20px 0;\n    }\n\n    mat-card-actions {\n      display: flex;\n      gap: 10px;\n    }\n  `]\n})\nexport class BackupComponent {\n  lastBackupDate = new Date();\n\n  downloadBackup() {\n    alert('Backup download started...');\n  }\n\n  createBackup() {\n    alert('Creating new backup...');\n  }\n}\n","size_bytes":1774},"attached_assets/extracted_frontend/fintcs/src/app/components/dashboard/dashboard.component.ts":{"content":"\r\nimport { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatGridListModule,\r\n    MatProgressBarModule,\r\n    MatChipsModule\r\n  ],\r\n  animations: [\r\n    trigger('fadeInStagger', [\r\n      transition('* => *', [\r\n        query(':enter', [\r\n          style({ opacity: 0, transform: 'translateY(30px)' }),\r\n          stagger(100, [\r\n            animate('600ms cubic-bezier(0.35, 0, 0.25, 1)',\r\n              style({ opacity: 1, transform: 'translateY(0)' }))\r\n          ])\r\n        ], { optional: true })\r\n      ])\r\n    ])\r\n  ],\r\n  template: `\r\n    <div class=\"dashboard-container p-6 space-y-8\" [@fadeInStagger]>\r\n      <!-- Welcome Header -->\r\n      <div class=\"relative overflow-hidden rounded-xl p-6 bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-lg\">\r\n        <div class=\"absolute inset-0 bg-black/5\"></div>\r\n        <div class=\"relative\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <div class=\"space-y-1\">\r\n              <h1 class=\"text-2xl font-bold\">Welcome to FinTCS Dashboard</h1>\r\n              <p class=\"text-base text-indigo-100\">Manage your financial data with elegance and efficiency</p>\r\n            </div>\r\n            <mat-icon class=\"text-4xl text-white/30\">dashboard</mat-icon>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Statistics Cards -->\r\n      <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <div *ngFor=\"let stat of statistics; let i = index\" \r\n             class=\"stat-card group relative overflow-hidden rounded-lg p-4 bg-white dark:bg-gray-800 shadow-md border border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-all duration-200 hover:-translate-y-1\">\r\n          \r\n          <!-- Gradient Background -->\r\n          <div class=\"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"\r\n               [class]=\"getGradientClass(i)\"></div>\r\n          \r\n          <!-- Content -->\r\n          <div class=\"relative\">\r\n            <div class=\"flex items-center justify-between mb-3\">\r\n              <div class=\"p-2 rounded-lg\" [class]=\"getIconBackgroundClass(i)\">\r\n                <mat-icon class=\"text-xl\" [class]=\"getIconColorClass(i)\">{{stat.icon}}</mat-icon>\r\n              </div>\r\n              <div class=\"text-right\">\r\n                <div class=\"text-xl font-bold group-hover:text-white transition-colors duration-200\" \r\n                     [class]=\"getTextColorClass()\">\r\n                  {{stat.value}}\r\n                </div>\r\n                <div class=\"text-xs font-medium group-hover:text-white/80 transition-colors duration-200\" \r\n                     [class]=\"getSecondaryTextColorClass()\">\r\n                  {{stat.change}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <h3 class=\"text-base font-semibold group-hover:text-white transition-colors duration-200\" \r\n                [class]=\"getTextColorClass()\">\r\n              {{stat.title}}\r\n            </h3>\r\n            <p class=\"text-sm group-hover:text-white/70 transition-colors duration-200\" \r\n               [class]=\"getSecondaryTextColorClass()\">\r\n              {{stat.description}}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Quick Actions -->\r\n      <div class=\"bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-xl border border-gray-200/50 dark:border-gray-700/50\">\r\n        <div class=\"flex items-center mb-6\">\r\n          <div class=\"p-3 rounded-full bg-gradient-to-r from-emerald-500 to-teal-600 mr-4\">\r\n            <mat-icon class=\"text-white text-2xl\">flash_on</mat-icon>\r\n          </div>\r\n          <h2 class=\"text-2xl font-bold text-gray-800 dark:text-white\">Quick Actions</h2>\r\n        </div>\r\n        \r\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n          <button *ngFor=\"let action of quickActions; let i = index\"\r\n                  mat-raised-button\r\n                  class=\"action-button p-6 py-20 rounded-2xl text-left transition-all duration-300 transform hover:scale-105\"\r\n                  [class]=\"getActionButtonClass(i)\">\r\n            <div class=\"flex items-center space-x-4\">\r\n              <mat-icon class=\"text-2xl\">{{action.icon}}</mat-icon>\r\n              <div>\r\n                <div class=\"font-semibold\">{{action.title}}</div>\r\n                <div class=\"text-sm opacity-80\">{{action.description}}</div>\r\n              </div>\r\n            </div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Recent Activity -->\r\n      <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <!-- Transactions -->\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-xl border border-gray-200/50 dark:border-gray-700/50\">\r\n          <div class=\"flex items-center justify-between mb-6\">\r\n            <div class=\"flex items-center\">\r\n              <div class=\"p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-600 mr-4\">\r\n                <mat-icon class=\"text-white text-2xl\">account_balance_wallet</mat-icon>\r\n              </div>\r\n              <h3 class=\"text-xl font-bold text-gray-800 dark:text-white\">Recent Transactions</h3>\r\n            </div>\r\n            <button mat-button class=\"text-blue-600 hover:text-blue-700\">View All</button>\r\n          </div>\r\n          \r\n          <div class=\"space-y-4\">\r\n            <div *ngFor=\"let transaction of recentTransactions\" \r\n                 class=\"flex items-center justify-between p-4 rounded-xl bg-gray-50 dark:bg-gray-700/50 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\">\r\n              <div class=\"flex items-center space-x-3\">\r\n                <div class=\"w-10 h-10 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center\">\r\n                  <mat-icon class=\"text-white text-sm\">{{transaction.icon}}</mat-icon>\r\n                </div>\r\n                <div>\r\n                  <div class=\"font-medium text-gray-800 dark:text-white\">{{transaction.description}}</div>\r\n                  <div class=\"text-sm text-gray-500 dark:text-gray-400\">{{transaction.date}}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"text-right\">\r\n                <div class=\"font-bold\" [class]=\"transaction.amount > 0 ? 'text-green-600' : 'text-red-600'\">\r\n                  {{transaction.amount > 0 ? '+' : ''}}‚Çπ{{Math.abs(transaction.amount).toLocaleString()}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- System Status -->\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-xl border border-gray-200/50 dark:border-gray-700/50\">\r\n          <div class=\"flex items-center mb-6\">\r\n            <div class=\"p-3 rounded-full bg-gradient-to-r from-green-500 to-emerald-600 mr-4\">\r\n              <mat-icon class=\"text-white text-2xl\">monitoring</mat-icon>\r\n            </div>\r\n            <h3 class=\"text-xl font-bold text-gray-800 dark:text-white\">System Status</h3>\r\n          </div>\r\n          \r\n          <div class=\"space-y-6\">\r\n            <div *ngFor=\"let status of systemStatus\" class=\"space-y-2\">\r\n              <div class=\"flex items-center justify-between\">\r\n                <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">{{status.name}}</span>\r\n                <span class=\"text-sm font-bold\" [class]=\"getStatusColor(status.value)\">{{status.value}}%</span>\r\n              </div>\r\n              <mat-progress-bar \r\n                [value]=\"status.value\" \r\n                [color]=\"getStatusColorName(status.value)\"\r\n                class=\"rounded-full overflow-hidden h-2\">\r\n              </mat-progress-bar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .dashboard-container {\r\n      animation: fadeIn 0.8s ease-out;\r\n    }\r\n\r\n    .stat-card::before {\r\n      content: '';\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      height: 4px;\r\n      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\r\n      opacity: 0;\r\n      transition: opacity 0.3s ease;\r\n    }\r\n\r\n    .stat-card:hover::before {\r\n      opacity: 1;\r\n    }\r\n    .mdc-button{\r\n      padding-top: 2rem !important;\r\n      padding-bottom: 2rem !important;\r\n    }\r\n\r\n    .action-button {\r\n      background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);\r\n      backdrop-filter: blur(10px);\r\n      border: 1px solid rgba(255,255,255,0.1);\r\n    }\r\n\r\n    @keyframes fadeIn {\r\n      from { opacity: 0; transform: translateY(20px); }\r\n      to { opacity: 1; transform: translateY(0); }\r\n    }\r\n\r\n    .custom-scrollbar::-webkit-scrollbar {\r\n      width: 6px;\r\n    }\r\n\r\n    .custom-scrollbar::-webkit-scrollbar-track {\r\n      background: rgba(0, 0, 0, 0.05);\r\n      border-radius: 10px;\r\n    }\r\n\r\n    .custom-scrollbar::-webkit-scrollbar-thumb {\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      border-radius: 10px;\r\n    }\r\n  `]\r\n})\r\nexport class DashboardComponent {\r\n  Math = Math;\r\n\r\n  statistics = [\r\n    {\r\n      title: 'Total Members',\r\n      value: '1,234',\r\n      change: '+12% this month',\r\n      icon: 'people',\r\n      description: 'Active members in system'\r\n    },\r\n    {\r\n      title: 'Total Deposits',\r\n      value: '‚Çπ45.2M',\r\n      change: '+8.5% this month',\r\n      icon: 'account_balance',\r\n      description: 'Total deposits amount'\r\n    },\r\n    {\r\n      title: 'Active Loans',\r\n      value: '156',\r\n      change: '+2.3% this month',\r\n      icon: 'money',\r\n      description: 'Currently active loans'\r\n    },\r\n    {\r\n      title: 'Interest Earned',\r\n      value: '‚Çπ2.1M',\r\n      change: '+15.2% this month',\r\n      icon: 'trending_up',\r\n      description: 'Total interest earned'\r\n    }\r\n  ];\r\n\r\n  quickActions = [\r\n    {\r\n      title: 'New Member',\r\n      description: 'Register new member',\r\n      icon: 'person_add'\r\n    },\r\n    {\r\n      title: 'New Deposit',\r\n      description: 'Create deposit receipt',\r\n      icon: 'add_circle'\r\n    },\r\n    {\r\n      title: 'Process Loan',\r\n      description: 'Process loan application',\r\n      icon: 'receipt_long'\r\n    },\r\n    {\r\n      title: 'Generate Report',\r\n      description: 'Create financial report',\r\n      icon: 'assessment'\r\n    },\r\n    {\r\n      title: 'Backup Data',\r\n      description: 'Backup system data',\r\n      icon: 'backup'\r\n    },\r\n    {\r\n      title: 'System Settings',\r\n      description: 'Configure system',\r\n      icon: 'settings'\r\n    }\r\n  ];\r\n\r\n  recentTransactions = [\r\n    {\r\n      description: 'Member Deposit',\r\n      date: 'Today, 2:30 PM',\r\n      amount: 50000,\r\n      icon: 'add'\r\n    },\r\n    {\r\n      description: 'Loan Disbursement',\r\n      date: 'Today, 11:15 AM',\r\n      amount: -25000,\r\n      icon: 'remove'\r\n    },\r\n    {\r\n      description: 'Interest Credit',\r\n      date: 'Yesterday, 4:45 PM',\r\n      amount: 3500,\r\n      icon: 'trending_up'\r\n    },\r\n    {\r\n      description: 'Withdrawal',\r\n      date: 'Yesterday, 10:20 AM',\r\n      amount: -15000,\r\n      icon: 'remove'\r\n    }\r\n  ];\r\n\r\n  systemStatus = [\r\n    { name: 'Database Health', value: 98 },\r\n    { name: 'System Performance', value: 94 },\r\n    { name: 'Security Score', value: 99 },\r\n    { name: 'Backup Status', value: 100 }\r\n  ];\r\n\r\n  getGradientClass(index: number): string {\r\n    const gradients = [\r\n      'bg-gradient-to-r from-indigo-500 to-purple-600',\r\n      'bg-gradient-to-r from-green-500 to-emerald-600',\r\n      'bg-gradient-to-r from-orange-500 to-red-600',\r\n      'bg-gradient-to-r from-blue-500 to-cyan-600'\r\n    ];\r\n    return gradients[index % gradients.length];\r\n  }\r\n\r\n  getIconBackgroundClass(index: number): string {\r\n    const backgrounds = [\r\n      'bg-indigo-100 dark:bg-indigo-900/30',\r\n      'bg-green-100 dark:bg-green-900/30',\r\n      'bg-orange-100 dark:bg-orange-900/30',\r\n      'bg-blue-100 dark:bg-blue-900/30'\r\n    ];\r\n    return backgrounds[index % backgrounds.length];\r\n  }\r\n\r\n  getIconColorClass(index: number): string {\r\n    const colors = [\r\n      'text-indigo-600 dark:text-indigo-400',\r\n      'text-green-600 dark:text-green-400',\r\n      'text-orange-600 dark:text-orange-400',\r\n      'text-blue-600 dark:text-blue-400'\r\n    ];\r\n    return colors[index % colors.length];\r\n  }\r\n\r\n  getTextColorClass(): string {\r\n    return 'text-gray-800 dark:text-white';\r\n  }\r\n\r\n  getSecondaryTextColorClass(): string {\r\n    return 'text-gray-500 dark:text-gray-400';\r\n  }\r\n\r\n  getActionButtonClass(index: number): string {\r\n    const classes = [\r\n      'bg-gradient-to-r from-indigo-500 to-purple-600 text-white hover:from-indigo-600 hover:to-purple-700',\r\n      'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700',\r\n      'bg-gradient-to-r from-orange-500 to-red-600 text-white hover:from-orange-600 hover:to-red-700',\r\n      'bg-gradient-to-r from-blue-500 to-cyan-600 text-white hover:from-blue-600 hover:to-cyan-700',\r\n      'bg-gradient-to-r from-purple-500 to-pink-600 text-white hover:from-purple-600 hover:to-pink-700',\r\n      'bg-gradient-to-r from-yellow-500 to-orange-600 text-white hover:from-yellow-600 hover:to-orange-700'\r\n    ];\r\n    return classes[index % classes.length];\r\n  }\r\n\r\n  getStatusColor(value: number): string {\r\n    if (value >= 95) return 'text-green-600';\r\n    if (value >= 80) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  }\r\n\r\n  getStatusColorName(value: number): 'primary' | 'accent' | 'warn' {\r\n    if (value >= 95) return 'primary';\r\n    if (value >= 80) return 'accent';\r\n    return 'warn';\r\n  }\r\n}\r\n","size_bytes":14196},"attached_assets/extracted_frontend/fintcs/src/app/components/layout/main-layout.component.ts":{"content":"\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Router, NavigationEnd, Event } from '@angular/router';\r\nimport { MatSidenavModule, MatSidenav } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { filter } from 'rxjs/operators';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\ninterface MenuItem {\r\n  label: string;\r\n  icon: string;\r\n  route?: string;\r\n  children?: MenuItem[];\r\n  badge?: number;\r\n  divider?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-main-layout',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatSidenavModule,\r\n    MatDividerModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n    MatTooltipModule\r\n  ],\r\n  template: `\r\n    <div class=\"layout-container\">\r\n      <mat-sidenav-container class=\"sidenav-container\">\r\n        <!-- Professional Sidebar -->\r\n        <mat-sidenav #drawer\r\n                     [mode]=\"isMobile ? 'over' : 'side'\"\r\n                     [opened]=\"!isMobile\"\r\n                     class=\"sidebar-professional\">\r\n          \r\n          <!-- Sidebar Header -->\r\n          <div class=\"sidebar-header\">\r\n            <div class=\"flex items-center space-x-3 p-4\">\r\n              <div class=\"w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center\">\r\n                <mat-icon class=\"text-white text-xl\">account_balance</mat-icon>\r\n              </div>\r\n              <div class=\"flex-1\">\r\n                <h2 class=\"text-white font-bold text-lg\">FinTCS</h2>\r\n                <p class=\"text-white/70 text-xs\">Financial Management</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Navigation Menu -->\r\n          <nav class=\"sidebar-nav\">\r\n            <!-- Dashboard Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Dashboard</div>\r\n              <a routerLink=\"/dashboard\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>dashboard</mat-icon>\r\n                <span>Overview</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- File Management Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">File Management</div>\r\n              \r\n              <a routerLink=\"/file/society\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>business</mat-icon>\r\n                <span>Society</span>\r\n              </a>\r\n\r\n              <div class=\"nav-group\">\r\n                <div class=\"nav-group-header\">Security</div>\r\n                <a routerLink=\"/file/security/new-user\" \r\n                   routerLinkActive=\"active\" \r\n                   class=\"nav-item nav-item-sub\"\r\n                   (click)=\"closeMobileNav()\">\r\n                  <mat-icon>person_add</mat-icon>\r\n                  <span>New User</span>\r\n                </a>\r\n                <a routerLink=\"/file/security/authority\" \r\n                   routerLinkActive=\"active\" \r\n                   class=\"nav-item nav-item-sub\"\r\n                   (click)=\"closeMobileNav()\">\r\n                  <mat-icon>security</mat-icon>\r\n                  <span>Authority</span>\r\n                </a>\r\n                <a routerLink=\"/file/security/my-rights\" \r\n                   routerLinkActive=\"active\" \r\n                   class=\"nav-item nav-item-sub\"\r\n                   (click)=\"closeMobileNav()\">\r\n                  <mat-icon>verified_user</mat-icon>\r\n                  <span>My Rights</span>\r\n                </a>\r\n                <a routerLink=\"/file/security/change-password\" \r\n                   routerLinkActive=\"active\" \r\n                   class=\"nav-item nav-item-sub\"\r\n                   (click)=\"closeMobileNav()\">\r\n                  <mat-icon>lock</mat-icon>\r\n                  <span>Change Password</span>\r\n                </a>\r\n              </div>\r\n\r\n              <a routerLink=\"/file/create-new-year\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>event</mat-icon>\r\n                <span>Create New Year</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Master Data Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Master Data</div>\r\n              \r\n              <a routerLink=\"/master/member-details\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>people</mat-icon>\r\n                <span>Member Details</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/master/deposit-scheme\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>savings</mat-icon>\r\n                <span>Deposit Scheme</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/master/interest-master\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>percent</mat-icon>\r\n                <span>Interest Master</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/master/table\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>table_view</mat-icon>\r\n                <span>Table Master</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Transactions Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Transactions</div>\r\n              \r\n              <a routerLink=\"/transaction/deposit-receipt\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>receipt</mat-icon>\r\n                <span>Deposit Receipt</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/transaction/deposit-payment\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>payment</mat-icon>\r\n                <span>Deposit Payment</span>\r\n              </a>\r\n              \r\n              <a routerLink=\"/transaction/monthly-demand\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>payment</mat-icon>\r\n                <span>Demand</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/transaction/loan-taken\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>account_balance_wallet</mat-icon>\r\n                <span>Loan Taken</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/transaction/deposit-slip\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>description</mat-icon>\r\n                <span>Deposit Slip</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Accounts Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Accounts</div>\r\n              \r\n              <a routerLink=\"/accounts/voucher-creation\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>note</mat-icon>\r\n                <span>Voucher</span>\r\n              </a>\r\n              \r\n              <a routerLink=\"/accounts/loan-receipt\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>note</mat-icon>\r\n                <span>Loan Receipt</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/cash-book\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>book</mat-icon>\r\n                <span>Cash Book</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/ledger\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>account_book</mat-icon>\r\n                <span>Ledger</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/trial-balance\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>balance</mat-icon>\r\n                <span>Trial Balance</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/profit-loss\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>trending_up</mat-icon>\r\n                <span>Profit & Loss</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/accounts/balance-sheet\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>assessment</mat-icon>\r\n                <span>Balance Sheet</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Reports Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">Reports</div>\r\n              \r\n              <a routerLink=\"/reports/employees\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>group</mat-icon>\r\n                <span>Employee Reports</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/reports/loan\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>money</mat-icon>\r\n                <span>Loan Reports</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/reports/opening-balance\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>start</mat-icon>\r\n                <span>Opening Balance</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/reports/closing-balance\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>stop</mat-icon>\r\n                <span>Closing Balance</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- System Section -->\r\n            <div class=\"nav-section\">\r\n              <div class=\"nav-section-header\">System</div>\r\n              \r\n              <a routerLink=\"/backup\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>backup</mat-icon>\r\n                <span>Backup</span>\r\n              </a>\r\n\r\n              <a routerLink=\"/admin\" \r\n                 routerLinkActive=\"active\" \r\n                 class=\"nav-item\"\r\n                 (click)=\"closeMobileNav()\">\r\n                <mat-icon>admin_panel_settings</mat-icon>\r\n                <span>Administration</span>\r\n              </a>\r\n            </div>\r\n          </nav>\r\n        </mat-sidenav>\r\n\r\n        <!-- Main Content Area -->\r\n        <mat-sidenav-content class=\"main-content\">\r\n          <!-- Professional Header -->\r\n          <mat-toolbar class=\"header-professional\">\r\n            <button mat-icon-button (click)=\"drawer.toggle()\" class=\"menu-button\">\r\n              <mat-icon>menu</mat-icon>\r\n            </button>\r\n\r\n            <!-- Breadcrumb -->\r\n            <div class=\"breadcrumb flex-1\">\r\n              <ng-container *ngFor=\"let breadcrumb of breadcrumbs; let last = last\">\r\n                <span [class.active]=\"last\">{{ breadcrumb.label }}</span>\r\n                <mat-icon *ngIf=\"!last\" class=\"separator text-sm\">chevron_right</mat-icon>\r\n              </ng-container>\r\n            </div>\r\n\r\n            <!-- Header Actions -->\r\n            <div class=\"flex items-center space-x-2\">\r\n              <!-- Dark Mode Toggle -->\r\n              <button mat-icon-button \r\n                      (click)=\"toggleDarkMode()\" \r\n                      matTooltip=\"Toggle Dark Mode\"\r\n                      class=\"header-action\">\r\n                <mat-icon>{{ isDarkMode ? 'light_mode' : 'dark_mode' }}</mat-icon>\r\n              </button>\r\n\r\n              <!-- Notifications -->\r\n              <button mat-icon-button \r\n                      [matMenuTriggerFor]=\"notificationMenu\"\r\n                      matTooltip=\"Notifications\"\r\n                      class=\"header-action\">\r\n                <mat-icon matBadge=\"3\" matBadgeColor=\"warn\">notifications</mat-icon>\r\n              </button>\r\n\r\n              <!-- User Menu -->\r\n              <button mat-icon-button \r\n                      [matMenuTriggerFor]=\"userMenu\"\r\n                      matTooltip=\"User Menu\"\r\n                      class=\"header-action\">\r\n                <mat-icon>account_circle</mat-icon>\r\n              </button>\r\n            </div>\r\n          </mat-toolbar>\r\n\r\n          <!-- Page Content -->\r\n          <div class=\"content-professional\">\r\n            <div class=\"content-wrapper\">\r\n              <router-outlet></router-outlet>\r\n            </div>\r\n          </div>\r\n        </mat-sidenav-content>\r\n      </mat-sidenav-container>\r\n    </div>\r\n\r\n    <!-- Notification Menu -->\r\n    <mat-menu #notificationMenu=\"matMenu\" class=\"notification-menu\">\r\n      <div class=\"menu-header\">\r\n        <span class=\"text-section-header font-semibold\">Notifications</span>\r\n        <button mat-button color=\"primary\" class=\"text-xs\">Mark all as read</button>\r\n      </div>\r\n      <mat-divider></mat-divider>\r\n      <button mat-menu-item>\r\n        <mat-icon>info</mat-icon>\r\n        <div class=\"ml-3\">\r\n          <div class=\"text-body font-medium\">New member registered</div>\r\n          <div class=\"text-caption text-gray-500\">2 minutes ago</div>\r\n        </div>\r\n      </button>\r\n      <button mat-menu-item>\r\n        <mat-icon>warning</mat-icon>\r\n        <div class=\"ml-3\">\r\n          <div class=\"text-body font-medium\">Loan payment overdue</div>\r\n          <div class=\"text-caption text-gray-500\">1 hour ago</div>\r\n        </div>\r\n      </button>\r\n      <button mat-menu-item>\r\n        <mat-icon>check_circle</mat-icon>\r\n        <div class=\"ml-3\">\r\n          <div class=\"text-body font-medium\">Backup completed successfully</div>\r\n          <div class=\"text-caption text-gray-500\">3 hours ago</div>\r\n        </div>\r\n      </button>\r\n      <mat-divider></mat-divider>\r\n      <button mat-menu-item class=\"text-center\">\r\n        <span class=\"text-primary\">View all notifications</span>\r\n      </button>\r\n    </mat-menu>\r\n\r\n    <!-- User Menu -->\r\n    <mat-menu #userMenu=\"matMenu\" class=\"user-menu\">\r\n      <div class=\"menu-header\">\r\n        <div class=\"flex items-center space-x-3 p-2\">\r\n          <div class=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\r\n            {{ currentUser?.name?.charAt(0) || 'U' }}\r\n          </div>\r\n          <div>\r\n            <div class=\"text-body font-semibold\">{{ currentUser?.name || 'User' }}</div>\r\n            <div class=\"text-caption text-gray-500\">{{ currentUser?.email || 'user@example.com' }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <mat-divider></mat-divider>\r\n      <button mat-menu-item routerLink=\"/profile\">\r\n        <mat-icon>person</mat-icon>\r\n        <span>My Profile</span>\r\n      </button>\r\n      <button mat-menu-item routerLink=\"/settings\">\r\n        <mat-icon>settings</mat-icon>\r\n        <span>Settings</span>\r\n      </button>\r\n      <mat-divider></mat-divider>\r\n      <button mat-menu-item (click)=\"logout()\">\r\n        <mat-icon>logout</mat-icon>\r\n        <span>Sign Out</span>\r\n      </button>\r\n    </mat-menu>\r\n  `,\r\n  styles: [`\r\n    .layout-container {\r\n      height: 100vh;\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n\r\n    .sidenav-container {\r\n      flex: 1;\r\n      background: var(--color-bg-secondary);\r\n    }\r\n\r\n    .sidebar-professional {\r\n      width: 280px;\r\n      border-right: 1px solid var(--color-border);\r\n      background: var(--gradient-sidebar);\r\n    }\r\n\r\n    .sidebar-header {\r\n      border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n      margin-bottom: var(--spacing-md);\r\n    }\r\n\r\n    .sidebar-nav {\r\n      padding: var(--spacing-md);\r\n    }\r\n\r\n    .nav-section {\r\n      margin-bottom: var(--spacing-lg);\r\n    }\r\n\r\n    .nav-section-header {\r\n      padding: var(--spacing-sm) var(--spacing-md);\r\n      color: rgba(255, 255, 255, 0.6);\r\n      font-size: 12px;\r\n      font-weight: 600;\r\n      text-transform: uppercase;\r\n      letter-spacing: 0.05em;\r\n      margin-bottom: var(--spacing-sm);\r\n    }\r\n\r\n    .nav-item {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--spacing-sm);\r\n      padding: 12px var(--spacing-md);\r\n      margin: 2px 0;\r\n      border-radius: var(--radius-md);\r\n      color: rgba(255, 255, 255, 0.8);\r\n      text-decoration: none;\r\n      transition: all 0.2s ease;\r\n      font-weight: 500;\r\n      font-size: 14px;\r\n      position: relative;\r\n    }\r\n\r\n    .nav-item:hover {\r\n      background: rgba(255, 255, 255, 0.1);\r\n      color: white;\r\n      transform: translateX(4px);\r\n    }\r\n\r\n    .nav-item.active {\r\n      background: rgba(255, 255, 255, 0.15);\r\n      color: white;\r\n      font-weight: 600;\r\n    }\r\n\r\n    .nav-item.active::before {\r\n      content: '';\r\n      position: absolute;\r\n      left: 0;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      width: 4px;\r\n      height: 20px;\r\n      background: white;\r\n      border-radius: 0 2px 2px 0;\r\n    }\r\n\r\n    .nav-group {\r\n      margin-left: var(--spacing-md);\r\n      border-left: 1px solid rgba(255, 255, 255, 0.1);\r\n      padding-left: var(--spacing-md);\r\n      margin-top: var(--spacing-sm);\r\n    }\r\n\r\n    .nav-group-header {\r\n      padding: var(--spacing-xs) var(--spacing-sm);\r\n      color: rgba(255, 255, 255, 0.5);\r\n      font-size: 11px;\r\n      font-weight: 600;\r\n      text-transform: uppercase;\r\n      letter-spacing: 0.05em;\r\n      margin-bottom: var(--spacing-xs);\r\n    }\r\n\r\n    .nav-item-sub {\r\n      font-size: 13px;\r\n      padding: 8px var(--spacing-sm);\r\n      margin: 1px 0;\r\n    }\r\n\r\n    .header-professional {\r\n      background: var(--color-bg-card);\r\n      color: var(--color-text-primary);\r\n      border-bottom: 1px solid var(--color-border);\r\n      height: 64px;\r\n      box-shadow: var(--shadow-sm);\r\n      position: sticky;\r\n      top: 0;\r\n      z-index: 10;\r\n    }\r\n\r\n    .menu-button {\r\n      margin-right: var(--spacing-md);\r\n    }\r\n\r\n    .breadcrumb {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--spacing-sm);\r\n      font-size: 14px;\r\n      color: var(--color-text-secondary);\r\n    }\r\n\r\n    .breadcrumb .separator {\r\n      color: var(--color-text-muted);\r\n    }\r\n\r\n    .breadcrumb .active {\r\n      color: var(--color-text-primary);\r\n      font-weight: 500;\r\n    }\r\n\r\n    .header-action {\r\n      width: 40px;\r\n      height: 40px;\r\n      transition: all 0.2s ease;\r\n    }\r\n\r\n    .header-action:hover {\r\n      background: var(--color-bg-secondary);\r\n      transform: scale(1.05);\r\n    }\r\n\r\n    .content-professional {\r\n      background: var(--color-bg-secondary);\r\n      min-height: calc(100vh - 64px);\r\n      padding: var(--spacing-lg);\r\n    }\r\n\r\n    .content-wrapper {\r\n      max-width: 1400px;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .menu-header {\r\n      padding: var(--spacing-md);\r\n      border-bottom: 1px solid var(--color-border-light);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: between;\r\n      background: var(--color-bg-secondary);\r\n    }\r\n\r\n    .notification-menu,\r\n    .user-menu {\r\n      min-width: 280px;\r\n      max-width: 320px;\r\n    }\r\n\r\n    .notification-menu .mat-mdc-menu-item,\r\n    .user-menu .mat-mdc-menu-item {\r\n      height: auto;\r\n      min-height: 48px;\r\n      padding: var(--spacing-sm) var(--spacing-md);\r\n      line-height: 1.4;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n      .sidebar-professional {\r\n        width: 100vw;\r\n        max-width: 280px;\r\n      }\r\n\r\n      .content-professional {\r\n        padding: var(--spacing-md);\r\n      }\r\n\r\n      .breadcrumb {\r\n        display: none;\r\n      }\r\n    }\r\n\r\n    @media (max-width: 640px) {\r\n      .content-professional {\r\n        padding: var(--spacing-sm);\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class MainLayoutComponent implements OnInit {\r\n  @ViewChild('drawer') drawer!: MatSidenav;\r\n\r\n  isMobile = false;\r\n  isDarkMode = false;\r\n  currentUser: any = null;\r\n  breadcrumbs: { label: string; route?: string }[] = [];\r\n\r\n  constructor(\r\n    private breakpointObserver: BreakpointObserver,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // Check if mobile\r\n    this.breakpointObserver.observe([Breakpoints.Handset])\r\n      .subscribe(result => {\r\n        this.isMobile = result.matches;\r\n      });\r\n\r\n    // Load dark mode preference\r\n    this.isDarkMode = localStorage.getItem('darkMode') === 'true';\r\n    this.updateDarkMode();\r\n\r\n    // Get current user\r\n    this.currentUser = this.authService.getCurrentUser();\r\n\r\n    // Listen to route changes for breadcrumbs\r\n    this.router.events\r\n      .pipe(\r\n        filter((event: Event): event is NavigationEnd => event instanceof NavigationEnd)\r\n      )\r\n      .subscribe((event: NavigationEnd) => {\r\n        this.updateBreadcrumbs(event.url);\r\n      });\r\n  }\r\n\r\n  toggleDarkMode() {\r\n    this.isDarkMode = !this.isDarkMode;\r\n    localStorage.setItem('darkMode', this.isDarkMode.toString());\r\n    this.updateDarkMode();\r\n  }\r\n\r\n  private updateDarkMode() {\r\n    if (this.isDarkMode) {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }\r\n\r\n  private updateBreadcrumbs(url: string) {\r\n    const segments = url.split('/').filter(segment => segment);\r\n    this.breadcrumbs = [{ label: 'Dashboard', route: '/dashboard' }];\r\n\r\n    let currentRoute = '';\r\n    segments.forEach((segment, index) => {\r\n      currentRoute += `/${segment}`;\r\n      const label = this.formatBreadcrumbLabel(segment);\r\n      this.breadcrumbs.push({ label, route: index === segments.length - 1 ? undefined : currentRoute });\r\n    });\r\n  }\r\n\r\n  private formatBreadcrumbLabel(segment: string): string {\r\n    return segment\r\n      .split('-')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  }\r\n\r\n  closeMobileNav() {\r\n    if (this.isMobile) {\r\n      this.drawer.close();\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n","size_bytes":23784},"attached_assets/extracted_frontend/fintcs/src/app/components/member-details/member-details.component.css":{"content":"\n/* Member Details Professional Styles */\n\n.member-details-container {\n  animation: fadeIn 0.6s ease-out;\n}\n\n/* Professional Filter Styling */\n.filter-field .mat-mdc-form-field-wrapper {\n  border-radius: 8px !important;\n  background: var(--color-bg-primary) !important;\n  transition: all 0.2s ease !important;\n}\n\n.filter-field .mat-mdc-form-field-outline {\n  border-radius: 8px !important;\n}\n\n.filter-field:hover .mat-mdc-form-field-wrapper {\n  box-shadow: var(--shadow-sm) !important;\n}\n\n/* Professional Status Badges */\n.status-chip {\n  font-weight: 500;\n  border-radius: 16px;\n  padding: 6px 12px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: center;\n  box-shadow: var(--shadow-sm);\n  transition: all 0.2s ease;\n}\n\n/* Professional Table Styling */\n.mat-mdc-table {\n  background: transparent !important;\n  font-family: 'Inter', system-ui, sans-serif !important;\n}\n\n.mat-mdc-row {\n  border-bottom: 1px solid var(--color-border-light) !important;\n  transition: all 0.2s ease !important;\n}\n\n.mat-mdc-row:hover {\n  background: var(--color-bg-secondary) !important;\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-sm) !important;\n}\n\n.mat-mdc-header-row {\n  background: var(--gradient-header) !important;\n  height: 56px !important;\n  box-shadow: var(--shadow-sm) !important;\n}\n\n.mat-mdc-header-cell {\n  color: white !important;\n  font-weight: 600 !important;\n  font-size: 14px !important;\n  border-bottom: none !important;\n  letter-spacing: 0.025em;\n  font-family: 'Inter', system-ui, sans-serif !important;\n}\n\n.mat-mdc-cell {\n  border-bottom-color: var(--color-border-light) !important;\n  font-size: 14px !important;\n  color: var(--color-text-primary) !important;\n  font-family: 'Inter', system-ui, sans-serif !important;\n}\n\n/* Professional Pagination */\n.mat-mdc-paginator {\n  background: transparent !important;\n  border: none !important;\n  font-family: 'Inter', system-ui, sans-serif !important;\n}\n\n.mat-mdc-paginator .mat-mdc-button {\n  color: var(--color-text-primary) !important;\n}\n\n/* Professional Animations */\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n.card-hover {\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-lg);\n}\n\n/* Professional Action Buttons */\n.action-button {\n  width: 32px !important;\n  height: 32px !important;\n  min-width: 32px !important;\n  border-radius: 6px !important;\n  transition: all 0.2s ease !important;\n}\n\n.action-button:hover {\n  transform: scale(1.1);\n}\n\n/* Professional Responsive Design */\n@media (max-width: 768px) {\n  .member-details-container {\n    padding: 12px;\n  }\n  \n  .grid {\n    grid-template-columns: 1fr;\n    gap: 12px;\n  }\n  \n  .text-page-title {\n    font-size: 18px;\n  }\n  \n  .text-section-header {\n    font-size: 15px;\n  }\n}\n\n/* Dark Theme Adjustments */\n.dark .filter-field .mat-mdc-form-field-wrapper {\n  background: var(--color-bg-primary) !important;\n  border-color: var(--color-border) !important;\n}\n\n.dark .mat-mdc-row {\n  border-bottom: 1px solid var(--color-border-light) !important;\n}\n\n.dark .mat-mdc-row:hover {\n  background: var(--color-bg-secondary) !important;\n}\n\n.dark .mat-mdc-cell {\n  border-bottom-color: var(--color-border-light) !important;\n  color: var(--color-text-primary) !important;\n}\n\n/* Professional Loading States */\n.loading-row {\n  background: var(--color-bg-secondary);\n  border-radius: 8px;\n  margin-bottom: 8px;\n  height: 56px;\n  animation: pulse 1.5s ease-in-out infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n/* Professional Form Validation */\n.mat-mdc-form-field.mat-form-field-invalid .mat-mdc-form-field-outline {\n  border-color: var(--color-danger) !important;\n}\n\n.mat-mdc-form-field.mat-form-field-invalid .mat-mdc-floating-label {\n  color: var(--color-danger) !important;\n}\n\n/* Professional Tooltips */\n.mat-mdc-tooltip {\n  font-family: 'Inter', system-ui, sans-serif !important;\n  font-size: 12px !important;\n  background: var(--color-bg-primary) !important;\n  color: var(--color-text-primary) !important;\n  border: 1px solid var(--color-border) !important;\n  box-shadow: var(--shadow-lg) !important;\n}\n","size_bytes":4248},"attached_assets/extracted_frontend/fintcs/src/app/components/member-details-view/member-details-view.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatTabsModule } from '@angular/material/tabs';\n\ninterface Member {\n  id: number;\n  memberNo: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  role: string;\n  society: string;\n  joinDate: Date;\n  status: string;\n  address?: string;\n  city?: string;\n  state?: string;\n}\n\n@Component({\n  selector: 'app-member-details-view',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatChipsModule,\n    MatTabsModule\n  ],\n  template: `\n    <div class=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n      <div class=\"max-w-4xl mx-auto space-y-6\">\n        \n        <!-- Header -->\n        <div class=\"flex items-center justify-between\">\n          <button \n            (click)=\"goBack()\"\n            class=\"inline-flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors duration-200\"\n          >\n            <mat-icon class=\"mr-2\">arrow_back</mat-icon>\n            Back to Members\n          </button>\n        </div>\n\n        <!-- Member Profile Card -->\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden\">\n          <!-- Profile Header -->\n          <div class=\"bg-gradient-to-r from-blue-500 to-purple-600 px-6 py-8\">\n            <div class=\"flex items-center space-x-4\">\n              <div class=\"w-20 h-20 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n                <span class=\"text-2xl font-bold text-white\">\n                  {{member ? getInitials(member.firstName, member.lastName) : ''}}\n                </span>\n              </div>\n              <div class=\"text-white\">\n                <h1 class=\"text-3xl font-bold\">{{member?.firstName}} {{member?.lastName}}</h1>\n                <p class=\"text-blue-100\">{{member?.memberNo}} ‚Ä¢ {{member?.role}}</p>\n                <div class=\"mt-2\">\n                  <span class=\"inline-flex px-3 py-1 text-sm font-medium rounded-full\"\n                        [class]=\"member?.status === 'Active' ? 'bg-green-500 bg-opacity-20 text-green-100' : 'bg-red-500 bg-opacity-20 text-red-100'\">\n                    {{member?.status}}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Tabs Content -->\n          <mat-tab-group class=\"p-6\">\n            <!-- Basic Information Tab -->\n            <mat-tab label=\"Basic Information\">\n              <div class=\"py-6 space-y-6\">\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div class=\"space-y-4\">\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Member Number</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.memberNo}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Full Name</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.firstName}} {{member?.lastName}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Email</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.email}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Phone</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.phone}}</p>\n                    </div>\n                  </div>\n                  <div class=\"space-y-4\">\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Role</label>\n                      <span class=\"inline-flex px-3 py-1 text-sm font-medium rounded-full bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\">\n                        {{member?.role}}\n                      </span>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Society</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.society}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Join Date</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.joinDate | date:'fullDate'}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Status</label>\n                      <span class=\"inline-flex px-3 py-1 text-sm font-medium rounded-full\"\n                            [class]=\"member?.status === 'Active' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\">\n                        {{member?.status}}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </mat-tab>\n\n            <!-- Address Information Tab -->\n            <mat-tab label=\"Address Information\">\n              <div class=\"py-6 space-y-6\">\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div class=\"space-y-4\">\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">Address</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.address || 'Not provided'}}</p>\n                    </div>\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">City</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.city || 'Not provided'}}</p>\n                    </div>\n                  </div>\n                  <div class=\"space-y-4\">\n                    <div>\n                      <label class=\"block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1\">State</label>\n                      <p class=\"text-lg text-gray-900 dark:text-white\">{{member?.state || 'Not provided'}}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </mat-tab>\n\n            <!-- Activity Tab -->\n            <mat-tab label=\"Recent Activity\">\n              <div class=\"py-6\">\n                <div class=\"text-center py-12\">\n                  <mat-icon class=\"text-6xl text-gray-400 dark:text-gray-500 mb-4\">history</mat-icon>\n                  <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No Recent Activity</h3>\n                  <p class=\"text-gray-500 dark:text-gray-400\">Member activity will appear here when available.</p>\n                </div>\n              </div>\n            </mat-tab>\n          </mat-tab-group>\n        </div>\n\n        <!-- Action Buttons -->\n        <div class=\"flex justify-end space-x-3\">\n          <button \n            (click)=\"goBack()\"\n            class=\"px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition-colors duration-200\"\n          >\n            Back to List\n          </button>\n          <button \n            (click)=\"editMember()\"\n            class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200\"\n          >\n            <mat-icon class=\"mr-2\">edit</mat-icon>\n            Edit Member\n          </button>\n        </div>\n\n        <!-- Member Not Found -->\n        <div *ngIf=\"!member && !loading\" class=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-12 text-center\">\n          <mat-icon class=\"text-6xl text-gray-400 dark:text-gray-500 mb-4\">person_off</mat-icon>\n          <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Member Not Found</h3>\n          <p class=\"text-gray-500 dark:text-gray-400 mb-4\">The member you're looking for doesn't exist or has been removed.</p>\n          <button \n            (click)=\"goBack()\"\n            class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200\"\n          >\n            Back to Members\n          </button>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: block;\n    }\n  `]\n})\nexport class MemberDetailsViewComponent implements OnInit {\n  member: Member | null = null;\n  loading = true;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    const memberId = this.route.snapshot.paramMap.get('id');\n    if (memberId) {\n      this.loadMember(parseInt(memberId));\n    }\n  }\n\n  loadMember(id: number) {\n    // In a real application, you would fetch this from a service\n    // For now, using sample data\n    const sampleMembers: Member[] = [\n      {\n        id: 1,\n        memberNo: 'MEM1001',\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john.doe@email.com',\n        phone: '9876543210',\n        role: 'Member',\n        society: 'Main Branch',\n        joinDate: new Date('2024-01-15'),\n        status: 'Active',\n        address: '123 Main Street',\n        city: 'Mumbai',\n        state: 'Maharashtra'\n      },\n      {\n        id: 2,\n        memberNo: 'MEM1002',\n        firstName: 'Jane',\n        lastName: 'Smith',\n        email: 'jane.smith@email.com',\n        phone: '9876543211',\n        role: 'Executive',\n        society: 'North Branch',\n        joinDate: new Date('2024-02-20'),\n        status: 'Active',\n        address: '456 Oak Avenue',\n        city: 'Delhi',\n        state: 'Delhi'\n      },\n      {\n        id: 3,\n        memberNo: 'MEM1003',\n        firstName: 'Mike',\n        lastName: 'Johnson',\n        email: 'mike.johnson@email.com',\n        phone: '9876543212',\n        role: 'Board Member',\n        society: 'South Branch',\n        joinDate: new Date('2023-12-10'),\n        status: 'Inactive',\n        address: '789 Pine Road',\n        city: 'Bangalore',\n        state: 'Karnataka'\n      }\n    ];\n\n    this.member = sampleMembers.find(m => m.id === id) || null;\n    this.loading = false;\n  }\n\n  getInitials(firstName: string, lastName: string): string {\n    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();\n  }\n\n  goBack() {\n    this.router.navigate(['/master/member-details']);\n  }\n\n  editMember() {\n    // Navigate back to member list with edit mode\n    this.router.navigate(['/master/member-details'], { \n      queryParams: { edit: this.member?.id } \n    });\n  }\n}\n","size_bytes":11347},"attached_assets/extracted_frontend/fintcs/src/app/components/new-year/new-year.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule, FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-new-year',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatFormFieldModule, MatInputModule, ReactiveFormsModule],\n  template: `\n    <div class=\"page-container\">\n      <h1>Start New Financial Year</h1>\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Financial Year Configuration</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <form [formGroup]=\"yearForm\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Financial Year</mat-label>\n              <input matInput formControlName=\"year\" placeholder=\"2024-2025\">\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Start Date</mat-label>\n              <input matInput type=\"date\" formControlName=\"startDate\">\n            </mat-form-field>\n          </form>\n        </mat-card-content>\n        <mat-card-actions>\n          <button mat-raised-button color=\"primary\">Start New Financial Year</button>\n        </mat-card-actions>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container { max-width: 600px; margin: 0 auto; }\n    mat-form-field { width: 100%; margin: 10px 0; }\n  `]\n})\nexport class NewYearComponent {\n  yearForm: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n    this.yearForm = this.fb.group({\n      year: ['2024-2025'],\n      startDate: ['2024-04-01']\n    });\n  }\n}\n","size_bytes":1852},"attached_assets/extracted_frontend/fintcs/src/app/components/statement/statement.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-statement',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `\n    <div class=\"page-container\">\n      <h1>Account Statements</h1>\n      <mat-card>\n        <mat-card-content>\n          <p>Account statement generation and management functionality will be implemented here.</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container { max-width: 800px; margin: 0 auto; }\n  `]\n})\nexport class StatementComponent {}\n","size_bytes":655},"attached_assets/extracted_frontend/fintcs/src/app/components/unauthorized/unauthorized.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-unauthorized',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatIconModule],\n  template: `\n    <div class=\"unauthorized-container\">\n      <mat-card class=\"unauthorized-card\">\n        <mat-card-content>\n          <div class=\"content\">\n            <mat-icon class=\"warning-icon\">warning</mat-icon>\n            <h1>Access Denied</h1>\n            <p>You don't have permission to access this page.</p>\n            <p>Please contact your administrator if you believe this is an error.</p>\n            <button mat-raised-button color=\"primary\" (click)=\"goToDashboard()\">\n              Go to Dashboard\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .unauthorized-container {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      background-color: #f5f5f5;\n    }\n\n    .unauthorized-card {\n      max-width: 400px;\n      text-align: center;\n    }\n\n    .content {\n      padding: 20px;\n    }\n\n    .warning-icon {\n      font-size: 64px;\n      color: #ff9800;\n      margin-bottom: 16px;\n    }\n\n    h1 {\n      color: #333;\n      margin-bottom: 16px;\n    }\n\n    p {\n      color: #666;\n      margin-bottom: 16px;\n    }\n  `]\n})\nexport class UnauthorizedComponent {\n  constructor(private router: Router) {}\n\n  goToDashboard() {\n    this.router.navigate(['/dashboard']);\n  }\n}\n","size_bytes":1752},"attached_assets/extracted_frontend/fintcs/src/app/components/user-management/user-management.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { Router } from '@angular/router';\nimport { AuthService, UserRole } from '../../services/auth.service';\n\ninterface User {\n  id: number;\n  username: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  role: UserRole;\n  society: string;\n  active: boolean;\n  createdDate: Date;\n  lastLogin?: Date;\n}\n\n@Component({\n  selector: 'app-user-management',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatSnackBarModule,\n    MatSlideToggleModule,\n    MatTooltipModule\n  ],\n  template: `\n    <div class=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6\">\n      <div class=\"max-w-7xl mx-auto\">\n        <!-- Header -->\n        <div class=\"mb-6\">\n          <div class=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h1 class=\"text-2xl font-bold text-gray-900 dark:text-white\">User Management</h1>\n              <p class=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                Manage all system users and their roles\n              </p>\n            </div>\n            <div class=\"mt-4 sm:mt-0\">\n              <button\n                (click)=\"openUserDialog()\"\n                class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                <mat-icon class=\"mr-2\">add</mat-icon>\n                Add User\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Filters Card -->\n        <div class=\"bg-white dark:bg-gray-800 shadow rounded-lg mb-6\">\n          <div class=\"p-6\">\n            <div class=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4\">\n              <!-- Search -->\n              <div class=\"lg:col-span-2\">\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Search\n                </label>\n                <div class=\"relative\">\n                  <mat-icon class=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">search</mat-icon>\n                  <input\n                    type=\"text\"\n                    [(ngModel)]=\"searchTerm\"\n                    (input)=\"applyFilters()\"\n                    placeholder=\"Search by name, username, email...\"\n                    class=\"pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  />\n                </div>\n              </div>\n\n              <!-- Role Filter -->\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Role\n                </label>\n                <select\n                  [(ngModel)]=\"selectedRole\"\n                  (change)=\"applyFilters()\"\n                  class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                >\n                  <option value=\"\">All Roles</option>\n                  <option [value]=\"UserRole.SUPER_ADMIN\">Super Admin</option>\n                  <option [value]=\"UserRole.SOCIETY_ADMIN\">Society Admin</option>\n                  <option [value]=\"UserRole.BRANCH_ADMIN\">Branch Admin</option>\n                  <option [value]=\"UserRole.ACCOUNTANT\">Accountant</option>\n                  <option [value]=\"UserRole.OPERATOR\">Operator</option>\n                  <option [value]=\"UserRole.MEMBER\">Member</option>\n                </select>\n              </div>\n\n              <!-- Status Filter -->\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Status\n                </label>\n                <select\n                  [(ngModel)]=\"selectedStatus\"\n                  (change)=\"applyFilters()\"\n                  class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                >\n                  <option value=\"\">All Status</option>\n                  <option value=\"active\">Active</option>\n                  <option value=\"inactive\">Inactive</option>\n                </select>\n              </div>\n            </div>\n\n            <div class=\"mt-4\">\n              <button\n                (click)=\"clearFilters()\"\n                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600\"\n              >\n                <mat-icon class=\"mr-2\">clear</mat-icon>\n                Clear Filters\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Users Table -->\n        <div class=\"bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden\">\n          <div class=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n            <h3 class=\"text-lg leading-6 font-medium text-gray-900 dark:text-white\">\n              System Users ({{filteredUsers.length}})\n            </h3>\n          </div>\n          \n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                <tr>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    User\n                  </th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Contact\n                  </th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Role & Society\n                  </th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Last Login\n                  </th>\n                  <th class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody class=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                <tr *ngFor=\"let user of filteredUsers\" class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex items-center\">\n                      <div class=\"flex-shrink-0 h-10 w-10\">\n                        <div class=\"h-10 w-10 rounded-full bg-purple-500 flex items-center justify-center\">\n                          <span class=\"text-sm font-medium text-white\">\n                            {{getInitials(user.firstName, user.lastName)}}\n                          </span>\n                        </div>\n                      </div>\n                      <div class=\"ml-4\">\n                        <div class=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {{user.firstName}} {{user.lastName}}\n                        </div>\n                        <div class=\"text-sm text-gray-500 dark:text-gray-400\">\n                          {{ '@' + user.username }}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"text-sm text-gray-900 dark:text-white\">{{user.email}}</div>\n                    <div class=\"text-sm text-gray-500 dark:text-gray-400\">{{user.phone}}</div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <span class=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full\" [class]=\"getRoleBadgeClass(user.role)\">\n                      {{getRoleDisplayName(user.role)}}\n                    </span>\n                    <div class=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">{{user.society}}</div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <span class=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full\"\n                          [class]=\"user.active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\">\n                      {{user.active ? 'Active' : 'Inactive'}}\n                    </span>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                    {{user.lastLogin ? (user.lastLogin | date:'shortDate') : 'Never'}}\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <div class=\"flex items-center justify-end space-x-2\">\n                      <button\n                        (click)=\"openUserDialog(user)\"\n                        [disabled]=\"!canEditUser(user)\"\n                        class=\"text-yellow-600 hover:text-yellow-900 dark:text-yellow-400 dark:hover:text-yellow-300 disabled:opacity-50\"\n                        matTooltip=\"Edit User\"\n                      >\n                        <mat-icon class=\"w-5 h-5\">edit</mat-icon>\n                      </button>\n                      <button\n                        (click)=\"deleteUser(user)\"\n                        [disabled]=\"!canDeleteUser(user)\"\n                        class=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50\"\n                        matTooltip=\"Delete User\"\n                      >\n                        <mat-icon class=\"w-5 h-5\">delete</mat-icon>\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            \n            <!-- Empty State -->\n            <div *ngIf=\"filteredUsers.length === 0\" class=\"text-center py-12\">\n              <mat-icon class=\"text-6xl text-gray-400 dark:text-gray-500 mb-4\">manage_accounts</mat-icon>\n              <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No users found</h3>\n              <p class=\"text-gray-500 dark:text-gray-400 mb-6\">No users match your current filters.</p>\n              <button\n                (click)=\"clearFilters()\"\n                class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-blue-600 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                Clear filters\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Off-canvas User Form -->\n    <div *ngIf=\"showUserForm\" class=\"fixed inset-0 z-50 overflow-hidden\" (click)=\"closeUserForm()\">\n      <div class=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n      <div class=\"fixed right-0 top-0 h-full w-full max-w-md sm:max-w-lg bg-white dark:bg-gray-800 shadow-xl\" (click)=\"$event.stopPropagation()\">\n        <div class=\"flex flex-col h-full\">\n          <!-- Header -->\n          <div class=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n            <div class=\"flex items-center justify-between\">\n              <h2 class=\"text-lg font-medium text-gray-900 dark:text-white\">\n                {{editingUser ? 'Edit User' : 'Add New User'}}\n              </h2>\n              <button\n                (click)=\"closeUserForm()\"\n                class=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n              >\n                <mat-icon>close</mat-icon>\n              </button>\n            </div>\n          </div>\n\n          <!-- Form Content - Scrollable -->\n          <div class=\"flex-1 overflow-y-auto px-6 py-4\">\n            <form [formGroup]=\"userForm\" (ngSubmit)=\"saveUser()\">\n              <div class=\"space-y-6\">\n                <!-- Username -->\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Username *\n                  </label>\n                  <input\n                    type=\"text\"\n                    formControlName=\"username\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    [class.border-red-500]=\"userForm.get('username')?.invalid && userForm.get('username')?.touched\"\n                  />\n                  <div *ngIf=\"userForm.get('username')?.invalid && userForm.get('username')?.touched\" class=\"mt-1 text-sm text-red-600\">\n                    Username is required\n                  </div>\n                </div>\n\n                <!-- Name Row -->\n                <div class=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      First Name *\n                    </label>\n                    <input\n                      type=\"text\"\n                      formControlName=\"firstName\"\n                      class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      [class.border-red-500]=\"userForm.get('firstName')?.invalid && userForm.get('firstName')?.touched\"\n                    />\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Last Name *\n                    </label>\n                    <input\n                      type=\"text\"\n                      formControlName=\"lastName\"\n                      class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      [class.border-red-500]=\"userForm.get('lastName')?.invalid && userForm.get('lastName')?.touched\"\n                    />\n                  </div>\n                </div>\n\n                <!-- Email -->\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Email *\n                  </label>\n                  <input\n                    type=\"email\"\n                    formControlName=\"email\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    [class.border-red-500]=\"userForm.get('email')?.invalid && userForm.get('email')?.touched\"\n                  />\n                </div>\n\n                <!-- Phone -->\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Phone *\n                  </label>\n                  <input\n                    type=\"tel\"\n                    formControlName=\"phone\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    [class.border-red-500]=\"userForm.get('phone')?.invalid && userForm.get('phone')?.touched\"\n                  />\n                </div>\n\n                <!-- Password (only for new users) -->\n                <div *ngIf=\"!editingUser\">\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    Password *\n                  </label>\n                  <input\n                    type=\"password\"\n                    formControlName=\"password\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    [class.border-red-500]=\"userForm.get('password')?.invalid && userForm.get('password')?.touched\"\n                  />\n                  <div *ngIf=\"userForm.get('password')?.invalid && userForm.get('password')?.touched\" class=\"mt-1 text-sm text-red-600\">\n                    Password is required (minimum 6 characters)\n                  </div>\n                </div>\n\n                <!-- Role and Society -->\n                <div class=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Role *\n                    </label>\n                    <select\n                      formControlName=\"role\"\n                      class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      [class.border-red-500]=\"userForm.get('role')?.invalid && userForm.get('role')?.touched\"\n                    >\n                      <option value=\"\">Select Role</option>\n                      <option [value]=\"UserRole.SUPER_ADMIN\">Super Admin</option>\n                      <option [value]=\"UserRole.SOCIETY_ADMIN\">Society Admin</option>\n                      <option [value]=\"UserRole.BRANCH_ADMIN\">Branch Admin</option>\n                      <option [value]=\"UserRole.ACCOUNTANT\">Accountant</option>\n                      <option [value]=\"UserRole.OPERATOR\">Operator</option>\n                      <option [value]=\"UserRole.MEMBER\">Member</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Society *\n                    </label>\n                    <select\n                      formControlName=\"society\"\n                      class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      [class.border-red-500]=\"userForm.get('society')?.invalid && userForm.get('society')?.touched\"\n                    >\n                      <option value=\"\">Select Society</option>\n                      <option value=\"Main Branch\">Main Branch</option>\n                      <option value=\"North Branch\">North Branch</option>\n                      <option value=\"South Branch\">South Branch</option>\n                    </select>\n                  </div>\n                </div>\n\n                <!-- Active Status -->\n                <div class=\"flex items-center justify-between\">\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Active Status\n                    </label>\n                    <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                      Enable or disable user access\n                    </p>\n                  </div>\n                  <mat-slide-toggle formControlName=\"active\" color=\"primary\">\n                  </mat-slide-toggle>\n                </div>\n              </div>\n            </form>\n          </div>\n\n          <!-- Footer Actions -->\n          <div class=\"px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              (click)=\"closeUserForm()\"\n              class=\"px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"button\"\n              (click)=\"saveUser()\"\n              [disabled]=\"userForm.invalid\"\n              class=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {{editingUser ? 'Update User' : 'Create User'}}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: block;\n    }\n  `]\n})\nexport class UserManagementComponent implements OnInit {\n  userForm: FormGroup;\n  users: User[] = [];\n  filteredUsers: User[] = [];\n  editingUser: User | null = null;\n  showUserForm = false;\n  \n  // Filter properties\n  searchTerm = '';\n  selectedRole = '';\n  selectedStatus = '';\n  \n  currentUser: any = null;\n  UserRole = UserRole;\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.userForm = this.createForm();\n  }\n\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n    this.loadSampleData();\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      username: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required, Validators.pattern(/^\\d{10}$/)]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      role: ['', Validators.required],\n      society: ['', Validators.required],\n      active: [true]\n    });\n  }\n\n  loadSampleData() {\n    this.users = [\n      {\n        id: 1,\n        username: 'superadmin',\n        firstName: 'Super',\n        lastName: 'Admin',\n        email: 'super@admin.com',\n        phone: '9876543210',\n        role: UserRole.SUPER_ADMIN,\n        society: 'Head Office',\n        active: true,\n        createdDate: new Date('2024-01-01'),\n        lastLogin: new Date('2024-01-15')\n      },\n      {\n        id: 2,\n        username: 'societyadmin',\n        firstName: 'Society',\n        lastName: 'Admin',\n        email: 'society@admin.com',\n        phone: '9876543211',\n        role: UserRole.SOCIETY_ADMIN,\n        society: 'Main Branch',\n        active: true,\n        createdDate: new Date('2024-01-05'),\n        lastLogin: new Date('2024-01-14')\n      },\n      {\n        id: 3,\n        username: 'accountant1',\n        firstName: 'John',\n        lastName: 'Accountant',\n        email: 'john.accountant@company.com',\n        phone: '9876543212',\n        role: UserRole.ACCOUNTANT,\n        society: 'Main Branch',\n        active: true,\n        createdDate: new Date('2024-01-10'),\n        lastLogin: new Date('2024-01-13')\n      },\n      {\n        id: 4,\n        username: 'member1',\n        firstName: 'Jane',\n        lastName: 'Member',\n        email: 'jane.member@company.com',\n        phone: '9876543213',\n        role: UserRole.MEMBER,\n        society: 'North Branch',\n        active: false,\n        createdDate: new Date('2024-01-12')\n      }\n    ];\n    this.filteredUsers = [...this.users];\n  }\n\n  applyFilters() {\n    this.filteredUsers = this.users.filter(user => {\n      const searchMatch = !this.searchTerm || \n        user.firstName.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n        user.lastName.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n        user.username.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n        user.email.toLowerCase().includes(this.searchTerm.toLowerCase());\n      \n      const roleMatch = !this.selectedRole || user.role === this.selectedRole;\n      const statusMatch = !this.selectedStatus || \n        (this.selectedStatus === 'active' && user.active) ||\n        (this.selectedStatus === 'inactive' && !user.active);\n      \n      return searchMatch && roleMatch && statusMatch;\n    });\n  }\n\n  clearFilters() {\n    this.searchTerm = '';\n    this.selectedRole = '';\n    this.selectedStatus = '';\n    this.filteredUsers = [...this.users];\n  }\n\n  getInitials(firstName: string, lastName: string): string {\n    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();\n  }\n\n  getRoleDisplayName(role: UserRole): string {\n    const roleNames: { [key in UserRole]: string } = {\n      [UserRole.SUPER_ADMIN]: 'Super Admin',\n      [UserRole.SOCIETY_ADMIN]: 'Society Admin',\n      [UserRole.BRANCH_ADMIN]: 'Branch Admin',\n      [UserRole.ACCOUNTANT]: 'Accountant',\n      [UserRole.OPERATOR]: 'Operator',\n      [UserRole.MEMBER]: 'Member'\n    };\n    return roleNames[role] || role;\n  }\n\n  getRoleBadgeClass(role: UserRole): string {\n    const classes: { [key in UserRole]: string } = {\n      [UserRole.SUPER_ADMIN]: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',\n      [UserRole.SOCIETY_ADMIN]: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n      [UserRole.BRANCH_ADMIN]: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\n      [UserRole.ACCOUNTANT]: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      [UserRole.OPERATOR]: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      [UserRole.MEMBER]: 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n    };\n    return classes[role] || 'bg-gray-100 text-gray-800';\n  }\n\n  openUserDialog(user?: User) {\n    if (user) {\n      this.editingUser = user;\n      this.userForm.patchValue(user);\n      // Remove password validation for edit mode\n      this.userForm.get('password')?.clearValidators();\n      this.userForm.get('password')?.updateValueAndValidity();\n    } else {\n      this.editingUser = null;\n      this.userForm.reset();\n      this.userForm.patchValue({ active: true });\n      // Add password validation for new user\n      this.userForm.get('password')?.setValidators([Validators.required, Validators.minLength(6)]);\n      this.userForm.get('password')?.updateValueAndValidity();\n    }\n    this.showUserForm = true;\n  }\n\n  closeUserForm() {\n    this.showUserForm = false;\n    this.editingUser = null;\n    this.userForm.reset();\n  }\n\n  saveUser() {\n    if (this.userForm.valid) {\n      const formValue = this.userForm.value;\n      \n      if (this.editingUser) {\n        // Update existing user\n        const index = this.users.findIndex(u => u.id === this.editingUser!.id);\n        this.users[index] = { \n          ...this.editingUser, \n          ...formValue\n        };\n        this.snackBar.open('User updated successfully', 'Close', { duration: 3000 });\n      } else {\n        // Add new user\n        const newUser: User = {\n          id: Date.now(),\n          ...formValue,\n          createdDate: new Date()\n        };\n        this.users.push(newUser);\n        this.snackBar.open('User created successfully', 'Close', { duration: 3000 });\n      }\n      \n      this.applyFilters();\n      this.closeUserForm();\n    } else {\n      this.snackBar.open('Please fill all required fields correctly', 'Close', { duration: 3000 });\n    }\n  }\n\n  canEditUser(user: User): boolean {\n    // Super Admin can edit all users\n    if (this.currentUser?.role === UserRole.SUPER_ADMIN) {\n      return true;\n    }\n    // Users can't edit other users with higher or same privileges\n    return false;\n  }\n\n  canDeleteUser(user: User): boolean {\n    // Only Super Admin can delete users, and not themselves\n    return this.currentUser?.role === UserRole.SUPER_ADMIN && user.id !== this.currentUser?.id;\n  }\n\n  deleteUser(user: User) {\n    if (confirm(`Are you sure you want to delete user \"${user.username}\"?`)) {\n      this.users = this.users.filter(u => u.id !== user.id);\n      this.applyFilters();\n      this.snackBar.open('User deleted successfully', 'Close', { duration: 3000 });\n    }\n  }\n}\n","size_bytes":28981},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/balance-sheet/balance-sheet.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-balance-sheet',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Balance Sheet</h1><mat-card><mat-card-content><p>Balance sheet report generation.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class BalanceSheetComponent {}\n","size_bytes":541},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/cash-book/cash-book.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTabsModule } from '@angular/material/tabs';\n\ninterface CashBookEntry {\n  id: number;\n  date: Date;\n  particulars: string;\n  voucherNo: string;\n  type: 'Receipt' | 'Payment';\n  amount: number;\n  balance: number;\n  description: string;\n}\n\n@Component({\n  selector: 'app-cash-book',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatTableModule,\n    MatIconModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSnackBarModule,\n    MatTabsModule\n  ],\n  template: `\n    <div class=\"page-container\">\n      <h1>Cash Book Management</h1>\n      \n      <mat-tab-group>\n        <!-- Cash Entry Tab -->\n        <mat-tab label=\"Cash Entry\">\n          <mat-card class=\"form-card\">\n            <mat-card-header>\n              <mat-card-title>{{editingEntry ? 'Edit Cash Entry' : 'New Cash Entry'}}</mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n              <form [formGroup]=\"cashForm\" (ngSubmit)=\"saveEntry()\">\n                <div class=\"form-grid\">\n                  <mat-form-field>\n                    <mat-label>Date</mat-label>\n                    <input matInput [matDatepicker]=\"picker\" formControlName=\"date\" required>\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    <mat-datepicker #picker></mat-datepicker>\n                  </mat-form-field>\n                  \n                  <mat-form-field>\n                    <mat-label>Voucher No</mat-label>\n                    <input matInput formControlName=\"voucherNo\" required>\n                  </mat-form-field>\n                  \n                  <mat-form-field>\n                    <mat-label>Type</mat-label>\n                    <mat-select formControlName=\"type\" required>\n                      <mat-option value=\"Receipt\">Cash Receipt</mat-option>\n                      <mat-option value=\"Payment\">Cash Payment</mat-option>\n                    </mat-select>\n                  </mat-form-field>\n                  \n                  <mat-form-field>\n                    <mat-label>Amount</mat-label>\n                    <input matInput type=\"number\" formControlName=\"amount\" required min=\"0.01\" step=\"0.01\">\n                  </mat-form-field>\n                  \n                  <mat-form-field class=\"full-width\">\n                    <mat-label>Particulars</mat-label>\n                    <input matInput formControlName=\"particulars\" required>\n                  </mat-form-field>\n                  \n                  <mat-form-field class=\"full-width\">\n                    <mat-label>Description</mat-label>\n                    <textarea matInput formControlName=\"description\" rows=\"3\"></textarea>\n                  </mat-form-field>\n                </div>\n                \n                <div class=\"form-actions\">\n                  <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!cashForm.valid\">\n                    {{editingEntry ? 'Update Entry' : 'Add Entry'}}\n                  </button>\n                  <button mat-button type=\"button\" (click)=\"resetForm()\" *ngIf=\"editingEntry\">\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </mat-card-content>\n          </mat-card>\n        </mat-tab>\n        \n        <!-- Cash Book View Tab -->\n        <mat-tab label=\"Cash Book\">\n          <mat-card class=\"table-card\">\n            <mat-card-header>\n              <mat-card-title>Cash Book Entries</mat-card-title>\n              <div class=\"card-actions\">\n                <mat-form-field class=\"date-filter\">\n                  <mat-label>From Date</mat-label>\n                  <input matInput [matDatepicker]=\"fromPicker\" [(ngModel)]=\"fromDate\" (dateChange)=\"filterEntries()\">\n                  <mat-datepicker-toggle matSuffix [for]=\"fromPicker\"></mat-datepicker-toggle>\n                  <mat-datepicker #fromPicker></mat-datepicker>\n                </mat-form-field>\n                <mat-form-field class=\"date-filter\">\n                  <mat-label>To Date</mat-label>\n                  <input matInput [matDatepicker]=\"toPicker\" [(ngModel)]=\"toDate\" (dateChange)=\"filterEntries()\">\n                  <mat-datepicker-toggle matSuffix [for]=\"toPicker\"></mat-datepicker-toggle>\n                  <mat-datepicker #toPicker></mat-datepicker>\n                </mat-form-field>\n              </div>\n            </mat-card-header>\n            <mat-card-content>\n              <div class=\"summary-cards\">\n                <div class=\"summary-card receipt\">\n                  <h3>Total Receipts</h3>\n                  <p>‚Çπ{{totalReceipts | number:'1.2-2'}}</p>\n                </div>\n                <div class=\"summary-card payment\">\n                  <h3>Total Payments</h3>\n                  <p>‚Çπ{{totalPayments | number:'1.2-2'}}</p>\n                </div>\n                <div class=\"summary-card balance\">\n                  <h3>Closing Balance</h3>\n                  <p>‚Çπ{{closingBalance | number:'1.2-2'}}</p>\n                </div>\n              </div>\n              \n              <div class=\"table-container\">\n                <table mat-table [dataSource]=\"filteredEntries\" class=\"cash-book-table\">\n                  <ng-container matColumnDef=\"date\">\n                    <th mat-header-cell *matHeaderCellDef>Date</th>\n                    <td mat-cell *matCellDef=\"let entry\">{{entry.date | date:'dd/MM/yyyy'}}</td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"voucherNo\">\n                    <th mat-header-cell *matHeaderCellDef>Voucher No</th>\n                    <td mat-cell *matCellDef=\"let entry\">{{entry.voucherNo}}</td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"particulars\">\n                    <th mat-header-cell *matHeaderCellDef>Particulars</th>\n                    <td mat-cell *matCellDef=\"let entry\">{{entry.particulars}}</td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"receipt\">\n                    <th mat-header-cell *matHeaderCellDef>Receipt</th>\n                    <td mat-cell *matCellDef=\"let entry\" class=\"amount-cell receipt\">\n                      {{entry.type === 'Receipt' ? (entry.amount | number:'1.2-2') : ''}}\n                    </td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"payment\">\n                    <th mat-header-cell *matHeaderCellDef>Payment</th>\n                    <td mat-cell *matCellDef=\"let entry\" class=\"amount-cell payment\">\n                      {{entry.type === 'Payment' ? (entry.amount | number:'1.2-2') : ''}}\n                    </td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"balance\">\n                    <th mat-header-cell *matHeaderCellDef>Balance</th>\n                    <td mat-cell *matCellDef=\"let entry\" class=\"amount-cell balance\">\n                      {{entry.balance | number:'1.2-2'}}\n                    </td>\n                  </ng-container>\n                  \n                  <ng-container matColumnDef=\"actions\">\n                    <th mat-header-cell *matHeaderCellDef>Actions</th>\n                    <td mat-cell *matCellDef=\"let entry\">\n                      <button mat-icon-button (click)=\"editEntry(entry)\" color=\"primary\">\n                        <mat-icon>edit</mat-icon>\n                      </button>\n                      <button mat-icon-button (click)=\"deleteEntry(entry.id)\" color=\"warn\">\n                        <mat-icon>delete</mat-icon>\n                      </button>\n                    </td>\n                  </ng-container>\n                  \n                  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" \n                      [class.receipt-row]=\"row.type === 'Receipt'\"\n                      [class.payment-row]=\"row.type === 'Payment'\"></tr>\n                </table>\n              </div>\n            </mat-card-content>\n          </mat-card>\n        </mat-tab>\n        \n        <!-- Reports Tab -->\n        <mat-tab label=\"Reports\">\n          <mat-card class=\"report-card\">\n            <mat-card-header>\n              <mat-card-title>Cash Book Reports</mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n              <div class=\"report-buttons\">\n                <button mat-raised-button color=\"primary\" (click)=\"printCashBook()\">\n                  <mat-icon>print</mat-icon>\n                  Print Cash Book\n                </button>\n                <button mat-raised-button color=\"accent\" (click)=\"exportToExcel()\">\n                  <mat-icon>download</mat-icon>\n                  Export to Excel\n                </button>\n                <button mat-raised-button (click)=\"generateSummary()\">\n                  <mat-icon>assessment</mat-icon>\n                  Generate Summary\n                </button>\n              </div>\n              \n              <div class=\"monthly-summary\" *ngIf=\"monthlySummary\">\n                <h3>Monthly Summary</h3>\n                <div class=\"summary-grid\">\n                  <div class=\"summary-item\">\n                    <label>Opening Balance:</label>\n                    <span>‚Çπ{{monthlySummary.openingBalance | number:'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Total Receipts:</label>\n                    <span>‚Çπ{{monthlySummary.totalReceipts | number:'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Total Payments:</label>\n                    <span>‚Çπ{{monthlySummary.totalPayments | number:'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Closing Balance:</label>\n                    <span>‚Çπ{{monthlySummary.closingBalance | number:'1.2-2'}}</span>\n                  </div>\n                </div>\n              </div>\n            </mat-card-content>\n          </mat-card>\n        </mat-tab>\n      </mat-tab-group>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .form-card, .table-card, .report-card {\n      margin: 20px 0;\n    }\n    \n    .form-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 16px;\n      margin-bottom: 20px;\n    }\n    \n    .full-width {\n      grid-column: 1 / -1;\n    }\n    \n    .form-actions {\n      display: flex;\n      gap: 10px;\n      justify-content: flex-end;\n    }\n    \n    .card-actions {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    }\n    \n    .date-filter {\n      width: 150px;\n    }\n    \n    .summary-cards {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 16px;\n      margin-bottom: 20px;\n    }\n    \n    .summary-card {\n      padding: 16px;\n      border-radius: 8px;\n      text-align: center;\n      color: white;\n    }\n    \n    .summary-card.receipt {\n      background-color: #4caf50;\n    }\n    \n    .summary-card.payment {\n      background-color: #f44336;\n    }\n    \n    .summary-card.balance {\n      background-color: #2196f3;\n    }\n    \n    .summary-card h3 {\n      margin: 0 0 8px 0;\n      font-size: 14px;\n      font-weight: 500;\n    }\n    \n    .summary-card p {\n      margin: 0;\n      font-size: 20px;\n      font-weight: bold;\n    }\n    \n    .table-container {\n      overflow-x: auto;\n    }\n    \n    .cash-book-table {\n      width: 100%;\n    }\n    \n    .amount-cell {\n      text-align: right;\n      font-weight: 500;\n    }\n    \n    .amount-cell.receipt {\n      color: #4caf50;\n    }\n    \n    .amount-cell.payment {\n      color: #f44336;\n    }\n    \n    .amount-cell.balance {\n      color: #2196f3;\n      font-weight: bold;\n    }\n    \n    .receipt-row {\n      background-color: #e8f5e8;\n    }\n    \n    .payment-row {\n      background-color: #fdeaea;\n    }\n    \n    .report-buttons {\n      display: flex;\n      gap: 10px;\n      margin-bottom: 20px;\n      flex-wrap: wrap;\n    }\n    \n    .monthly-summary {\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 16px;\n    }\n    \n    .summary-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 16px;\n    }\n    \n    .summary-item {\n      display: flex;\n      justify-content: space-between;\n      padding: 8px;\n      border-bottom: 1px solid #eee;\n    }\n    \n    .summary-item label {\n      font-weight: 500;\n    }\n    \n    .summary-item span {\n      font-weight: bold;\n      color: #2196f3;\n    }\n  `]\n})\nexport class CashBookComponent implements OnInit {\n  cashForm: FormGroup;\n  entries: CashBookEntry[] = [];\n  filteredEntries: CashBookEntry[] = [];\n  displayedColumns = ['date', 'voucherNo', 'particulars', 'receipt', 'payment', 'balance', 'actions'];\n  editingEntry: CashBookEntry | null = null;\n  \n  fromDate: Date | null = null;\n  toDate: Date | null = null;\n  \n  totalReceipts = 0;\n  totalPayments = 0;\n  closingBalance = 0;\n  \n  monthlySummary: any = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {\n    this.cashForm = this.createForm();\n  }\n\n  ngOnInit() {\n    this.loadSampleData();\n    this.calculateSummary();\n    this.setDefaultDateRange();\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      date: [new Date(), Validators.required],\n      voucherNo: ['', Validators.required],\n      type: ['Receipt', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0.01)]],\n      particulars: ['', Validators.required],\n      description: ['']\n    });\n  }\n\n  setDefaultDateRange() {\n    const today = new Date();\n    this.fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n    this.toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    this.filterEntries();\n  }\n\n  loadSampleData() {\n    let balance = 10000; // Opening balance\n    \n    this.entries = [\n      {\n        id: 1,\n        date: new Date('2024-01-01'),\n        particulars: 'Opening Balance',\n        voucherNo: 'OB001',\n        type: 'Receipt',\n        amount: 10000,\n        balance: balance,\n        description: 'Opening balance for the year'\n      },\n      {\n        id: 2,\n        date: new Date('2024-01-02'),\n        particulars: 'Member Deposit - John Doe',\n        voucherNo: 'CR001',\n        type: 'Receipt',\n        amount: 50000,\n        balance: balance + 50000,\n        description: 'Fixed deposit by member'\n      },\n      {\n        id: 3,\n        date: new Date('2024-01-03'),\n        particulars: 'Office Rent',\n        voucherNo: 'CP001',\n        type: 'Payment',\n        amount: 15000,\n        balance: balance + 50000 - 15000,\n        description: 'Monthly office rent payment'\n      }\n    ];\n    \n    this.filteredEntries = [...this.entries];\n  }\n\n  saveEntry() {\n    if (this.cashForm.valid) {\n      const formValue = this.cashForm.value;\n      \n      if (this.editingEntry) {\n        const index = this.entries.findIndex(e => e.id === this.editingEntry!.id);\n        this.entries[index] = { ...this.editingEntry, ...formValue };\n        this.snackBar.open('Entry updated successfully', 'Close', { duration: 3000 });\n      } else {\n        const newEntry: CashBookEntry = {\n          id: Date.now(),\n          ...formValue,\n          balance: this.calculateRunningBalance(formValue)\n        };\n        this.entries.push(newEntry);\n        this.snackBar.open('Entry added successfully', 'Close', { duration: 3000 });\n      }\n      \n      this.sortAndRecalculateBalances();\n      this.filterEntries();\n      this.calculateSummary();\n      this.resetForm();\n    }\n  }\n\n  calculateRunningBalance(entry: any): number {\n    const lastBalance = this.entries.length > 0 ? \n      Math.max(...this.entries.map(e => e.balance)) : 0;\n    \n    return entry.type === 'Receipt' ? \n      lastBalance + entry.amount : \n      lastBalance - entry.amount;\n  }\n\n  sortAndRecalculateBalances() {\n    this.entries.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n    \n    let runningBalance = 0;\n    this.entries.forEach(entry => {\n      if (entry.particulars === 'Opening Balance') {\n        runningBalance = entry.amount;\n      } else {\n        runningBalance += entry.type === 'Receipt' ? entry.amount : -entry.amount;\n      }\n      entry.balance = runningBalance;\n    });\n  }\n\n  editEntry(entry: CashBookEntry) {\n    this.editingEntry = entry;\n    this.cashForm.patchValue(entry);\n  }\n\n  deleteEntry(id: number) {\n    if (confirm('Are you sure you want to delete this entry?')) {\n      this.entries = this.entries.filter(e => e.id !== id);\n      this.sortAndRecalculateBalances();\n      this.filterEntries();\n      this.calculateSummary();\n      this.snackBar.open('Entry deleted successfully', 'Close', { duration: 3000 });\n    }\n  }\n\n  resetForm() {\n    this.editingEntry = null;\n    this.cashForm.reset();\n    this.cashForm.patchValue({\n      date: new Date(),\n      type: 'Receipt'\n    });\n  }\n\n  filterEntries() {\n    if (this.fromDate && this.toDate) {\n      this.filteredEntries = this.entries.filter(entry => {\n        const entryDate = new Date(entry.date);\n        return entryDate >= this.fromDate! && entryDate <= this.toDate!;\n      });\n    } else {\n      this.filteredEntries = [...this.entries];\n    }\n    this.calculateSummary();\n  }\n\n  calculateSummary() {\n    this.totalReceipts = this.filteredEntries\n      .filter(e => e.type === 'Receipt')\n      .reduce((sum, e) => sum + e.amount, 0);\n    \n    this.totalPayments = this.filteredEntries\n      .filter(e => e.type === 'Payment')\n      .reduce((sum, e) => sum + e.amount, 0);\n    \n    this.closingBalance = this.filteredEntries.length > 0 ? \n      this.filteredEntries[this.filteredEntries.length - 1].balance : 0;\n  }\n\n  printCashBook() {\n    this.snackBar.open('Print functionality will be implemented', 'Close', { duration: 2000 });\n  }\n\n  exportToExcel() {\n    this.snackBar.open('Export functionality will be implemented', 'Close', { duration: 2000 });\n  }\n\n  generateSummary() {\n    const openingBalance = this.entries.find(e => e.particulars === 'Opening Balance')?.amount || 0;\n    \n    this.monthlySummary = {\n      openingBalance: openingBalance,\n      totalReceipts: this.totalReceipts,\n      totalPayments: this.totalPayments,\n      closingBalance: this.closingBalance\n    };\n    \n    this.snackBar.open('Summary generated successfully', 'Close', { duration: 2000 });\n  }\n}\n","size_bytes":19556},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/day-book/day-book.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-day-book',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Day Book</h1><mat-card><mat-card-content><p>Daily transaction recording.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DayBookComponent {}\n","size_bytes":522},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/group/group.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-group',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Account Groups</h1><mat-card><mat-card-content><p>Account group management.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class GroupComponent {}\n","size_bytes":520},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/ledger/ledger.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\n\ninterface LedgerEntry {\n  id: number;\n  date: string;\n  voucherNo: string;\n  description: string;\n  debitAmount: number;\n  creditAmount: number;\n  balance: number;\n}\n\ninterface LedgerAccount {\n  accountName: string;\n  accountCode: string;\n  accountType: string;\n  openingBalance: number;\n}\n\n@Component({\n  selector: 'app-ledger',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatSelectModule,\n    MatSnackBarModule\n  ],\n  template: `\n    <div class=\"page-container\">\n      <h1>Ledger Management</h1>\n      \n      <!-- Account Selection -->\n      <mat-card class=\"selection-card\">\n        <mat-card-header>\n          <mat-card-title>Select Account</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"selection-row\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Select Account</mat-label>\n              <mat-select [(value)]=\"selectedAccount\" (selectionChange)=\"onAccountChange()\">\n                <mat-option *ngFor=\"let account of accounts\" [value]=\"account\">\n                  {{account.accountCode}} - {{account.accountName}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n            \n            <mat-form-field appearance=\"outline\">\n              <mat-label>From Date</mat-label>\n              <input matInput [(ngModel)]=\"fromDate\" type=\"date\">\n            </mat-form-field>\n            \n            <mat-form-field appearance=\"outline\">\n              <mat-label>To Date</mat-label>\n              <input matInput [(ngModel)]=\"toDate\" type=\"date\">\n            </mat-form-field>\n            \n            <button mat-raised-button color=\"primary\" (click)=\"filterEntries()\">\n              <mat-icon>search</mat-icon>\n              Filter\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Account Info -->\n      <mat-card class=\"info-card\" *ngIf=\"selectedAccount\">\n        <mat-card-content>\n          <div class=\"account-info\">\n            <div class=\"info-item\">\n              <strong>Account:</strong> {{selectedAccount.accountCode}} - {{selectedAccount.accountName}}\n            </div>\n            <div class=\"info-item\">\n              <strong>Type:</strong> {{selectedAccount.accountType}}\n            </div>\n            <div class=\"info-item\">\n              <strong>Opening Balance:</strong> ‚Çπ{{selectedAccount.openingBalance | number}}\n            </div>\n            <div class=\"info-item\">\n              <strong>Current Balance:</strong> ‚Çπ{{currentBalance | number}}\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Ledger Entries Table -->\n      <mat-card class=\"table-card\" *ngIf=\"selectedAccount\">\n        <mat-card-header>\n          <mat-card-title>Ledger Entries - {{selectedAccount.accountName}}</mat-card-title>\n          <div class=\"header-actions\">\n            <button mat-raised-button color=\"accent\" (click)=\"exportToExcel()\">\n              <mat-icon>download</mat-icon>\n              Export Excel\n            </button>\n            <button mat-raised-button color=\"primary\" (click)=\"printLedger()\">\n              <mat-icon>print</mat-icon>\n              Print\n            </button>\n          </div>\n        </mat-card-header>\n        <mat-card-content>\n          <table mat-table [dataSource]=\"filteredEntries\" class=\"mat-elevation-z2\">\n            <ng-container matColumnDef=\"date\">\n              <th mat-header-cell *matHeaderCellDef>Date</th>\n              <td mat-cell *matCellDef=\"let entry\">{{entry.date | date}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"voucherNo\">\n              <th mat-header-cell *matHeaderCellDef>Voucher No.</th>\n              <td mat-cell *matCellDef=\"let entry\">{{entry.voucherNo}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"description\">\n              <th mat-header-cell *matHeaderCellDef>Description</th>\n              <td mat-cell *matCellDef=\"let entry\">{{entry.description}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"debitAmount\">\n              <th mat-header-cell *matHeaderCellDef>Debit (‚Çπ)</th>\n              <td mat-cell *matCellDef=\"let entry\">\n                {{entry.debitAmount > 0 ? (entry.debitAmount | number) : '-'}}\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"creditAmount\">\n              <th mat-header-cell *matHeaderCellDef>Credit (‚Çπ)</th>\n              <td mat-cell *matCellDef=\"let entry\">\n                {{entry.creditAmount > 0 ? (entry.creditAmount | number) : '-'}}\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"balance\">\n              <th mat-header-cell *matHeaderCellDef>Balance (‚Çπ)</th>\n              <td mat-cell *matCellDef=\"let entry\" [class.negative-balance]=\"entry.balance < 0\">\n                {{entry.balance | number}}\n              </td>\n            </ng-container>\n            \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>\n          \n          <!-- Summary -->\n          <div class=\"ledger-summary\" *ngIf=\"filteredEntries.length > 0\">\n            <div class=\"summary-item\">\n              <strong>Total Debit:</strong> ‚Çπ{{totalDebit | number}}\n            </div>\n            <div class=\"summary-item\">\n              <strong>Total Credit:</strong> ‚Çπ{{totalCredit | number}}\n            </div>\n            <div class=\"summary-item\">\n              <strong>Closing Balance:</strong> ‚Çπ{{currentBalance | number}}\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .selection-card, .info-card, .table-card {\n      margin-bottom: 20px;\n    }\n    \n    .selection-row {\n      display: flex;\n      gap: 16px;\n      align-items: flex-end;\n    }\n    \n    .selection-row mat-form-field {\n      flex: 1;\n    }\n    \n    .account-info {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 16px;\n    }\n    \n    .info-item {\n      padding: 8px;\n      background: #f5f5f5;\n      border-radius: 4px;\n    }\n    \n    .header-actions {\n      display: flex;\n      gap: 12px;\n    }\n    \n    table {\n      width: 100%;\n    }\n    \n    .negative-balance {\n      color: red;\n    }\n    \n    .ledger-summary {\n      display: flex;\n      justify-content: space-around;\n      margin-top: 20px;\n      padding: 16px;\n      background: #f5f5f5;\n      border-radius: 8px;\n    }\n    \n    .summary-item {\n      text-align: center;\n    }\n  `]\n})\nexport class LedgerComponent implements OnInit {\n  selectedAccount: LedgerAccount | null = null;\n  fromDate = '';\n  toDate = '';\n  \n  accounts: LedgerAccount[] = [];\n  ledgerEntries: { [key: string]: LedgerEntry[] } = {};\n  filteredEntries: LedgerEntry[] = [];\n  \n  currentBalance = 0;\n  totalDebit = 0;\n  totalCredit = 0;\n  \n  displayedColumns: string[] = ['date', 'voucherNo', 'description', 'debitAmount', 'creditAmount', 'balance'];\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit() {\n    this.loadSampleData();\n    this.setDefaultDates();\n  }\n\n  setDefaultDates() {\n    const today = new Date();\n    const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n    \n    this.fromDate = firstDay.toISOString().split('T')[0];\n    this.toDate = today.toISOString().split('T')[0];\n  }\n\n  loadSampleData() {\n    this.accounts = [\n      {\n        accountName: 'Cash Account',\n        accountCode: 'AC001',\n        accountType: 'Asset',\n        openingBalance: 50000\n      },\n      {\n        accountName: 'Bank Account',\n        accountCode: 'AC002',\n        accountType: 'Asset',\n        openingBalance: 150000\n      },\n      {\n        accountName: 'Member Deposits',\n        accountCode: 'AC003',\n        accountType: 'Liability',\n        openingBalance: 100000\n      },\n      {\n        accountName: 'Interest Income',\n        accountCode: 'AC004',\n        accountType: 'Income',\n        openingBalance: 0\n      }\n    ];\n\n    // Sample ledger entries for Cash Account\n    this.ledgerEntries['AC001'] = [\n      {\n        id: 1,\n        date: '2024-01-01',\n        voucherNo: 'OP001',\n        description: 'Opening Balance',\n        debitAmount: 50000,\n        creditAmount: 0,\n        balance: 50000\n      },\n      {\n        id: 2,\n        date: '2024-01-15',\n        voucherNo: 'RV001',\n        description: 'Member deposit received',\n        debitAmount: 25000,\n        creditAmount: 0,\n        balance: 75000\n      },\n      {\n        id: 3,\n        date: '2024-01-16',\n        voucherNo: 'PV001',\n        description: 'Office rent payment',\n        debitAmount: 0,\n        creditAmount: 15000,\n        balance: 60000\n      }\n    ];\n\n    // Sample ledger entries for Bank Account\n    this.ledgerEntries['AC002'] = [\n      {\n        id: 1,\n        date: '2024-01-01',\n        voucherNo: 'OP002',\n        description: 'Opening Balance',\n        debitAmount: 150000,\n        creditAmount: 0,\n        balance: 150000\n      },\n      {\n        id: 2,\n        date: '2024-01-10',\n        voucherNo: 'BV001',\n        description: 'Loan disbursement',\n        debitAmount: 0,\n        creditAmount: 100000,\n        balance: 50000\n      }\n    ];\n  }\n\n  onAccountChange() {\n    if (this.selectedAccount) {\n      this.filterEntries();\n    }\n  }\n\n  filterEntries() {\n    if (!this.selectedAccount) return;\n    \n    const entries = this.ledgerEntries[this.selectedAccount.accountCode] || [];\n    \n    this.filteredEntries = entries.filter(entry => {\n      const entryDate = new Date(entry.date);\n      const from = this.fromDate ? new Date(this.fromDate) : new Date('1900-01-01');\n      const to = this.toDate ? new Date(this.toDate) : new Date('2100-12-31');\n      \n      return entryDate >= from && entryDate <= to;\n    });\n    \n    this.calculateTotals();\n  }\n\n  calculateTotals() {\n    this.totalDebit = this.filteredEntries.reduce((sum, entry) => sum + entry.debitAmount, 0);\n    this.totalCredit = this.filteredEntries.reduce((sum, entry) => sum + entry.creditAmount, 0);\n    \n    if (this.filteredEntries.length > 0) {\n      this.currentBalance = this.filteredEntries[this.filteredEntries.length - 1].balance;\n    } else {\n      this.currentBalance = this.selectedAccount?.openingBalance || 0;\n    }\n  }\n\n  exportToExcel() {\n    this.snackBar.open('Exporting ledger to Excel...', 'Close', { duration: 3000 });\n  }\n\n  printLedger() {\n    this.snackBar.open('Printing ledger report...', 'Close', { duration: 3000 });\n  }\n}\n","size_bytes":11655},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/loan-receipt/loan-receipt.component.css":{"content":"\r\n/* Form Container Styles */\r\n.form-container {\r\n  @apply max-w-7xl mx-auto p-6;\r\n}\r\n\r\n/* Card Styles */\r\n.card {\r\n  @apply bg-white dark:bg-gray-800 rounded-xl shadow-lg border-0 overflow-hidden;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.card-header {\r\n  @apply p-6 text-white;\r\n}\r\n\r\n.card-title {\r\n  @apply flex items-center gap-3 text-xl font-semibold;\r\n}\r\n\r\n.card-content {\r\n  @apply p-6 space-y-6;\r\n}\r\n\r\n.card-actions {\r\n  @apply p-6 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700;\r\n}\r\n\r\n/* Form Section Styles */\r\n.form-section {\r\n  @apply space-y-4;\r\n}\r\n\r\n.form-section-header {\r\n  @apply flex items-center gap-2 text-lg font-medium text-gray-900 dark:text-gray-100 mb-4;\r\n}\r\n\r\n.form-section-header mat-icon {\r\n  @apply text-blue-600 dark:text-blue-400;\r\n}\r\n\r\n.form-section-content {\r\n  @apply space-y-4;\r\n}\r\n\r\n/* Form Grid Layouts */\r\n.form-grid {\r\n  @apply grid gap-4;\r\n}\r\n\r\n.form-grid-1 {\r\n  @apply grid-cols-1;\r\n}\r\n\r\n.form-grid-2 {\r\n  @apply grid-cols-1 md:grid-cols-2;\r\n}\r\n\r\n.form-grid-3 {\r\n  @apply grid-cols-1 md:grid-cols-2 lg:grid-cols-3;\r\n}\r\n\r\n/* Form Field Styles */\r\n.form-field {\r\n  @apply space-y-2;\r\n}\r\n\r\n.form-label {\r\n  @apply block text-sm font-medium text-gray-700 dark:text-gray-300;\r\n}\r\n\r\n.form-label-required::after {\r\n  content: ' *';\r\n  @apply text-red-500;\r\n}\r\n\r\n.form-input,\r\n.form-select,\r\n.form-textarea {\r\n  @apply w-full px-4 py-2.5 border border-gray-300 dark:border-gray-600 rounded-lg\r\n         bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\r\n         focus:ring-2 focus:ring-blue-500 focus:border-transparent\r\n         placeholder-gray-500 dark:placeholder-gray-400\r\n         transition-colors duration-200;\r\n}\r\n\r\n.form-input:focus,\r\n.form-select:focus,\r\n.form-textarea:focus {\r\n  @apply outline-none ring-2 ring-blue-500 border-transparent;\r\n}\r\n\r\n.form-textarea {\r\n  @apply min-h-[80px] resize-y;\r\n}\r\n\r\n.form-error {\r\n  @apply text-sm text-red-600 dark:text-red-400;\r\n}\r\n\r\n/* Input Group Styles */\r\n.input-group {\r\n  @apply flex gap-2;\r\n}\r\n\r\n.input-group .form-input {\r\n  @apply flex-1;\r\n}\r\n\r\n/* Button Styles */\r\n.btn {\r\n  @apply inline-flex items-center gap-2 px-4 py-2 rounded-lg font-medium\r\n         transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;\r\n}\r\n\r\n.btn-primary {\r\n  @apply bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500;\r\n}\r\n\r\n.btn-secondary {\r\n  @apply bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500;\r\n}\r\n\r\n.btn-success {\r\n  @apply bg-green-600 hover:bg-green-700 text-white focus:ring-green-500;\r\n}\r\n\r\n.btn-danger {\r\n  @apply bg-red-600 hover:bg-red-700 text-white focus:ring-red-500;\r\n}\r\n\r\n.btn-warning {\r\n  @apply bg-yellow-600 hover:bg-yellow-700 text-white focus:ring-yellow-500;\r\n}\r\n\r\n.btn-outline {\r\n  @apply bg-transparent hover:bg-gray-50 dark:hover:bg-gray-700 \r\n         text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600\r\n         focus:ring-gray-500;\r\n}\r\n\r\n.btn-sm {\r\n  @apply px-2 py-1 text-sm;\r\n}\r\n\r\n/* Table Styles */\r\n.table-container {\r\n  @apply overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700;\r\n}\r\n\r\n.data-table {\r\n  @apply w-full bg-white dark:bg-gray-800;\r\n}\r\n\r\n.data-table thead {\r\n  @apply bg-gray-50 dark:bg-gray-700;\r\n}\r\n\r\n.data-table th {\r\n  @apply px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider;\r\n}\r\n\r\n.data-table td {\r\n  @apply px-4 py-3 text-sm text-gray-900 dark:text-gray-100 whitespace-nowrap border-t border-gray-200 dark:border-gray-700;\r\n}\r\n\r\n.data-table tbody tr:hover {\r\n  @apply bg-gray-50 dark:bg-gray-700;\r\n}\r\n\r\n/* Content Header Styles */\r\n.content-header {\r\n  @apply space-y-2;\r\n}\r\n\r\n.breadcrumb {\r\n  @apply flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400;\r\n}\r\n\r\n.breadcrumb-separator {\r\n  @apply text-gray-400;\r\n  font-size: 16px;\r\n}\r\n\r\n.breadcrumb-active {\r\n  @apply text-blue-600 dark:text-blue-400 font-medium;\r\n}\r\n\r\n.text-page-title {\r\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100;\r\n}\r\n\r\n.text-body {\r\n  @apply text-base;\r\n}\r\n\r\n/* Animation */\r\n.animate-fade-in {\r\n  animation: fadeIn 0.5s ease-in-out;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .form-container {\r\n    @apply p-4;\r\n  }\r\n  \r\n  .card-header,\r\n  .card-content,\r\n  .card-actions {\r\n    @apply p-4;\r\n  }\r\n  \r\n  .form-grid-2,\r\n  .form-grid-3 {\r\n    @apply grid-cols-1;\r\n  }\r\n  \r\n  .btn {\r\n    @apply text-sm px-3 py-2;\r\n  }\r\n}\r\n\r\n/* Dark Mode Adjustments */\r\n@media (prefers-color-scheme: dark) {\r\n  .form-input:disabled,\r\n  .form-select:disabled {\r\n    @apply bg-gray-800 text-gray-400;\r\n  }\r\n}\r\n","size_bytes":4754},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/loan-receipt/loan-receipt.component.ts":{"content":"\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\n\r\ninterface AddAmountEntry {\r\n  type: string;\r\n  amount: number;\r\n  id: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-loan-receipt',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatIconModule,\r\n    MatTableModule\r\n  ],\r\n  template: `\r\n    <div class=\"animate-fade-in\">\r\n      <!-- Page Header -->\r\n      <div class=\"content-header mb-6\">\r\n        <div class=\"breadcrumb\">\r\n          <span>Accounts</span>\r\n          <mat-icon class=\"breadcrumb-separator\">chevron_right</mat-icon>\r\n          <span class=\"breadcrumb-active\">Loan Receipt</span>\r\n        </div>\r\n        <h1 class=\"text-page-title\">Loan Receipt</h1>\r\n        <p class=\"text-body text-gray-600 dark:text-gray-400\">Process loan receipt transactions</p>\r\n      </div>\r\n\r\n      <!-- Main Form -->\r\n      <form class=\"form-container\" [formGroup]=\"loanReceiptForm\">\r\n        <mat-card class=\"card\">\r\n          <!-- Card Header -->\r\n          <div class=\"card-header bg-gradient-to-r from-green-600 to-blue-600\">\r\n            <div class=\"card-title\">\r\n              <mat-icon>receipt</mat-icon>\r\n              <span>Loan Receipt Entry</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"card-content\">\r\n            <!-- Top Section Fields -->\r\n            <div class=\"form-section\">\r\n              <div class=\"form-section-header\">\r\n                <mat-icon>description</mat-icon>\r\n                <span>Receipt Details</span>\r\n              </div>\r\n              <div class=\"form-section-content\">\r\n                <div class=\"form-grid form-grid-3\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">No.</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Receipt number\"\r\n                      formControlName=\"receiptNo\">\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('receiptNo')?.invalid && loanReceiptForm.get('receiptNo')?.touched\">\r\n                      Receipt number is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">Bank</label>\r\n                    <select class=\"form-select\" formControlName=\"bank\">\r\n                      <option value=\"\">Select bank</option>\r\n                      <option value=\"State Bank of India\">State Bank of India</option>\r\n                      <option value=\"HDFC Bank\">HDFC Bank</option>\r\n                      <option value=\"ICICI Bank\">ICICI Bank</option>\r\n                      <option value=\"Axis Bank\">Axis Bank</option>\r\n                      <option value=\"Punjab National Bank\">Punjab National Bank</option>\r\n                    </select>\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('bank')?.invalid && loanReceiptForm.get('bank')?.touched\">\r\n                      Bank selection is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">Date</label>\r\n                    <input \r\n                      type=\"date\" \r\n                      class=\"form-input\"\r\n                      formControlName=\"date\">\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('date')?.invalid && loanReceiptForm.get('date')?.touched\">\r\n                      Date is required\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Member Details Section -->\r\n            <div class=\"form-section\">\r\n              <div class=\"form-section-header\">\r\n                <mat-icon>person</mat-icon>\r\n                <span>Member Details</span>\r\n              </div>\r\n              <div class=\"form-section-content\">\r\n                <div class=\"form-grid form-grid-2\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">Mem. No.</label>\r\n                    <div class=\"input-group\">\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-input\"\r\n                        placeholder=\"Enter member number\"\r\n                        formControlName=\"memberNo\">\r\n                      <button type=\"button\" class=\"btn btn-outline\" (click)=\"browseMember()\">\r\n                        <mat-icon>search</mat-icon>\r\n                        Browse\r\n                      </button>\r\n                    </div>\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('memberNo')?.invalid && loanReceiptForm.get('memberNo')?.touched\">\r\n                      Member number is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Name</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Member name (auto-filled)\"\r\n                      formControlName=\"memberName\"\r\n                      readonly>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Amount Section -->\r\n            <div class=\"form-section\">\r\n              <div class=\"form-section-header\">\r\n                <mat-icon>currency_rupee</mat-icon>\r\n                <span>Amount Details</span>\r\n              </div>\r\n              <div class=\"form-section-content\">\r\n                <div class=\"form-grid form-grid-1\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label form-label-required\">Amount</label>\r\n                    <div class=\"input-group\">\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-input\"\r\n                        placeholder=\"Enter amount\"\r\n                        formControlName=\"amount\"\r\n                        (input)=\"onAmountChange()\">\r\n                      <button type=\"button\" class=\"btn btn-primary\" (click)=\"calculateAmount()\">\r\n                        <mat-icon>calculate</mat-icon>\r\n                        Calculate\r\n                      </button>\r\n                    </div>\r\n                    <div class=\"form-error\" *ngIf=\"loanReceiptForm.get('amount')?.invalid && loanReceiptForm.get('amount')?.touched\">\r\n                      Amount is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Add. Amount</label>\r\n                    <div class=\"flex gap-2\">\r\n                      <select class=\"form-select flex-1\" [(ngModel)]=\"selectedAddType\" [ngModelOptions]=\"{standalone: true}\">\r\n                        <option value=\"\">Select type</option>\r\n                        <option value=\"Interest\">Interest</option>\r\n                        <option value=\"Penalty\">Penalty</option>\r\n                        <option value=\"Processing Fee\">Processing Fee</option>\r\n                        <option value=\"Other\">Other</option>\r\n                      </select>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-input flex-1\"\r\n                        placeholder=\"Additional amount\"\r\n                        [(ngModel)]=\"additionalAmount\"\r\n                        [ngModelOptions]=\"{standalone: true}\">\r\n                      <button type=\"button\" class=\"btn btn-success\" (click)=\"addAdditionalAmount()\" [disabled]=\"!selectedAddType || !additionalAmount\">\r\n                        <mat-icon>add</mat-icon>\r\n                        Add\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Additional Amount Table -->\r\n                <div class=\"mt-4\" *ngIf=\"additionalAmounts.length > 0\">\r\n                  <div class=\"table-container\">\r\n                    <table class=\"data-table\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Type</th>\r\n                          <th>Amount</th>\r\n                          <th>Actions</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr *ngFor=\"let item of additionalAmounts\">\r\n                          <td>{{ item.type }}</td>\r\n                          <td class=\"text-right\">{{ item.amount | currency:'INR':'symbol':'1.2-2' }}</td>\r\n                          <td>\r\n                            <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"removeAdditionalAmount(item.id)\">\r\n                              <mat-icon>delete</mat-icon>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div class=\"mt-2 text-right font-semibold\">\r\n                    Total Additional: {{ getTotalAdditional() | currency:'INR':'symbol':'1.2-2' }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Payment Details Section -->\r\n            <div class=\"form-section\">\r\n              <div class=\"form-section-header\">\r\n                <mat-icon>payment</mat-icon>\r\n                <span>Payment Details</span>\r\n              </div>\r\n              <div class=\"form-section-content\">\r\n                <div class=\"form-grid form-grid-3\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Ch No.</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Cheque number\"\r\n                      formControlName=\"chequeNo\">\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Date</label>\r\n                    <input \r\n                      type=\"date\" \r\n                      class=\"form-input\"\r\n                      formControlName=\"chequeDate\">\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Pass Date</label>\r\n                    <input \r\n                      type=\"date\" \r\n                      class=\"form-input\"\r\n                      formControlName=\"passDate\">\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"form-grid form-grid-2\">\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Narration</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Enter narration\"\r\n                      formControlName=\"narration\">\r\n                  </div>\r\n\r\n                  <div class=\"form-field\">\r\n                    <label class=\"form-label\">Remarks</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-input\"\r\n                      placeholder=\"Enter remarks\"\r\n                      formControlName=\"remarks\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Summary Section -->\r\n            <div class=\"form-section\" *ngIf=\"loanReceiptForm.get('amount')?.value\">\r\n              <div class=\"form-section-content\">\r\n                <div class=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\r\n                  <div class=\"flex justify-between items-center text-lg font-semibold\">\r\n                    <span>Total Amount:</span>\r\n                    <span class=\"text-green-600\">{{ getTotalAmount() | currency:'INR':'symbol':'1.2-2' }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Action Buttons -->\r\n          <div class=\"card-actions\">\r\n            <div class=\"flex justify-end gap-3\">\r\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSave()\">\r\n                <mat-icon>save</mat-icon>\r\n                Save\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onPrint()\">\r\n                <mat-icon>print</mat-icon>\r\n                Print\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-danger\" (click)=\"onDelete()\">\r\n                <mat-icon>delete</mat-icon>\r\n                Delete\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-success\" (click)=\"onNew()\">\r\n                <mat-icon>add</mat-icon>\r\n                New\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onClose()\">\r\n                <mat-icon>close</mat-icon>\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </mat-card>\r\n      </form>\r\n    </div>\r\n  `,\r\n  styleUrl: './loan-receipt.component.css'\r\n})\r\nexport class LoanReceiptComponent implements OnInit {\r\n  loanReceiptForm: FormGroup;\r\n  additionalAmounts: AddAmountEntry[] = [];\r\n  selectedAddType: string = '';\r\n  additionalAmount: number = 0;\r\n  private nextId = 1;\r\n\r\n  // Sample member data\r\n  members = [\r\n    { memberNo: 'M001', name: 'John Doe' },\r\n    { memberNo: 'M002', name: 'Jane Smith' },\r\n    { memberNo: 'M003', name: 'Mike Johnson' },\r\n  ];\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.loanReceiptForm = this.fb.group({\r\n      receiptNo: ['', Validators.required],\r\n      bank: ['', Validators.required],\r\n      date: [new Date().toISOString().split('T')[0], Validators.required],\r\n      memberNo: ['', Validators.required],\r\n      memberName: [''],\r\n      amount: ['', [Validators.required, Validators.min(1)]],\r\n      chequeNo: [''],\r\n      chequeDate: [''],\r\n      narration: [''],\r\n      remarks: [''],\r\n      passDate: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Watch for member number changes\r\n    this.loanReceiptForm.get('memberNo')?.valueChanges.subscribe(value => {\r\n      const member = this.members.find(m => m.memberNo === value);\r\n      if (member) {\r\n        this.loanReceiptForm.patchValue({ memberName: member.name });\r\n      }\r\n    });\r\n  }\r\n\r\n  browseMember() {\r\n    // Simulate member search - in real app, this would open a dialog\r\n    const randomMember = this.members[Math.floor(Math.random() * this.members.length)];\r\n    this.loanReceiptForm.patchValue({\r\n      memberNo: randomMember.memberNo,\r\n      memberName: randomMember.name\r\n    });\r\n  }\r\n\r\n  onAmountChange() {\r\n    // Auto-calculate based on amount changes if needed\r\n  }\r\n\r\n  calculateAmount() {\r\n    const baseAmount = this.loanReceiptForm.get('amount')?.value || 0;\r\n    const additionalTotal = this.getTotalAdditional();\r\n    \r\n    // Perform any calculations needed\r\n    console.log('Calculating total:', baseAmount + additionalTotal);\r\n  }\r\n\r\n  addAdditionalAmount() {\r\n    if (this.selectedAddType && this.additionalAmount > 0) {\r\n      this.additionalAmounts.push({\r\n        id: this.nextId++,\r\n        type: this.selectedAddType,\r\n        amount: this.additionalAmount\r\n      });\r\n      \r\n      // Reset input fields\r\n      this.selectedAddType = '';\r\n      this.additionalAmount = 0;\r\n    }\r\n  }\r\n\r\n  removeAdditionalAmount(id: number) {\r\n    this.additionalAmounts = this.additionalAmounts.filter(item => item.id !== id);\r\n  }\r\n\r\n  getTotalAdditional(): number {\r\n    return this.additionalAmounts.reduce((sum, item) => sum + item.amount, 0);\r\n  }\r\n\r\n  getTotalAmount(): number {\r\n    const baseAmount = this.loanReceiptForm.get('amount')?.value || 0;\r\n    return baseAmount + this.getTotalAdditional();\r\n  }\r\n\r\n  onSave() {\r\n    if (this.loanReceiptForm.valid) {\r\n      const formData = {\r\n        ...this.loanReceiptForm.value,\r\n        additionalAmounts: this.additionalAmounts,\r\n        totalAmount: this.getTotalAmount()\r\n      };\r\n      console.log('Saving loan receipt:', formData);\r\n      alert('Loan receipt saved successfully!');\r\n    } else {\r\n      console.log('Form is invalid');\r\n      this.markFormGroupTouched();\r\n    }\r\n  }\r\n\r\n  onPrint() {\r\n    console.log('Printing loan receipt');\r\n    window.print();\r\n  }\r\n\r\n  onDelete() {\r\n    if (confirm('Are you sure you want to delete this loan receipt?')) {\r\n      this.onNew();\r\n      console.log('Loan receipt deleted');\r\n    }\r\n  }\r\n\r\n  onNew() {\r\n    this.loanReceiptForm.reset();\r\n    this.loanReceiptForm.patchValue({\r\n      date: new Date().toISOString().split('T')[0]\r\n    });\r\n    this.additionalAmounts = [];\r\n    this.selectedAddType = '';\r\n    this.additionalAmount = 0;\r\n    console.log('New loan receipt form');\r\n  }\r\n\r\n  onClose() {\r\n    console.log('Closing loan receipt form');\r\n    // Navigate back or close modal\r\n  }\r\n\r\n  private markFormGroupTouched() {\r\n    Object.keys(this.loanReceiptForm.controls).forEach(key => {\r\n      const control = this.loanReceiptForm.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n}\r\n","size_bytes":18064},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/profit-loss/profit-loss.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-profit-loss',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Profit & Loss Account</h1><mat-card><mat-card-content><p>Profit and loss statement generation.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class ProfitLossComponent {}\n","size_bytes":550},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/receipt-payment/receipt-payment.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-receipt-payment',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Receipt & Payment</h1><mat-card><mat-card-content><p>Receipt and payment account management.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class ReceiptPaymentComponent {}\n","size_bytes":556},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/trial-balance/trial-balance.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-trial-balance',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Trial Balance</h1><mat-card><mat-card-content><p>Trial balance report generation.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class TrialBalanceComponent {}\n","size_bytes":541},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/voucher/voucher.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\n\ninterface Voucher {\n  id: number;\n  voucherNo: string;\n  voucherType: string;\n  date: string;\n  description: string;\n  debitAccount: string;\n  creditAccount: string;\n  amount: number;\n  status: string;\n}\n\n@Component({\n  selector: 'app-voucher',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatSelectModule,\n    MatSnackBarModule\n  ],\n  template: `\n    <div class=\"page-container\">\n      <h1>Voucher Management</h1>\n      \n      <!-- Add/Edit Form -->\n      <mat-card class=\"form-card\">\n        <mat-card-header>\n          <mat-card-title>{{isEditing ? 'Edit' : 'Create'}} Voucher</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <form [formGroup]=\"voucherForm\" (ngSubmit)=\"onSubmit()\" class=\"voucher-form\">\n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Voucher No.</mat-label>\n                <input matInput formControlName=\"voucherNo\" required>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n                <mat-label>Voucher Type</mat-label>\n                <mat-select formControlName=\"voucherType\" required>\n                  <mat-option value=\"Payment\">Payment Voucher</mat-option>\n                  <mat-option value=\"Receipt\">Receipt Voucher</mat-option>\n                  <mat-option value=\"Journal\">Journal Voucher</mat-option>\n                  <mat-option value=\"Contra\">Contra Voucher</mat-option>\n                </mat-select>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n                <mat-label>Date</mat-label>\n                <input matInput formControlName=\"date\" type=\"date\" required>\n              </mat-form-field>\n            </div>\n            \n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\n                <mat-label>Description</mat-label>\n                <textarea matInput formControlName=\"description\" rows=\"2\" required></textarea>\n              </mat-form-field>\n            </div>\n            \n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Debit Account</mat-label>\n                <mat-select formControlName=\"debitAccount\" required>\n                  <mat-option value=\"Cash\">Cash</mat-option>\n                  <mat-option value=\"Bank\">Bank</mat-option>\n                  <mat-option value=\"Loan Account\">Loan Account</mat-option>\n                  <mat-option value=\"Interest Income\">Interest Income</mat-option>\n                  <mat-option value=\"Administrative Expenses\">Administrative Expenses</mat-option>\n                </mat-select>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n                <mat-label>Credit Account</mat-label>\n                <mat-select formControlName=\"creditAccount\" required>\n                  <mat-option value=\"Cash\">Cash</mat-option>\n                  <mat-option value=\"Bank\">Bank</mat-option>\n                  <mat-option value=\"Member Deposits\">Member Deposits</mat-option>\n                  <mat-option value=\"Interest Payable\">Interest Payable</mat-option>\n                  <mat-option value=\"Service Charges\">Service Charges</mat-option>\n                </mat-select>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n                <mat-label>Amount (‚Çπ)</mat-label>\n                <input matInput formControlName=\"amount\" type=\"number\" step=\"0.01\" required>\n              </mat-form-field>\n            </div>\n            \n            <div class=\"form-actions\">\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"voucherForm.invalid\">\n                {{isEditing ? 'Update' : 'Create'}} Voucher\n              </button>\n              <button mat-button type=\"button\" (click)=\"resetForm()\" *ngIf=\"isEditing\">\n                Cancel\n              </button>\n            </div>\n          </form>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Vouchers Table -->\n      <mat-card class=\"table-card\">\n        <mat-card-header>\n          <mat-card-title>Vouchers List</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <table mat-table [dataSource]=\"vouchers\" class=\"mat-elevation-z2\">\n            <ng-container matColumnDef=\"voucherNo\">\n              <th mat-header-cell *matHeaderCellDef>Voucher No.</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.voucherNo}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"voucherType\">\n              <th mat-header-cell *matHeaderCellDef>Type</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.voucherType}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"date\">\n              <th mat-header-cell *matHeaderCellDef>Date</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.date | date}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"description\">\n              <th mat-header-cell *matHeaderCellDef>Description</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.description}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"accounts\">\n              <th mat-header-cell *matHeaderCellDef>Dr/Cr Accounts</th>\n              <td mat-cell *matCellDef=\"let voucher\">\n                <div>Dr: {{voucher.debitAccount}}</div>\n                <div>Cr: {{voucher.creditAccount}}</div>\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"amount\">\n              <th mat-header-cell *matHeaderCellDef>Amount</th>\n              <td mat-cell *matCellDef=\"let voucher\">‚Çπ{{voucher.amount | number}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"status\">\n              <th mat-header-cell *matHeaderCellDef>Status</th>\n              <td mat-cell *matCellDef=\"let voucher\">{{voucher.status}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"actions\">\n              <th mat-header-cell *matHeaderCellDef>Actions</th>\n              <td mat-cell *matCellDef=\"let voucher\">\n                <button mat-icon-button color=\"primary\" (click)=\"editVoucher(voucher)\">\n                  <mat-icon>edit</mat-icon>\n                </button>\n                <button mat-icon-button color=\"accent\" (click)=\"printVoucher(voucher)\">\n                  <mat-icon>print</mat-icon>\n                </button>\n                <button mat-icon-button color=\"warn\" (click)=\"deleteVoucher(voucher.id)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </td>\n            </ng-container>\n            \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .form-card, .table-card {\n      margin-bottom: 20px;\n    }\n    \n    .voucher-form {\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n    }\n    \n    .form-row {\n      display: flex;\n      gap: 16px;\n      align-items: flex-start;\n    }\n    \n    .form-row mat-form-field {\n      flex: 1;\n    }\n    \n    .full-width {\n      width: 100%;\n    }\n    \n    .form-actions {\n      display: flex;\n      gap: 12px;\n      margin-top: 16px;\n    }\n    \n    table {\n      width: 100%;\n    }\n  `]\n})\nexport class VoucherComponent implements OnInit {\n  voucherForm: FormGroup;\n  vouchers: Voucher[] = [];\n  isEditing = false;\n  editingId: number | null = null;\n  displayedColumns: string[] = ['voucherNo', 'voucherType', 'date', 'description', 'accounts', 'amount', 'status', 'actions'];\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {\n    this.voucherForm = this.fb.group({\n      voucherNo: ['', Validators.required],\n      voucherType: ['', Validators.required],\n      date: ['', Validators.required],\n      description: ['', Validators.required],\n      debitAccount: ['', Validators.required],\n      creditAccount: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0.01)]]\n    });\n  }\n\n  ngOnInit() {\n    this.loadSampleData();\n  }\n\n  loadSampleData() {\n    this.vouchers = [\n      {\n        id: 1,\n        voucherNo: 'PV001',\n        voucherType: 'Payment',\n        date: '2024-01-15',\n        description: 'Office rent payment for January',\n        debitAccount: 'Administrative Expenses',\n        creditAccount: 'Cash',\n        amount: 15000,\n        status: 'Posted'\n      },\n      {\n        id: 2,\n        voucherNo: 'RV001',\n        voucherType: 'Receipt',\n        date: '2024-01-16',\n        description: 'Member deposit received',\n        debitAccount: 'Cash',\n        creditAccount: 'Member Deposits',\n        amount: 25000,\n        status: 'Posted'\n      }\n    ];\n  }\n\n  onSubmit() {\n    if (this.voucherForm.valid) {\n      const formValue = this.voucherForm.value;\n      \n      if (this.isEditing && this.editingId) {\n        const index = this.vouchers.findIndex(v => v.id === this.editingId);\n        if (index !== -1) {\n          this.vouchers[index] = { ...this.vouchers[index], ...formValue };\n          this.snackBar.open('Voucher updated successfully!', 'Close', { duration: 3000 });\n        }\n      } else {\n        const newVoucher: Voucher = {\n          id: this.vouchers.length + 1,\n          ...formValue,\n          status: 'Posted'\n        };\n        this.vouchers.push(newVoucher);\n        this.snackBar.open('Voucher created successfully!', 'Close', { duration: 3000 });\n      }\n      \n      this.resetForm();\n    }\n  }\n\n  editVoucher(voucher: Voucher) {\n    this.isEditing = true;\n    this.editingId = voucher.id;\n    this.voucherForm.patchValue(voucher);\n  }\n\n  printVoucher(voucher: Voucher) {\n    this.snackBar.open(`Printing voucher: ${voucher.voucherNo}`, 'Close', { duration: 3000 });\n  }\n\n  deleteVoucher(id: number) {\n    if (confirm('Are you sure you want to delete this voucher?')) {\n      this.vouchers = this.vouchers.filter(v => v.id !== id);\n      this.snackBar.open('Voucher deleted successfully!', 'Close', { duration: 3000 });\n    }\n  }\n\n  resetForm() {\n    this.voucherForm.reset();\n    this.isEditing = false;\n    this.editingId = null;\n  }\n}\n","size_bytes":11429},"attached_assets/extracted_frontend/fintcs/src/app/components/accounts/voucher-creation/voucher-creation.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\n\ninterface VoucherEntry {\n  particulars: string;\n  debit: number;\n  credit: number;\n  particularCode?: string;\n}\n\n@Component({\n  selector: 'app-voucher-creation',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatSnackBarModule\n  ],\n  template: `\n    <div class=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-6\">\n      <div class=\"max-w-7xl mx-auto\">\n        <!-- Header -->\n        <div class=\"mb-8\">\n          <h1 class=\"text-3xl font-bold text-gray-800 mb-2\">Voucher Creation</h1>\n          <p class=\"text-gray-600\">Create and manage accounting vouchers</p>\n        </div>\n\n        <!-- Main Form Card -->\n        <div class=\"bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden\">\n          <form [formGroup]=\"voucherForm\" class=\"p-8\">\n            \n            <!-- Top Section -->\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-100\">\n              <div>\n                <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Voucher Type</label>\n                <select formControlName=\"voucherType\" class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white\">\n                  <option value=\"\">Select Type</option>\n                  <option value=\"Payment\">Payment Voucher</option>\n                  <option value=\"Receipt\">Receipt Voucher</option>\n                  <option value=\"Journal\">Journal Voucher</option>\n                  <option value=\"Contra\">Contra Voucher</option>\n                </select>\n              </div>\n              <div>\n                <label class=\"block text-sm font-semibold text-gray-700 mb-2\">No.</label>\n                <input type=\"text\" formControlName=\"voucherNo\" \n                       class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n              </div>\n              <div>\n                <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Date</label>\n                <input type=\"date\" formControlName=\"voucherDate\" \n                       class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n              </div>\n            </div>\n\n            <!-- Voucher Table -->\n            <div class=\"mb-8\">\n              <div class=\"bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200\">\n                <h3 class=\"text-lg font-semibold text-gray-800 mb-4\">Voucher Entries</h3>\n                <div class=\"overflow-x-auto\">\n                  <table class=\"min-w-full bg-white border border-gray-300 rounded-lg overflow-hidden shadow-sm\">\n                    <thead class=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white\">\n                      <tr>\n                        <th class=\"px-6 py-4 text-left text-sm font-semibold\">Particulars</th>\n                        <th class=\"px-6 py-4 text-right text-sm font-semibold\">Debit</th>\n                        <th class=\"px-6 py-4 text-right text-sm font-semibold\">Credit</th>\n                        <th class=\"px-6 py-4 text-center text-sm font-semibold\">Action</th>\n                      </tr>\n                    </thead>\n                    <tbody class=\"divide-y divide-gray-200\">\n                      <tr *ngFor=\"let entry of voucherEntries; let i = index\" \n                          class=\"hover:bg-gray-50 transition-colors duration-150\">\n                        <td class=\"px-6 py-4 text-sm text-gray-900\">{{entry.particulars}}</td>\n                        <td class=\"px-6 py-4 text-sm text-gray-900 text-right\">\n                          {{entry.debit > 0 ? (entry.debit | number:'1.2-2') : '-'}}\n                        </td>\n                        <td class=\"px-6 py-4 text-sm text-gray-900 text-right\">\n                          {{entry.credit > 0 ? (entry.credit | number:'1.2-2') : '-'}}\n                        </td>\n                        <td class=\"px-6 py-4 text-center\">\n                          <button type=\"button\" (click)=\"removeEntry(i)\" \n                                  class=\"text-red-600 hover:text-red-800 font-medium text-sm\">\n                            Remove\n                          </button>\n                        </td>\n                      </tr>\n                      <tr *ngIf=\"voucherEntries.length === 0\">\n                        <td colspan=\"4\" class=\"px-6 py-8 text-center text-gray-500 text-sm\">\n                          No entries added yet. Use the form below to add entries.\n                        </td>\n                      </tr>\n                      <!-- Total Row -->\n                      <tr *ngIf=\"voucherEntries.length > 0\" class=\"bg-gradient-to-r from-gray-100 to-gray-200 font-semibold\">\n                        <td class=\"px-6 py-4 text-sm text-gray-900 font-bold\">Total</td>\n                        <td class=\"px-6 py-4 text-sm text-gray-900 text-right font-bold\">\n                          ‚Çπ{{getTotalDebit() | number:'1.2-2'}}\n                        </td>\n                        <td class=\"px-6 py-4 text-sm text-gray-900 text-right font-bold\">\n                          ‚Çπ{{getTotalCredit() | number:'1.2-2'}}\n                        </td>\n                        <td class=\"px-6 py-4\"></td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n\n            <!-- Entry Section -->\n            <div class=\"mb-8\">\n              <div class=\"bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl p-6 border border-green-100\">\n                <h3 class=\"text-lg font-semibold text-gray-800 mb-4\">Add New Entry</h3>\n                <div [formGroup]=\"entryForm\" class=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Db/Cr</label>\n                    <select formControlName=\"type\" class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white\">\n                      <option value=\"\">Select</option>\n                      <option value=\"debit\">Debit</option>\n                      <option value=\"credit\">Credit</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Particulars</label>\n                    <input type=\"text\" formControlName=\"particulars\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                           placeholder=\"Enter particulars\">\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Amount</label>\n                    <input type=\"number\" formControlName=\"amount\" step=\"0.01\"\n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                           placeholder=\"0.00\">\n                  </div>\n                  <div class=\"flex items-end gap-2\">\n                    <button type=\"button\" (click)=\"addEntry()\" \n                            class=\"flex-1 bg-gradient-to-r from-green-600 to-emerald-600 text-white px-6 py-3 rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 font-medium\">\n                      Add\n                    </button>\n                    <button type=\"button\" (click)=\"clearEntry()\" \n                            class=\"flex-1 bg-gradient-to-r from-gray-500 to-gray-600 text-white px-6 py-3 rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all duration-200 font-medium\">\n                      Clear\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Bottom Section -->\n            <div class=\"mb-8\">\n              <div class=\"bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-6 border border-purple-100\">\n                <h3 class=\"text-lg font-semibold text-gray-800 mb-4\">Additional Details</h3>\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Ch No.</label>\n                    <input type=\"text\" formControlName=\"chequeNo\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                           placeholder=\"Cheque Number\">\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Date</label>\n                    <input type=\"date\" formControlName=\"chequeDate\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\">\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Pass Date</label>\n                    <input type=\"date\" formControlName=\"passDate\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\">\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-6\">\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Narration</label>\n                    <textarea formControlName=\"narration\" rows=\"4\"\n                              class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                              placeholder=\"Enter narration...\"></textarea>\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-semibold text-gray-700 mb-2\">Remarks</label>\n                    <textarea formControlName=\"remarks\" rows=\"4\"\n                              class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                              placeholder=\"Enter remarks...\"></textarea>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Balance Check Warning -->\n            <div *ngIf=\"!isBalanced()\" class=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <div class=\"flex items-center\">\n                <svg class=\"w-5 h-5 text-red-500 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"></path>\n                </svg>\n                <span class=\"text-red-700 font-medium\">Warning: Debit and Credit totals don't match! \n                  Difference: ‚Çπ{{Math.abs(getTotalDebit() - getTotalCredit()) | number:'1.2-2'}}</span>\n              </div>\n            </div>\n\n            <!-- Footer Buttons -->\n            <div class=\"flex flex-wrap gap-4 justify-center pt-6 border-t border-gray-200\">\n              <button type=\"button\" (click)=\"reverseVoucher()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-lg hover:from-orange-600 hover:to-red-600 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Reverse\n              </button>\n              <button type=\"button\" (click)=\"saveVoucher()\" [disabled]=\"!isBalanced()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Save\n              </button>\n              <button type=\"button\" (click)=\"printVoucher()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Print\n              </button>\n              <button type=\"button\" (click)=\"deleteVoucher()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-red-600 to-pink-600 text-white rounded-lg hover:from-red-700 hover:to-pink-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Delete\n              </button>\n              <button type=\"button\" (click)=\"newVoucher()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                New\n              </button>\n              <button type=\"button\" (click)=\"closeForm()\" \n                      class=\"px-8 py-3 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-lg hover:from-gray-700 hover:to-gray-800 transition-all duration-200 font-medium shadow-lg hover:shadow-xl\">\n                Close\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .table-container {\n      overflow-x: auto;\n    }\n    \n    @media (max-width: 768px) {\n      .grid-cols-3 {\n        grid-template-columns: 1fr;\n      }\n      .grid-cols-4 {\n        grid-template-columns: 1fr;\n      }\n    }\n  `]\n})\nexport class VoucherCreationComponent implements OnInit {\n  voucherForm: FormGroup;\n  entryForm: FormGroup;\n  voucherEntries: VoucherEntry[] = [];\n  Math = Math;\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {\n    this.voucherForm = this.createVoucherForm();\n    this.entryForm = this.createEntryForm();\n  }\n\n  ngOnInit() {\n    // Set default date to current date\n    const today = new Date().toISOString().split('T')[0];\n    this.voucherForm.patchValue({\n      voucherDate: today,\n      chequeDate: today,\n      passDate: today\n    });\n  }\n\n  createVoucherForm(): FormGroup {\n    return this.fb.group({\n      voucherType: ['', Validators.required],\n      voucherNo: ['', Validators.required],\n      voucherDate: ['', Validators.required],\n      chequeNo: [''],\n      chequeDate: [''],\n      passDate: [''],\n      narration: [''],\n      remarks: ['']\n    });\n  }\n\n  createEntryForm(): FormGroup {\n    return this.fb.group({\n      type: ['', Validators.required],\n      particulars: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0.01)]]\n    });\n  }\n\n  addEntry() {\n    if (this.entryForm.valid) {\n      const formValue = this.entryForm.value;\n      const entry: VoucherEntry = {\n        particulars: formValue.particulars,\n        debit: formValue.type === 'debit' ? parseFloat(formValue.amount) : 0,\n        credit: formValue.type === 'credit' ? parseFloat(formValue.amount) : 0\n      };\n\n      this.voucherEntries.push(entry);\n      this.clearEntry();\n      this.snackBar.open('Entry added successfully!', 'Close', { duration: 2000 });\n    } else {\n      this.snackBar.open('Please fill all required fields', 'Close', { duration: 3000 });\n    }\n  }\n\n  removeEntry(index: number) {\n    this.voucherEntries.splice(index, 1);\n    this.snackBar.open('Entry removed', 'Close', { duration: 2000 });\n  }\n\n  clearEntry() {\n    this.entryForm.reset();\n  }\n\n  getTotalDebit(): number {\n    return this.voucherEntries.reduce((sum, entry) => sum + entry.debit, 0);\n  }\n\n  getTotalCredit(): number {\n    return this.voucherEntries.reduce((sum, entry) => sum + entry.credit, 0);\n  }\n\n  isBalanced(): boolean {\n    return this.getTotalDebit() === this.getTotalCredit() && this.voucherEntries.length > 0;\n  }\n\n  reverseVoucher() {\n    this.voucherEntries.forEach(entry => {\n      const temp = entry.debit;\n      entry.debit = entry.credit;\n      entry.credit = temp;\n    });\n    this.snackBar.open('Voucher entries reversed!', 'Close', { duration: 2000 });\n  }\n\n  saveVoucher() {\n    if (this.voucherForm.valid && this.isBalanced()) {\n      const voucherData = {\n        ...this.voucherForm.value,\n        entries: this.voucherEntries,\n        totalDebit: this.getTotalDebit(),\n        totalCredit: this.getTotalCredit()\n      };\n      console.log('Saving voucher:', voucherData);\n      this.snackBar.open('Voucher saved successfully!', 'Close', { duration: 3000 });\n    } else {\n      this.snackBar.open('Please complete the form and ensure entries are balanced', 'Close', { duration: 3000 });\n    }\n  }\n\n  printVoucher() {\n    window.print();\n    this.snackBar.open('Print dialog opened', 'Close', { duration: 2000 });\n  }\n\n  deleteVoucher() {\n    if (confirm('Are you sure you want to delete this voucher?')) {\n      this.newVoucher();\n      this.snackBar.open('Voucher deleted', 'Close', { duration: 2000 });\n    }\n  }\n\n  newVoucher() {\n    this.voucherForm.reset();\n    this.entryForm.reset();\n    this.voucherEntries = [];\n    const today = new Date().toISOString().split('T')[0];\n    this.voucherForm.patchValue({\n      voucherDate: today,\n      chequeDate: today,\n      passDate: today\n    });\n    this.snackBar.open('New voucher form ready', 'Close', { duration: 2000 });\n  }\n\n  closeForm() {\n    if (confirm('Are you sure you want to close? Any unsaved changes will be lost.')) {\n      // Implement navigation logic here\n      this.snackBar.open('Form closed', 'Close', { duration: 2000 });\n    }\n  }\n}\n","size_bytes":18008},"attached_assets/extracted_frontend/fintcs/src/app/components/auth/login/login.component.ts":{"content":"\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { AuthService } from '../../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule\r\n  ],\r\n  template: `\r\n    <div class=\"min-h-screen bg-gradient-to-br from-primary-500 via-primary-600 to-primary-700 flex items-center justify-center p-4\">\r\n      <div class=\"w-full max-w-md\">\r\n        <!-- Logo and Title -->\r\n        <div class=\"text-center mb-8\">\r\n          <div class=\"inline-flex items-center justify-center w-16 h-16 bg-white rounded-full shadow-lg mb-4\">\r\n            <mat-icon class=\"text-3xl text-primary-600\">account_balance</mat-icon>\r\n          </div>\r\n          <h1 class=\"text-3xl font-bold text-white mb-2\">Financial Management System</h1>\r\n          <p class=\"text-primary-100\">Sign in to access your account</p>\r\n        </div>\r\n\r\n        <!-- Login Form -->\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-8\">\r\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"space-y-6\">\r\n            <!-- Username Field -->\r\n            <div>\r\n              <label for=\"username\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Username\r\n              </label>\r\n              <div class=\"relative\">\r\n                <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                  <mat-icon class=\"text-gray-400\">person</mat-icon>\r\n                </div>\r\n                <input\r\n                  id=\"username\"\r\n                  type=\"text\"\r\n                  formControlName=\"username\"\r\n                  placeholder=\"Enter your username\"\r\n                  class=\"w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white transition-colors duration-200\"\r\n                  [class.border-red-500]=\"loginForm.get('username')?.invalid && loginForm.get('username')?.touched\"\r\n                >\r\n              </div>\r\n              <div *ngIf=\"loginForm.get('username')?.invalid && loginForm.get('username')?.touched\" \r\n                   class=\"mt-1 text-sm text-red-600 dark:text-red-400\">\r\n                Username is required\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Password Field -->\r\n            <div>\r\n              <label for=\"password\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Password\r\n              </label>\r\n              <div class=\"relative\">\r\n                <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                  <mat-icon class=\"text-gray-400\">lock</mat-icon>\r\n                </div>\r\n                <input\r\n                  id=\"password\"\r\n                  [type]=\"showPassword ? 'text' : 'password'\"\r\n                  formControlName=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  class=\"w-full pl-10 pr-12 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white transition-colors duration-200\"\r\n                  [class.border-red-500]=\"loginForm.get('password')?.invalid && loginForm.get('password')?.touched\"\r\n                >\r\n                <button\r\n                  type=\"button\"\r\n                  (click)=\"togglePasswordVisibility()\"\r\n                  class=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                >\r\n                  <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n                </button>\r\n              </div>\r\n              <div *ngIf=\"loginForm.get('password')?.invalid && loginForm.get('password')?.touched\" \r\n                   class=\"mt-1 text-sm text-red-600 dark:text-red-400\">\r\n                Password is required\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Login Button -->\r\n            <button\r\n              type=\"submit\"\r\n              [disabled]=\"loginForm.invalid || loading\"\r\n              class=\"w-full flex items-center justify-center px-4 py-3 bg-primary-600 hover:bg-primary-700 disabled:bg-gray-400 text-white font-medium rounded-lg shadow-sm transition-colors duration-200\"\r\n            >\r\n              <mat-spinner *ngIf=\"loading\" diameter=\"20\" class=\"mr-2\"></mat-spinner>\r\n              <span>{{ loading ? 'Signing in...' : 'Sign In' }}</span>\r\n            </button>\r\n          </form>\r\n\r\n          <!-- Demo Accounts -->\r\n          <div class=\"mt-8 pt-6 border-t border-gray-200 dark:border-gray-600\">\r\n            <h3 class=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">Demo Accounts</h3>\r\n            <div class=\"grid grid-cols-1 gap-2\">\r\n              <button\r\n                *ngFor=\"let account of demoAccounts\"\r\n                (click)=\"loginWithDemo(account.username)\"\r\n                class=\"flex items-center justify-between p-3 text-left bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg transition-colors duration-200\"\r\n              >\r\n                <div>\r\n                  <div class=\"text-sm font-medium text-gray-900 dark:text-white\">{{ account.role }}</div>\r\n                  <div class=\"text-xs text-gray-500 dark:text-gray-400\">{{ account.username }}</div>\r\n                </div>\r\n                <mat-icon class=\"text-gray-400\">arrow_forward</mat-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Footer -->\r\n        <div class=\"text-center mt-8\">\r\n          <p class=\"text-sm text-primary-100\">\r\n            Secure financial management for your society\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .mat-mdc-progress-spinner {\r\n      --mdc-circular-progress-active-indicator-color: white;\r\n    }\r\n  `]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  loading = false;\r\n  showPassword = false;\r\n  returnUrl: string = '/dashboard';\r\n\r\n  demoAccounts = [\r\n    { role: 'Super Admin', username: 'superadmin' },\r\n    { role: 'Society Admin', username: 'societyadmin' },\r\n    { role: 'Accountant', username: 'accountant1' },\r\n    { role: 'Member', username: 'member1' }\r\n  ];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\r\n\r\n    // Redirect if already logged in\r\n    if (this.authService.getCurrentUser()) {\r\n      this.router.navigate([this.returnUrl]);\r\n    }\r\n  }\r\n\r\n  togglePasswordVisibility() {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n\r\n  loginWithDemo(username: string) {\r\n    console.log(username)\r\n    this.loginForm.patchValue({\r\n      username: username,\r\n      password: 'password'\r\n    });\r\n    this.onSubmit();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.loginForm.invalid) return;\r\n\r\n    this.loading = true;\r\n    const { username, password } = this.loginForm.value;\r\n    console.log('username == ', username)\r\n    console.log('password == ', password)\r\n    this.authService.login(username, password).subscribe({\r\n      next: (success:any) => {\r\n        this.loading = false;\r\n        if (success) {\r\n          const user = this.authService.getCurrentUser();\r\n          this.snackBar.open(`Welcome ${user?.firstName} ${user?.lastName}!`, 'Close', {\r\n            duration: 3000,\r\n            panelClass: ['success-snackbar']\r\n          });\r\n          this.router.navigate([this.returnUrl]);\r\n        } else {\r\n          this.snackBar.open('Invalid username or password', 'Close', {\r\n            duration: 3000,\r\n            panelClass: ['error-snackbar']\r\n          });\r\n        }\r\n      },\r\n      error: () => {\r\n        this.loading = false;\r\n        this.snackBar.open('Login failed. Please try again.', 'Close', {\r\n          duration: 3000,\r\n          panelClass: ['error-snackbar']\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","size_bytes":9054},"attached_assets/extracted_frontend/fintcs/src/app/components/file/create-new-year/create-new-year.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-create-new-year',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Create New Year</h1><mat-card><mat-card-content><p>Create new financial year.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class CreateNewYearComponent {}\n","size_bytes":540},"attached_assets/extracted_frontend/fintcs/src/app/components/file/edit-opening-balance/edit-opening-balance.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-edit-opening-balance',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Edit Opening Balance</h1><mat-card><mat-card-content><p>Edit opening balance for accounts.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class EditOpeningBalanceComponent {}\n","size_bytes":563},"attached_assets/extracted_frontend/fintcs/src/app/components/file/society/society.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatBadgeModule } from '@angular/material/badge';\n\ninterface SocietyData {\n  id: string;\n  name: string;\n  registrationNo: string;\n  address: string;\n  city: string;\n  phone: string;\n  fax?: string;\n  email: string;\n  website?: string;\n  interests: {\n    dividend: number;\n    od: number;\n    cd: number;\n    loan: number;\n    emergencyLoan: number;\n    las: number;\n  };\n  limits: {\n    share: number;\n    loan: number;\n    emergencyLoan: number;\n  };\n  chBounceCharge: number;\n  chequeReturnCharge: string;\n  cash: number;\n  bonus: number;\n}\n\ninterface ApprovalRequest {\n  id: string;\n  societyId: string;\n  requestedBy: string;\n  requestedAt: Date;\n  changes: any;\n  approvals: {\n    userId: string;\n    userName: string;\n    approved: boolean;\n    approvedAt?: Date;\n    comments?: string;\n  }[];\n  totalRequired: number;\n  status: 'pending' | 'approved' | 'rejected';\n}\n\ninterface User {\n  id: string;\n  name: string;\n  role: string;\n}\n\n@Component({\n  selector: 'app-society',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDividerModule,\n    MatProgressBarModule,\n    MatChipsModule,\n    MatBadgeModule\n  ],\n  template: `\n    <div class=\"animate-fade-in\">\n      <!-- Page Header -->\n      <div class=\"content-header\">\n        <div class=\"breadcrumb\">\n          <span>File</span>\n          <mat-icon class=\"breadcrumb-separator\">chevron_right</mat-icon>\n          <span class=\"breadcrumb-active\">Society</span>\n        </div>\n        <h1 class=\"text-page-title\">Society Management</h1>\n        <p class=\"text-body text-gray-600 dark:text-gray-400\">Manage society information, interest rates, and limits</p>\n      </div>\n\n      <!-- Pending Approval Alert -->\n      <div *ngIf=\"pendingRequest\" class=\"card mb-6 border-l-4 border-l-orange-400\">\n        <div class=\"card-header bg-gradient-to-r from-orange-500 to-red-500\">\n          <div class=\"card-title\">\n            <mat-icon>pending_actions</mat-icon>\n            <span>Pending Approval Request</span>\n          </div>\n          <div class=\"flex items-center gap-2 text-sm\">\n            <mat-icon class=\"text-lg\">schedule</mat-icon>\n            <span>{{ pendingRequest.requestedAt | date:'short' }}</span>\n          </div>\n        </div>\n        <div class=\"card-content\">\n          <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-4\">\n            <!-- Request Info -->\n            <div>\n              <h4 class=\"text-section-header mb-3\">Request Details</h4>\n              <div class=\"space-y-2 text-body\">\n                <div class=\"flex justify-between\">\n                  <span class=\"text-gray-600\">Requested by:</span>\n                  <span class=\"font-medium\">{{ pendingRequest.requestedBy }}</span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-gray-600\">Status:</span>\n                  <span class=\"badge badge-warning\">{{ pendingRequest.status | titlecase }}</span>\n                </div>\n              </div>\n            </div>\n\n            <!-- Approval Progress -->\n            <div>\n              <h4 class=\"text-section-header mb-3\">Approval Progress</h4>\n              <div class=\"space-y-3\">\n                <div class=\"flex justify-between text-body\">\n                  <span>{{ getApprovedCount() }} of {{ pendingRequest.totalRequired }} approved</span>\n                  <span class=\"font-medium\">{{ getApprovalProgress() | number:'1.0-0' }}%</span>\n                </div>\n                <div class=\"w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700\">\n                  <div \n                    class=\"bg-gradient-to-r from-green-500 to-emerald-500 h-2 rounded-full transition-all duration-300\"\n                    [style.width.%]=\"getApprovalProgress()\">\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Quick Actions -->\n            <div>\n              <h4 class=\"text-section-header mb-3\">Actions</h4>\n              <div class=\"space-y-2\">\n                <button \n                  *ngIf=\"canApprove()\" \n                  (click)=\"openApprovalDialog()\"\n                  class=\"btn btn-success btn-sm w-full\">\n                  <mat-icon class=\"text-sm\">check_circle</mat-icon>\n                  Approve Changes\n                </button>\n                <button class=\"btn btn-outline btn-sm w-full\">\n                  <mat-icon class=\"text-sm\">visibility</mat-icon>\n                  View Changes\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <!-- Approval Status List -->\n          <div class=\"border-t pt-4\">\n            <h4 class=\"text-section-header mb-3\">Approval Status</h4>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n              <div *ngFor=\"let approval of pendingRequest.approvals\" \n                   class=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <div class=\"flex items-center gap-3\">\n                  <mat-icon [class]=\"approval.approved ? 'text-green-500' : 'text-gray-400'\">\n                    {{ approval.approved ? 'check_circle' : 'schedule' }}\n                  </mat-icon>\n                  <div>\n                    <p class=\"font-medium text-sm\">{{ approval.userName }}</p>\n                    <p class=\"text-xs text-gray-500\">\n                      {{ approval.approved ? (approval.approvedAt | date:'short') : 'Pending' }}\n                    </p>\n                  </div>\n                </div>\n                <span [class]=\"approval.approved ? 'badge badge-success' : 'badge badge-secondary'\">\n                  {{ approval.approved ? 'Approved' : 'Pending' }}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Main Society Form -->\n      <form [formGroup]=\"societyForm\" class=\"form-container\">\n        \n        <!-- Basic Information Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>business</mat-icon>\n            <span>Basic Information</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-2\">\n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Society Name</label>\n                <input \n                  type=\"text\" \n                  class=\"form-input\"\n                  formControlName=\"name\"\n                  placeholder=\"Enter society name\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Registration Number</label>\n                <input \n                  type=\"text\" \n                  class=\"form-input\"\n                  formControlName=\"registrationNo\"\n                  placeholder=\"Enter registration number\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Address</label>\n                <textarea \n                  class=\"form-textarea\"\n                  formControlName=\"address\"\n                  placeholder=\"Enter complete address\"\n                  [readonly]=\"!isEditing\"\n                  rows=\"3\"></textarea>\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">City</label>\n                <input \n                  type=\"text\" \n                  class=\"form-input\"\n                  formControlName=\"city\"\n                  placeholder=\"Enter city name\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Contact Information Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>contact_phone</mat-icon>\n            <span>Contact Information</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-2\">\n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Phone</label>\n                <input \n                  type=\"tel\" \n                  class=\"form-input\"\n                  formControlName=\"phone\"\n                  placeholder=\"+91 9876543210\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Fax</label>\n                <input \n                  type=\"tel\" \n                  class=\"form-input\"\n                  formControlName=\"fax\"\n                  placeholder=\"+91 2234567890\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label form-label-required\">Email</label>\n                <input \n                  type=\"email\" \n                  class=\"form-input\"\n                  formControlName=\"email\"\n                  placeholder=\"info@society.com\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Website</label>\n                <input \n                  type=\"url\" \n                  class=\"form-input\"\n                  formControlName=\"website\"\n                  placeholder=\"www.society.com\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Interest Rates Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>trending_up</mat-icon>\n            <span>Interest Rates (%)</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-3\">\n              <div class=\"form-field\">\n                <label class=\"form-label\">Dividend</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"dividend\"\n                  placeholder=\"8.5\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Overdraft (OD)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"od\"\n                  placeholder=\"12.0\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Current Deposit (CD)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"cd\"\n                  placeholder=\"6.5\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Loan</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"loan\"\n                  placeholder=\"10.0\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Emergency Loan</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"emergencyLoan\"\n                  placeholder=\"15.0\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">LAS</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"las\"\n                  placeholder=\"7.5\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"100\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Financial Limits Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>account_balance</mat-icon>\n            <span>Financial Limits</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-3\">\n              <div class=\"form-field\">\n                <label class=\"form-label\">Share Limit (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"shareLimit\"\n                  placeholder=\"500000\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Loan Limit (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"loanLimit\"\n                  placeholder=\"1000000\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Emergency Loan Limit (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"emergencyLoanLimit\"\n                  placeholder=\"200000\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Additional Settings Section -->\n        <div class=\"form-section\">\n          <div class=\"form-section-header\">\n            <mat-icon>settings</mat-icon>\n            <span>Additional Settings</span>\n          </div>\n          <div class=\"form-section-content\">\n            <div class=\"form-grid form-grid-4\">\n              <div class=\"form-field\">\n                <label class=\"form-label\">Cheque Bounce Charge (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"chBounceCharge\"\n                  placeholder=\"500\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Cheque Return Charge</label>\n                <select class=\"form-select\" formControlName=\"chequeReturnCharge\" [disabled]=\"!isEditing\">\n                  <option value=\"fixed\">Fixed Amount</option>\n                  <option value=\"percentage\">Percentage</option>\n                </select>\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Cash (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"cash\"\n                  placeholder=\"1000\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n              \n              <div class=\"form-field\">\n                <label class=\"form-label\">Bonus (‚Çπ)</label>\n                <input \n                  type=\"number\" \n                  class=\"form-input\"\n                  formControlName=\"bonus\"\n                  placeholder=\"2500\"\n                  min=\"0\"\n                  [readonly]=\"!isEditing\">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Form Actions -->\n        <div class=\"card-actions\">\n          <div class=\"flex justify-end gap-3\">\n            <button \n              *ngIf=\"!isEditing\" \n              type=\"button\"\n              (click)=\"enableEdit()\"\n              class=\"btn btn-primary\">\n              <mat-icon>edit</mat-icon>\n              Edit Society Details\n            </button>\n            \n            <div *ngIf=\"isEditing\" class=\"flex gap-3\">\n              <button \n                type=\"button\"\n                (click)=\"cancelEdit()\"\n                class=\"btn btn-secondary\">\n                <mat-icon>close</mat-icon>\n                Cancel\n              </button>\n              <button \n                type=\"button\"\n                (click)=\"saveChanges()\"\n                [disabled]=\"societyForm.invalid\"\n                class=\"btn btn-success\">\n                <mat-icon>save</mat-icon>\n                Save Changes\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  `,\n  styles: [`\n    .content-header {\n      margin-bottom: 2rem;\n      padding-bottom: 1rem;\n      border-bottom: 1px solid var(--color-border-primary);\n    }\n\n    .breadcrumb {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n      font-size: 0.875rem;\n      color: var(--color-text-muted);\n    }\n\n    .breadcrumb-separator {\n      font-size: 1rem;\n      color: var(--color-text-light);\n    }\n\n    .breadcrumb-active {\n      color: var(--color-text-primary);\n      font-weight: 500;\n    }\n\n    .border-l-4 {\n      border-left-width: 4px;\n    }\n\n    .border-l-orange-400 {\n      border-left-color: #fb923c;\n    }\n\n    .grid {\n      display: grid;\n    }\n\n    .grid-cols-1 {\n      grid-template-columns: repeat(1, minmax(0, 1fr));\n    }\n\n    .grid-cols-2 {\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n    }\n\n    .grid-cols-3 {\n      grid-template-columns: repeat(3, minmax(0, 1fr));\n    }\n\n    @media (min-width: 768px) {\n      .md\\\\:grid-cols-2 {\n        grid-template-columns: repeat(2, minmax(0, 1fr));\n      }\n    }\n\n    @media (min-width: 1024px) {\n      .lg\\\\:grid-cols-3 {\n        grid-template-columns: repeat(3, minmax(0, 1fr));\n      }\n    }\n\n    .gap-2 { gap: 0.5rem; }\n    .gap-3 { gap: 0.75rem; }\n    .gap-4 { gap: 1rem; }\n    .gap-6 { gap: 1.5rem; }\n\n    .space-y-2 > * + * { margin-top: 0.5rem; }\n    .space-y-3 > * + * { margin-top: 0.75rem; }\n\n    .mb-3 { margin-bottom: 0.75rem; }\n    .mb-4 { margin-bottom: 1rem; }\n    .mb-6 { margin-bottom: 1.5rem; }\n\n    .p-3 { padding: 0.75rem; }\n    .pt-4 { padding-top: 1rem; }\n\n    .w-full { width: 100%; }\n    .h-2 { height: 0.5rem; }\n\n    .bg-gray-50 { background-color: #f9fafb; }\n    .bg-gray-200 { background-color: #e5e7eb; }\n\n    .dark .bg-gray-700 { background-color: #374151; }\n    .dark .bg-gray-800 { background-color: #1f2937; }\n\n    .rounded-full { border-radius: 9999px; }\n    .rounded-lg { border-radius: 0.5rem; }\n\n    .text-xs { font-size: 0.75rem; }\n    .text-sm { font-size: 0.875rem; }\n    .text-lg { font-size: 1.125rem; }\n\n    .font-medium { font-weight: 500; }\n\n    .text-gray-400 { color: #9ca3af; }\n    .text-gray-500 { color: #6b7280; }\n    .text-gray-600 { color: #4b5563; }\n    .text-green-500 { color: #10b981; }\n\n    .transition-all { transition-property: all; }\n    .duration-300 { transition-duration: 300ms; }\n\n    .flex { display: flex; }\n    .items-center { align-items: center; }\n    .justify-between { justify-content: space-between; }\n    .justify-end { justify-content: flex-end; }\n\n    .border-t { border-top: 1px solid var(--color-border-primary); }\n  `]\n})\nexport class SocietyComponent implements OnInit {\n  societyForm: FormGroup;\n  isEditing = false;\n  societyData: SocietyData | null = null;\n  pendingRequest: ApprovalRequest | null = null;\n  currentUser = { id: 'user1', name: 'John Doe', role: 'society_admin' };\n  \n  // Mock users who need to approve\n  approvalUsers: User[] = [\n    { id: 'user1', name: 'John Doe', role: 'society_admin' },\n    { id: 'user2', name: 'Jane Smith', role: 'society_admin' },\n    { id: 'user3', name: 'Bob Wilson', role: 'super_admin' }\n  ];\n\n  constructor(\n    private fb: FormBuilder,\n    private dialog: MatDialog\n  ) {\n    this.societyForm = this.createForm();\n  }\n\n  ngOnInit() {\n    this.loadSocietyData();\n    this.loadPendingRequest();\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      name: ['', Validators.required],\n      registrationNo: ['', Validators.required],\n      address: ['', Validators.required],\n      city: ['', Validators.required],\n      phone: ['', Validators.required],\n      fax: [''],\n      email: ['', [Validators.required, Validators.email]],\n      website: [''],\n      dividend: [0, [Validators.min(0), Validators.max(100)]],\n      od: [0, [Validators.min(0), Validators.max(100)]],\n      cd: [0, [Validators.min(0), Validators.max(100)]],\n      loan: [0, [Validators.min(0), Validators.max(100)]],\n      emergencyLoan: [0, [Validators.min(0), Validators.max(100)]],\n      las: [0, [Validators.min(0), Validators.max(100)]],\n      shareLimit: [0, Validators.min(0)],\n      loanLimit: [0, Validators.min(0)],\n      emergencyLoanLimit: [0, Validators.min(0)],\n      chBounceCharge: [0, Validators.min(0)],\n      chequeReturnCharge: ['fixed'],\n      cash: [0, Validators.min(0)],\n      bonus: [0, Validators.min(0)]\n    });\n  }\n\n  loadSocietyData() {\n    // Mock data - replace with actual API call\n    this.societyData = {\n      id: 'society1',\n      name: 'ABC Housing Society',\n      address: '123 Main Street, Downtown',\n      city: 'Mumbai',\n      phone: '+91 9876543210',\n      fax: '+91 2234567890',\n      email: 'info@abcsociety.com',\n      website: 'www.abcsociety.com',\n      registrationNo: 'REG123456789',\n      interests: {\n        dividend: 8.5,\n        od: 12.0,\n        cd: 6.5,\n        loan: 10.0,\n        emergencyLoan: 15.0,\n        las: 7.5\n      },\n      limits: {\n        share: 500000,\n        loan: 1000000,\n        emergencyLoan: 200000\n      },\n      chBounceCharge: 500,\n      chequeReturnCharge: 'fixed',\n      cash: 1000,\n      bonus: 2500\n    };\n\n    this.populateForm();\n  }\n\n  loadPendingRequest() {\n    // Mock pending request - replace with actual API call\n    this.pendingRequest = {\n      id: 'req1',\n      societyId: 'society1',\n      requestedBy: 'John Doe',\n      requestedAt: new Date(),\n      changes: {\n        name: 'ABC Premium Housing Society',\n        interests: { dividend: 9.0, od: 12.0, cd: 7.0, loan: 10.5, emergencyLoan: 15.5, las: 8.0 }\n      },\n      approvals: [\n        { userId: 'user1', userName: 'John Doe', approved: true, approvedAt: new Date() },\n        { userId: 'user2', userName: 'Jane Smith', approved: false },\n        { userId: 'user3', userName: 'Bob Wilson', approved: false }\n      ],\n      totalRequired: 3,\n      status: 'pending'\n    };\n  }\n\n  populateForm() {\n    if (this.societyData) {\n      this.societyForm.patchValue({\n        name: this.societyData.name,\n        registrationNo: this.societyData.registrationNo,\n        address: this.societyData.address,\n        city: this.societyData.city,\n        phone: this.societyData.phone,\n        fax: this.societyData.fax,\n        email: this.societyData.email,\n        website: this.societyData.website,\n        dividend: this.societyData.interests.dividend,\n        od: this.societyData.interests.od,\n        cd: this.societyData.interests.cd,\n        loan: this.societyData.interests.loan,\n        emergencyLoan: this.societyData.interests.emergencyLoan,\n        las: this.societyData.interests.las,\n        shareLimit: this.societyData.limits.share,\n        loanLimit: this.societyData.limits.loan,\n        emergencyLoanLimit: this.societyData.limits.emergencyLoan,\n        chBounceCharge: this.societyData.chBounceCharge,\n        chequeReturnCharge: this.societyData.chequeReturnCharge,\n        cash: this.societyData.cash,\n        bonus: this.societyData.bonus\n      });\n    }\n  }\n\n  enableEdit() {\n    this.isEditing = true;\n  }\n\n  cancelEdit() {\n    this.isEditing = false;\n    this.populateForm(); // Reset form to original values\n  }\n\n  saveChanges() {\n    if (this.societyForm.valid) {\n      // Create approval request\n      const changes = this.societyForm.value;\n      \n      // Simulate creating a new approval request\n      this.pendingRequest = {\n        id: 'req' + Date.now(),\n        societyId: 'society1',\n        requestedBy: this.currentUser.name,\n        requestedAt: new Date(),\n        changes: changes,\n        approvals: this.approvalUsers.map(user => ({\n          userId: user.id,\n          userName: user.name,\n          approved: false\n        })),\n        totalRequired: this.approvalUsers.length,\n        status: 'pending'\n      };\n\n      this.isEditing = false;\n      \n      // Show success message\n      console.log('Changes saved and sent for approval');\n    }\n  }\n\n  getApprovedCount(): number {\n    return this.pendingRequest?.approvals.filter(a => a.approved).length || 0;\n  }\n\n  getPendingCount(): number {\n    return this.pendingRequest?.approvals.filter(a => !a.approved).length || 0;\n  }\n\n  getApprovalProgress(): number {\n    if (!this.pendingRequest) return 0;\n    return (this.getApprovedCount() / this.pendingRequest.totalRequired) * 100;\n  }\n\n  canApprove(): boolean {\n    if (!this.pendingRequest) return false;\n    const userApproval = this.pendingRequest.approvals.find(a => a.userId === this.currentUser.id);\n    return userApproval ? !userApproval.approved : false;\n  }\n\n  openApprovalDialog() {\n    // Implementation for approval dialog\n    console.log('Opening approval dialog...');\n  }\n\n  approveChanges(comments?: string) {\n    if (!this.pendingRequest) return;\n\n    const userApproval = this.pendingRequest.approvals.find(a => a.userId === this.currentUser.id);\n    if (userApproval) {\n      userApproval.approved = true;\n      userApproval.approvedAt = new Date();\n      userApproval.comments = comments;\n\n      // Check if all approvals are complete\n      const allApproved = this.pendingRequest.approvals.every(a => a.approved);\n      if (allApproved) {\n        // Apply changes to society data\n        this.applyPendingChanges();\n        this.pendingRequest = null;\n      }\n    }\n  }\n\n  applyPendingChanges() {\n    if (!this.pendingRequest || !this.societyData) return;\n\n    // Merge pending changes with society data\n    Object.assign(this.societyData, this.pendingRequest.changes);\n    this.populateForm();\n    \n    console.log('All approvals complete. Changes applied successfully!');\n  }\n}\n","size_bytes":27539},"attached_assets/extracted_frontend/fintcs/src/app/components/master/deposit-scheme/deposit-scheme.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\n\ninterface DepositScheme {\n  id: string;\n  name: string;\n  interestRate: number;\n  tenure: number;\n  tenureType: string;\n  minAmount: number;\n  maxAmount: number;\n  status: string;\n}\n\n@Component({\n  selector: 'app-deposit-scheme',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatChipsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatTableModule,\n    MatIconModule\n  ],\n  template: `\n    <div class=\"page-container p-6 space-y-6\">\n      <!-- Header -->\n      <div class=\"relative overflow-hidden rounded-2xl p-6 bg-gradient-to-br from-green-600 via-emerald-600 to-teal-600 text-white shadow-xl\">\n        <div class=\"absolute inset-0 bg-black/10\"></div>\n        <div class=\"relative z-10\">\n          <div class=\"flex items-center space-x-4\">\n            <div class=\"p-3 bg-white/20 rounded-full backdrop-blur-sm\">\n              <mat-icon class=\"text-2xl\">account_balance</mat-icon>\n            </div>\n            <div>\n              <h1 class=\"text-2xl font-bold\">Deposit Scheme Management</h1>\n              <p class=\"text-emerald-100 text-sm\">Configure deposit schemes and interest rates</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Form Section -->\n      <div class=\"form-section\">\n        <div class=\"form-section-header\">\n          <div class=\"flex items-center\">\n            <mat-icon class=\"mr-2\">add_circle</mat-icon>\n            {{isEditing ? 'Edit' : 'Add New'}} Deposit Scheme\n          </div>\n        </div>\n        <div class=\"form-section-content\">\n          <form [formGroup]=\"schemeForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Scheme Name</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"name\" placeholder=\"Enter scheme name\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('name')?.errors?.['required'] && schemeForm.get('name')?.touched\">\n                  Scheme name is required\n                </div>\n              </div>\n              \n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Interest Rate (%)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"interestRate\" type=\"number\" step=\"0.01\" placeholder=\"0.00\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('interestRate')?.errors?.['required'] && schemeForm.get('interestRate')?.touched\">\n                  Interest rate is required\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Tenure</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"tenure\" type=\"number\" placeholder=\"0\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('tenure')?.errors?.['required'] && schemeForm.get('tenure')?.touched\">\n                  Tenure is required\n                </div>\n              </div>\n              \n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Tenure Type</label>\n                <mat-form-field appearance=\"outline\">\n                  <mat-select formControlName=\"tenureType\">\n                    <mat-option value=\"months\">Months</mat-option>\n                    <mat-option value=\"years\">Years</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('tenureType')?.errors?.['required'] && schemeForm.get('tenureType')?.touched\">\n                  Tenure type is required\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Minimum Amount (‚Çπ)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"minAmount\" type=\"number\" placeholder=\"0\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('minAmount')?.errors?.['required'] && schemeForm.get('minAmount')?.touched\">\n                  Minimum amount is required\n                </div>\n              </div>\n              \n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Maximum Amount (‚Çπ)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"maxAmount\" type=\"number\" placeholder=\"0\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('maxAmount')?.errors?.['required'] && schemeForm.get('maxAmount')?.touched\">\n                  Maximum amount is required\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"form-field-group\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Status</label>\n                <mat-form-field appearance=\"outline\">\n                  <mat-select formControlName=\"status\">\n                    <mat-option value=\"Active\">Active</mat-option>\n                    <mat-option value=\"Inactive\">Inactive</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"schemeForm.get('status')?.errors?.['required'] && schemeForm.get('status')?.touched\">\n                  Status is required\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"form-actions\">\n              <button mat-button type=\"button\" (click)=\"resetForm()\" *ngIf=\"isEditing\">\n                Cancel\n              </button>\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"schemeForm.invalid\">\n                <mat-icon class=\"mr-1\">{{isEditing ? 'update' : 'add'}}</mat-icon>\n                {{isEditing ? 'Update' : 'Add'}} Scheme\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <!-- Table Section -->\n      <div class=\"bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 overflow-hidden\">\n        <div class=\"bg-gradient-to-r from-green-600 via-emerald-600 to-teal-600 p-4\">\n          <div class=\"flex items-center space-x-3\">\n            <mat-icon class=\"text-white text-xl\">table_chart</mat-icon>\n            <h3 class=\"text-lg font-semibold text-white\">Deposit Schemes</h3>\n          </div>\n        </div>\n        \n        <div class=\"overflow-x-auto\">\n          <table mat-table [dataSource]=\"schemes\" class=\"w-full\">\n            <ng-container matColumnDef=\"name\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white font-semibold py-3 px-4 text-left text-sm\">Scheme Name</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">{{scheme.name}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"interestRate\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-emerald-500 to-teal-600 text-white font-semibold py-3 px-4 text-left text-sm\">Interest Rate</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">{{scheme.interestRate}}%</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"tenure\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-teal-500 to-cyan-600 text-white font-semibold py-3 px-4 text-left text-sm\">Tenure</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">{{scheme.tenure}} {{scheme.tenureType}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"amount\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-semibold py-3 px-4 text-left text-sm\">Amount Range</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">‚Çπ{{scheme.minAmount | number}} - ‚Çπ{{scheme.maxAmount | number}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"status\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-semibold py-3 px-4 text-left text-sm\">Status</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4 text-sm\">\n                <mat-chip class=\"status-chip text-xs\" [class]=\"getStatusClass(scheme.status)\">\n                  {{scheme.status}}\n                </mat-chip>\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"actions\">\n              <th mat-header-cell *matHeaderCellDef class=\"bg-gradient-to-r from-indigo-500 to-purple-600 text-white font-semibold py-3 px-4 text-center text-sm\">Actions</th>\n              <td mat-cell *matCellDef=\"let scheme\" class=\"py-3 px-4\">\n                <div class=\"flex space-x-2 justify-center\">\n                  <button mat-mini-fab color=\"primary\" (click)=\"editScheme(scheme)\" class=\"!w-8 !h-8\">\n                    <mat-icon class=\"text-sm\">edit</mat-icon>\n                  </button>\n                  <button mat-mini-fab color=\"warn\" (click)=\"deleteScheme(scheme.id)\" class=\"!w-8 !h-8\">\n                    <mat-icon class=\"text-sm\">delete</mat-icon>\n                  </button>\n                </div>\n              </td>\n            </ng-container>\n            \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors duration-200\"></tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1200px;\n      margin: 0 auto;\n      animation: fadeIn 0.6s ease-out;\n    }\n    \n    .status-chip {\n      font-weight: 500;\n      border-radius: 16px;\n      padding: 4px 12px;\n      display: inline-flex;\n      align-items: center;\n    }\n    \n    .mat-mdc-table {\n      background: transparent !important;\n    }\n    \n    @keyframes fadeIn {\n      from { opacity: 0; transform: translateY(10px); }\n      to { opacity: 1; transform: translateY(0); }\n    }\n  `]\n})\nexport class DepositSchemeComponent implements OnInit {\n  schemeForm!: FormGroup;\n  isEditing = false;\n  displayedColumns: string[] = ['name', 'interestRate', 'tenure', 'amount', 'status', 'actions'];\n  \n  schemes: DepositScheme[] = [\n    {\n      id: 'DS001',\n      name: 'Regular Savings',\n      interestRate: 7.5,\n      tenure: 12,\n      tenureType: 'months',\n      minAmount: 1000,\n      maxAmount: 100000,\n      status: 'Active'\n    },\n    {\n      id: 'DS002',\n      name: 'Fixed Deposit',\n      interestRate: 8.5,\n      tenure: 2,\n      tenureType: 'years',\n      minAmount: 5000,\n      maxAmount: 500000,\n      status: 'Active'\n    }\n  ];\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n\n  initializeForm() {\n    this.schemeForm = this.fb.group({\n      name: ['', Validators.required],\n      interestRate: ['', [Validators.required, Validators.min(0)]],\n      tenure: ['', [Validators.required, Validators.min(1)]],\n      tenureType: ['', Validators.required],\n      minAmount: ['', [Validators.required, Validators.min(1)]],\n      maxAmount: ['', [Validators.required, Validators.min(1)]],\n      status: ['Active', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    if (this.schemeForm.valid) {\n      console.log('Form submitted:', this.schemeForm.value);\n      this.resetForm();\n    }\n  }\n\n  resetForm() {\n    this.schemeForm.reset();\n    this.schemeForm.patchValue({ status: 'Active' });\n    this.isEditing = false;\n  }\n\n  editScheme(scheme: DepositScheme) {\n    this.isEditing = true;\n    this.schemeForm.patchValue(scheme);\n  }\n\n  deleteScheme(id: string) {\n    this.schemes = this.schemes.filter(scheme => scheme.id !== id);\n  }\n\n  getStatusClass(status: string): string {\n    return status === 'Active' \n      ? 'bg-green-100 text-green-800' \n      : 'bg-red-100 text-red-800';\n  }\n}\n","size_bytes":13307},"attached_assets/extracted_frontend/fintcs/src/app/components/master/interest-master/interest-master.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-interest-master',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Interest Master</h1><mat-card><mat-card-content><p>Interest rate configuration and management.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class InterestMasterComponent {}\n","size_bytes":558},"attached_assets/extracted_frontend/fintcs/src/app/components/master/member-details/member-details.component.css":{"content":"\r\n/* Member Details Component Styles - Matching Loan Receipt Design */\r\n\r\n/* Animation */\r\n.animate-fade-in {\r\n  animation: fadeIn 0.3s ease-in-out;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n/* Form Container */\r\n.form-container {\r\n  width: 100%;\r\n}\r\n\r\n/* Card Styles */\r\n.card {\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);\r\n  border: none;\r\n}\r\n\r\n.card-header {\r\n  padding: 20px 24px;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.card-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card-content {\r\n  padding: 24px;\r\n}\r\n\r\n.card-actions {\r\n  padding: 20px 24px;\r\n  border-top: 1px solid #e5e7eb;\r\n  background-color: #f9fafb;\r\n}\r\n\r\n/* Form Sections */\r\n.form-section {\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.form-section-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin-bottom: 20px;\r\n  font-size: 1.125rem;\r\n  font-weight: 600;\r\n  color: #374151;\r\n  padding-bottom: 8px;\r\n  /* border-bottom: 2px solid #e5e7eb; */\r\n}\r\n\r\n.form-section-content {\r\n  padding: 0 8px;\r\n}\r\n\r\n/* Form Grid */\r\n.form-grid {\r\n  display: grid;\r\n  gap: 20px;\r\n}\r\n\r\n.form-grid-1 {\r\n  grid-template-columns: 1fr;\r\n}\r\n\r\n.form-grid-2 {\r\n  grid-template-columns: repeat(1, minmax(0, 1fr));\r\n}\r\n\r\n.form-grid-3 {\r\n  grid-template-columns: repeat(1, minmax(0, 1fr));\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .form-grid-2 {\r\n    grid-template-columns: repeat(2, minmax(0, 1fr));\r\n  }\r\n  \r\n  .form-grid-3 {\r\n    grid-template-columns: repeat(2, minmax(0, 1fr));\r\n  }\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  .form-grid-3 {\r\n    grid-template-columns: repeat(3, minmax(0, 1fr));\r\n  }\r\n}\r\n\r\n/* Form Fields */\r\n.form-field {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 6px;\r\n}\r\n\r\n.form-label {\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n  color: #374151;\r\n}\r\n\r\n.form-label-required::after {\r\n  content: \" *\";\r\n  color: #ef4444;\r\n}\r\n\r\n.form-input, .form-select {\r\n  padding: 12px 16px;\r\n  border: 2px solid #e5e7eb;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  transition: all 0.2s;\r\n  background-color: white;\r\n}\r\n\r\n.form-input:focus, .form-select:focus {\r\n  outline: none;\r\n  border-color: #3b82f6;\r\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\r\n}\r\n\r\n.form-input[readonly] {\r\n  background-color: #f9fafb;\r\n  color: #6b7280;\r\n}\r\n\r\n.form-error {\r\n  font-size: 0.875rem;\r\n  color: #ef4444;\r\n  margin-top: 4px;\r\n}\r\n\r\n/* Input Group */\r\n.input-group {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.input-group .form-input {\r\n  flex: 1;\r\n}\r\n\r\n/* Table Styles */\r\n.table-container {\r\n  overflow-x: auto;\r\n  margin-top: 24px;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f8fafc;\r\n  padding: 16px;\r\n  text-align: left;\r\n  font-weight: 600;\r\n  color: #374151;\r\n  border-bottom: 1px solid #e5e7eb;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.data-table td {\r\n  padding: 16px;\r\n  border-bottom: 1px solid #f1f5f9;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.data-table tbody tr:hover {\r\n  background-color: #f8fafc;\r\n}\r\n\r\n.data-table tbody tr:last-child td {\r\n  border-bottom: none;\r\n}\r\n\r\n/* Button Styles */\r\n.btn {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 10px 20px;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  text-decoration: none;\r\n  border: 1px solid transparent;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.btn-sm {\r\n  padding: 6px 12px;\r\n  font-size: 0.75rem;\r\n}\r\n\r\n.btn-icon {\r\n  padding: 8px;\r\n  min-width: auto;\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #3b82f6;\r\n  color: white;\r\n  border-color: #3b82f6;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #2563eb;\r\n  border-color: #2563eb;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  background-color: #9ca3af;\r\n  border-color: #9ca3af;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.btn-secondary {\r\n  background-color: #6b7280;\r\n  color: white;\r\n  border-color: #6b7280;\r\n}\r\n\r\n.btn-secondary:hover {\r\n  background-color: #4b5563;\r\n  border-color: #4b5563;\r\n}\r\n\r\n.btn-outline {\r\n  background-color: transparent;\r\n  border-color: #d1d5db;\r\n  color: #374151;\r\n}\r\n\r\n.btn-outline:hover {\r\n  background-color: #f9fafb;\r\n  border-color: #9ca3af;\r\n}\r\n\r\n.btn-danger {\r\n  background-color: #ef4444;\r\n  color: white;\r\n  border-color: #ef4444;\r\n}\r\n\r\n.btn-danger:hover {\r\n  background-color: #dc2626;\r\n  border-color: #dc2626;\r\n}\r\n\r\n.btn-success {\r\n  background-color: #10b981;\r\n  color: white;\r\n  border-color: #10b981;\r\n}\r\n\r\n.btn-success:hover {\r\n  background-color: #059669;\r\n  border-color: #059669;\r\n}\r\n\r\n/* Off-canvas Styles */\r\n.off-canvas-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 998;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n\r\n.off-canvas-overlay.active {\r\n  opacity: 1;\r\n  visibility: visible;\r\n}\r\n\r\n.off-canvas {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  width: 800px;\r\n  max-width: 90vw;\r\n  height: 100vh;\r\n  background: white;\r\n  z-index: 999;\r\n  transform: translateX(100%);\r\n  transition: transform 0.3s ease-in-out;\r\n  box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.off-canvas.active {\r\n  transform: translateX(0);\r\n}\r\n\r\n.off-canvas-header {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  padding: 20px 24px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.off-canvas-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.off-canvas-footer {\r\n  padding: 20px 24px;\r\n  border-top: 1px solid #e5e7eb;\r\n  background: #f9fafb;\r\n  flex-shrink: 0;\r\n}\r\n\r\n/* Breadcrumb */\r\n.breadcrumb {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-bottom: 12px;\r\n  font-size: 0.875rem;\r\n  color: #6b7280;\r\n}\r\n\r\n.breadcrumb-separator {\r\n  font-size: 16px;\r\n  width: 16px;\r\n  height: 16px;\r\n  color: #9ca3af;\r\n}\r\n\r\n.breadcrumb-active {\r\n  color: #374151;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Content Header */\r\n.content-header {\r\n  padding-bottom: 16px;\r\n  border-bottom: 1px solid #e5e7eb;\r\n}\r\n\r\n.text-page-title {\r\n  font-size: 1.875rem;\r\n  font-weight: 700;\r\n  color: #111827;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.text-body {\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* Status Badge */\r\n.px-2 {\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n}\r\n\r\n.py-1 {\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n}\r\n\r\n.rounded-full {\r\n  border-radius: 9999px;\r\n}\r\n\r\n.text-xs {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n.font-medium {\r\n  font-weight: 500;\r\n}\r\n\r\n.bg-green-100 {\r\n  background-color: #dcfce7;\r\n}\r\n\r\n.text-green-800 {\r\n  color: #166534;\r\n}\r\n\r\n.bg-red-100 {\r\n  background-color: #fee2e2;\r\n}\r\n\r\n.text-red-800 {\r\n  color: #991b1b;\r\n}\r\n\r\n/* Avatar */\r\n.w-8 {\r\n  width: 2rem;\r\n}\r\n\r\n.h-8 {\r\n  height: 2rem;\r\n}\r\n\r\n.bg-blue-100 {\r\n  background-color: #dbeafe;\r\n}\r\n\r\n.text-blue-600 {\r\n  color: #2563eb;\r\n}\r\n\r\n.text-sm {\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.space-x-3 > * + * {\r\n  margin-left: 12px;\r\n}\r\n\r\n/* Utility Classes */\r\n.flex {\r\n  display: flex;\r\n}\r\n\r\n.justify-end {\r\n  justify-content: flex-end;\r\n}\r\n\r\n.justify-between {\r\n  justify-content: space-between;\r\n}\r\n\r\n.items-center {\r\n  align-items: center;\r\n}\r\n\r\n.gap-2 {\r\n  gap: 8px;\r\n}\r\n\r\n.gap-3 {\r\n  gap: 12px;\r\n}\r\n\r\n.gap-4 {\r\n  gap: 16px;\r\n}\r\n\r\n.text-4xl {\r\n  font-size: 2.25rem;\r\n}\r\n\r\n.text-6xl {\r\n  font-size: 3.75rem;\r\n}\r\n\r\n.text-lg {\r\n  font-size: 1.125rem;\r\n}\r\n\r\n.text-gray-400 {\r\n  color: #9ca3af;\r\n}\r\n\r\n.text-gray-500 {\r\n  color: #6b7280;\r\n}\r\n\r\n.text-gray-600 {\r\n  color: #4b5563;\r\n}\r\n\r\n.mb-2 {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.mb-4 {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.mb-6 {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.mt-4 {\r\n  margin-top: 16px;\r\n}\r\n\r\n.mt-6 {\r\n  margin-top: 24px;\r\n}\r\n\r\n.p-0 {\r\n  padding: 0;\r\n}\r\n\r\n.p-6 {\r\n  padding: 24px;\r\n}\r\n\r\n.py-8 {\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n}\r\n\r\n.w-80 {\r\n  width: 20rem;\r\n}\r\n\r\n.text-center {\r\n  text-align: center;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .off-canvas {\r\n    width: 100vw;\r\n    max-width: none;\r\n  }\r\n  \r\n  .form-grid-2 {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .form-grid-3 {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .w-80 {\r\n    width: 100%;\r\n  }\r\n  \r\n  .data-table th,\r\n  .data-table td {\r\n    padding: 8px;\r\n    font-size: 0.75rem;\r\n  }\r\n  \r\n  .card-header {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .input-group {\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\n/* Focus states for accessibility */\r\n.btn:focus,\r\n.form-input:focus,\r\n.form-select:focus {\r\n  outline: 2px solid #3b82f6;\r\n  outline-offset: 2px;\r\n}\r\n\r\n/* Loading states */\r\n.btn:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* Smooth transitions */\r\n* {\r\n  transition: background-color 0.2s, border-color 0.2s, color 0.2s;\r\n}\r\n","size_bytes":9034},"attached_assets/extracted_frontend/fintcs/src/app/components/master/member-details/member-details.component.ts":{"content":"\r\nimport { Component, signal, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule, MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MemberService, Member } from '../../../services/member.service';\r\n\r\n@Component({\r\n  selector: 'app-member-details',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule\r\n  ],\r\n  templateUrl: './member-details.component.html',\r\n  styleUrls: ['./member-details.component.css']\r\n})\r\nexport class MemberDetailsComponent implements OnInit {\r\n  memberForm: FormGroup;\r\n  dataSource = new MatTableDataSource<Member>([]);\r\n  displayedColumns: string[] = ['memberNo', 'name', 'mobile', 'status', 'actions'];\r\n  \r\n  // Signals for component state\r\n  private offCanvasOpen = signal(false);\r\n  private editMode = signal(false);\r\n  private currentMember = signal<Member | null>(null);\r\n  private submitting = signal(false);\r\n  \r\n  searchTerm: string = '';\r\n  allMembers: Member[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private memberService: MemberService,\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    this.memberForm = this.createMemberForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadMembers();\r\n  }\r\n\r\n  // Signal getters\r\n  isOffCanvasOpen = () => this.offCanvasOpen();\r\n  isEditMode = () => this.editMode();\r\n  isSubmitting = () => this.submitting();\r\n\r\n  private createMemberForm(): FormGroup {\r\n    return this.fb.group({\r\n      memberNo: ['', Validators.required],\r\n      name: ['', Validators.required],\r\n      fhName: ['', Validators.required],\r\n      dateOfBirth: [''],\r\n      mobile: [''],\r\n      email: ['', Validators.email],\r\n      designation: [''],\r\n      dojJob: [''],\r\n      doRetirement: [''],\r\n      branch: [''],\r\n      dojSociety: [''],\r\n      officeAddress: [''],\r\n      residenceAddress: [''],\r\n      city: [''],\r\n      phoneOffice: [''],\r\n      phoneResidence: [''],\r\n      nominee: [''],\r\n      nomineeRelation: [''],\r\n      shareAmount: [0, [Validators.min(0)]],\r\n      cdAmount: [0, [Validators.min(0)]],\r\n      bankName: [''],\r\n      payableAt: [''],\r\n      accountNo: [''],\r\n      status: ['Active'],\r\n      shareDeduction: [0],\r\n      withdrawal: [0],\r\n      gLoanInstalment: [0],\r\n      eLoanInstalment: [0]\r\n    });\r\n  }\r\n\r\n  loadMembers() {\r\n    this.memberService.getAllMembers().subscribe({\r\n      next: (members) => {\r\n        this.allMembers = members;\r\n        this.dataSource.data = members;\r\n        console.log('Members loaded:', members);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading members:', error);\r\n        this.showSnackBar('Error loading members');\r\n      }\r\n    });\r\n  }\r\n\r\n  onSearch() {\r\n    if (!this.searchTerm.trim()) {\r\n      this.dataSource.data = this.allMembers;\r\n      return;\r\n    }\r\n\r\n    const filtered = this.allMembers.filter(member =>\r\n      member.name?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\r\n      member.memberNo?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\r\n      member.mobile?.includes(this.searchTerm)\r\n    );\r\n    \r\n    this.dataSource.data = filtered;\r\n  }\r\n\r\n  openOffCanvas(mode: 'create' | 'edit', member?: Member) {\r\n    this.editMode.set(mode === 'edit');\r\n    \r\n    if (mode === 'edit' && member) {\r\n      this.currentMember.set(member);\r\n      this.populateForm(member);\r\n    } else {\r\n      this.currentMember.set(null);\r\n      this.memberForm.reset();\r\n      this.memberForm.patchValue({\r\n        shareAmount: 0,\r\n        cdAmount: 0,\r\n        status: 'Active'\r\n      });\r\n    }\r\n    \r\n    this.offCanvasOpen.set(true);\r\n  }\r\n\r\n  closeOffCanvas() {\r\n    this.offCanvasOpen.set(false);\r\n    this.memberForm.reset();\r\n    this.editMode.set(false);\r\n    this.currentMember.set(null);\r\n  }\r\n\r\n  populateForm(member: Member) {\r\n    this.memberForm.patchValue({\r\n      memberNo: member.memberNo,\r\n      name: member.name,\r\n      fhName: member.fhName,\r\n      dateOfBirth: member.dateOfBirth ? new Date(member.dateOfBirth) : null,\r\n      mobile: member.mobile,\r\n      email: member.email,\r\n      designation: member.designation,\r\n      dojJob: member.dojJob ? new Date(member.dojJob) : null,\r\n      doRetirement: member.doRetirement ? new Date(member.doRetirement) : null,\r\n      branch: member.branch,\r\n      dojSociety: member.dojSociety ? new Date(member.dojSociety) : null,\r\n      officeAddress: member.officeAddress,\r\n      residenceAddress: member.residenceAddress,\r\n      city: member.city,\r\n      phoneOffice: member.phoneOffice,\r\n      phoneResidence: member.phoneResidence,\r\n      nominee: member.nominee,\r\n      nomineeRelation: member.nomineeRelation,\r\n      shareAmount: member.shareAmount,\r\n      cdAmount: member.cdAmount,\r\n      bankName: member.bankName,\r\n      payableAt: member.payableAt,\r\n      accountNo: member.accountNo,\r\n      status: member.status,\r\n      shareDeduction: member.shareDeduction,\r\n      withdrawal: member.withdrawal,\r\n      gLoanInstalment: member.gLoanInstalment,\r\n      eLoanInstalment: member.eLoanInstalment\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.memberForm.valid) {\r\n      this.submitting.set(true);\r\n      const formData = { ...this.memberForm.value };\r\n\r\n      if (this.isEditMode()) {\r\n        const currentMember = this.currentMember();\r\n        if (currentMember) {\r\n          this.memberService.updateMember(currentMember.id!, formData).subscribe({\r\n            next: () => {\r\n              this.showSnackBar('Member updated successfully');\r\n              this.loadMembers();\r\n              this.closeOffCanvas();\r\n            },\r\n            error: (error) => {\r\n              console.error('Error updating member:', error);\r\n              this.showSnackBar('Error updating member');\r\n            },\r\n            complete: () => this.submitting.set(false)\r\n          });\r\n        }\r\n      } else {\r\n        this.memberService.createMember(formData).subscribe({\r\n          next: () => {\r\n            this.showSnackBar('Member created successfully');\r\n            this.loadMembers();\r\n            this.closeOffCanvas();\r\n          },\r\n          error: (error) => {\r\n            console.error('Error creating member:', error);\r\n            this.showSnackBar('Error creating member');\r\n          },\r\n          complete: () => this.submitting.set(false)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  onView(member: Member) {\r\n    console.log('Viewing member:', member);\r\n    // Implement view logic - could open a read-only modal\r\n  }\r\n\r\n  onEdit(member: Member) {\r\n    this.openOffCanvas('edit', member);\r\n  }\r\n\r\n  onDelete(member: Member) {\r\n    if (confirm(`Are you sure you want to delete member ${member.name}?`)) {\r\n      this.memberService.deleteMember(member.id!).subscribe({\r\n        next: () => {\r\n          this.showSnackBar('Member deleted successfully');\r\n          this.loadMembers();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error deleting member:', error);\r\n          this.showSnackBar('Error deleting member');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private showSnackBar(message: string) {\r\n    this.snackBar.open(message, 'Close', {\r\n      duration: 3000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'top'\r\n    });\r\n  }\r\n}\r\n","size_bytes":8373},"attached_assets/extracted_frontend/fintcs/src/app/components/master/table/table.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\n\n@Component({\n  selector: 'app-table',\n  standalone: true,\n  imports: [CommonModule, MatCardModule, MatIconModule, MatButtonModule],\n  template: `\n    <div class=\"space-y-6\">\n      <!-- Page Header -->\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-200 dark:border-gray-700\">\n        <div class=\"flex items-center space-x-3 mb-4\">\n          <div class=\"p-3 bg-primary-100 dark:bg-primary-900/30 rounded-full\">\n            <mat-icon class=\"text-primary-600 dark:text-primary-400\">table_chart</mat-icon>\n          </div>\n          <div>\n            <h1 class=\"text-3xl font-bold text-gray-900 dark:text-white\">Table Management</h1>\n            <p class=\"text-gray-600 dark:text-gray-400\">Data table configuration and management</p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Content Card -->\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n        <div class=\"p-6\">\n          <div class=\"text-center py-12\">\n            <mat-icon class=\"text-6xl text-gray-400 dark:text-gray-500 mb-4\">table_view</mat-icon>\n            <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Table Configuration</h3>\n            <p class=\"text-gray-500 dark:text-gray-400 mb-6\">Data table configuration and management tools will be available here.</p>\n            <button class=\"inline-flex items-center px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white font-medium rounded-lg shadow-sm transition-colors duration-200\">\n              <mat-icon class=\"mr-2\">add</mat-icon>\n              Create Table\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: block;\n    }\n  `]\n})\nexport class TableComponent {}\n","size_bytes":2055},"attached_assets/extracted_frontend/fintcs/src/app/components/reports/closing-balance/closing-balance.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-closing-balance',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Closing Balance Report</h1><mat-card><mat-card-content><p>Closing balance reports.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class ClosingBalanceComponent {}\n","size_bytes":546},"attached_assets/extracted_frontend/fintcs/src/app/components/reports/employees/employees.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\nimport { FormsModule } from '@angular/forms';\n\ninterface Employee {\n  id: number;\n  employeeId: string;\n  name: string;\n  designation: string;\n  department: string;\n  joinDate: string;\n  salary: number;\n  status: string;\n  phone: string;\n  email: string;\n}\n\n@Component({\n  selector: 'app-employees',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatSelectModule,\n    MatSnackBarModule\n  ],\n  template: `\n    <div class=\"page-container\">\n      <h1>Employee Reports</h1>\n      \n      <!-- Filters -->\n      <mat-card class=\"filter-card\">\n        <mat-card-header>\n          <mat-card-title>Report Filters</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"filter-row\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Department</mat-label>\n              <mat-select [(value)]=\"selectedDepartment\" (selectionChange)=\"applyFilters()\">\n                <mat-option value=\"\">All Departments</mat-option>\n                <mat-option value=\"Administration\">Administration</mat-option>\n                <mat-option value=\"Finance\">Finance</mat-option>\n                <mat-option value=\"Operations\">Operations</mat-option>\n                <mat-option value=\"IT\">IT</mat-option>\n              </mat-select>\n            </mat-form-field>\n            \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Status</mat-label>\n              <mat-select [(value)]=\"selectedStatus\" (selectionChange)=\"applyFilters()\">\n                <mat-option value=\"\">All Status</mat-option>\n                <mat-option value=\"Active\">Active</mat-option>\n                <mat-option value=\"Inactive\">Inactive</mat-option>\n                <mat-option value=\"On Leave\">On Leave</mat-option>\n              </mat-select>\n            </mat-form-field>\n            \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Search Employee</mat-label>\n              <input matInput [(ngModel)]=\"searchTerm\" (input)=\"applyFilters()\" placeholder=\"Name or ID\">\n            </mat-form-field>\n            \n            <button mat-raised-button color=\"primary\" (click)=\"resetFilters()\">\n              <mat-icon>refresh</mat-icon>\n              Reset\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Export Actions -->\n      <mat-card class=\"actions-card\">\n        <mat-card-content>\n          <div class=\"export-actions\">\n            <button mat-raised-button color=\"accent\" (click)=\"exportToExcel()\">\n              <mat-icon>file_download</mat-icon>\n              Export to Excel\n            </button>\n            <button mat-raised-button color=\"accent\" (click)=\"exportToCSV()\">\n              <mat-icon>file_download</mat-icon>\n              Export to CSV\n            </button>\n            <button mat-raised-button color=\"primary\" (click)=\"printReport()\">\n              <mat-icon>print</mat-icon>\n              Print Report\n            </button>\n            <button mat-raised-button color=\"warn\" (click)=\"exportToPDF()\">\n              <mat-icon>picture_as_pdf</mat-icon>\n              Export to PDF\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      \n      <!-- Summary Stats -->\n      <div class=\"stats-grid\">\n        <mat-card class=\"stat-card\">\n          <mat-card-content>\n            <div class=\"stat-number\">{{filteredEmployees.length}}</div>\n            <div class=\"stat-label\">Total Employees</div>\n          </mat-card-content>\n        </mat-card>\n        \n        <mat-card class=\"stat-card\">\n          <mat-card-content>\n            <div class=\"stat-number\">{{getActiveCount()}}</div>\n            <div class=\"stat-label\">Active Employees</div>\n          </mat-card-content>\n        </mat-card>\n        \n        <mat-card class=\"stat-card\">\n          <mat-card-content>\n            <div class=\"stat-number\">‚Çπ{{getTotalSalary() | number}}</div>\n            <div class=\"stat-label\">Total Salary</div>\n          </mat-card-content>\n        </mat-card>\n        \n        <mat-card class=\"stat-card\">\n          <mat-card-content>\n            <div class=\"stat-number\">{{getAverageSalary() | number}}</div>\n            <div class=\"stat-label\">Average Salary</div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n      \n      <!-- Employees Table -->\n      <mat-card class=\"table-card\">\n        <mat-card-header>\n          <mat-card-title>Employee List ({{filteredEmployees.length}} records)</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <table mat-table [dataSource]=\"filteredEmployees\" class=\"mat-elevation-z2\">\n            <ng-container matColumnDef=\"employeeId\">\n              <th mat-header-cell *matHeaderCellDef>Employee ID</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.employeeId}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"name\">\n              <th mat-header-cell *matHeaderCellDef>Name</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.name}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"designation\">\n              <th mat-header-cell *matHeaderCellDef>Designation</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.designation}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"department\">\n              <th mat-header-cell *matHeaderCellDef>Department</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.department}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"joinDate\">\n              <th mat-header-cell *matHeaderCellDef>Join Date</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.joinDate | date}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"salary\">\n              <th mat-header-cell *matHeaderCellDef>Salary</th>\n              <td mat-cell *matCellDef=\"let employee\">‚Çπ{{employee.salary | number}}</td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"status\">\n              <th mat-header-cell *matHeaderCellDef>Status</th>\n              <td mat-cell *matCellDef=\"let employee\">\n                <span [class]=\"'status-' + employee.status.toLowerCase().replace(' ', '-')\">\n                  {{employee.status}}\n                </span>\n              </td>\n            </ng-container>\n            \n            <ng-container matColumnDef=\"contact\">\n              <th mat-header-cell *matHeaderCellDef>Contact</th>\n              <td mat-cell *matCellDef=\"let employee\">\n                <div>{{employee.phone}}</div>\n                <div class=\"email\">{{employee.email}}</div>\n              </td>\n            </ng-container>\n            \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .filter-card, .actions-card, .table-card {\n      margin-bottom: 20px;\n    }\n    \n    .filter-row {\n      display: flex;\n      gap: 16px;\n      align-items: flex-end;\n    }\n    \n    .filter-row mat-form-field {\n      flex: 1;\n    }\n    \n    .export-actions {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n    }\n    \n    .stats-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 16px;\n      margin-bottom: 20px;\n    }\n    \n    .stat-card {\n      text-align: center;\n    }\n    \n    .stat-number {\n      font-size: 2em;\n      font-weight: bold;\n      color: #1976d2;\n    }\n    \n    .stat-label {\n      color: #666;\n      margin-top: 8px;\n    }\n    \n    table {\n      width: 100%;\n    }\n    \n    .email {\n      font-size: 0.8em;\n      color: #666;\n    }\n    \n    .status-active {\n      color: green;\n      font-weight: bold;\n    }\n    \n    .status-inactive {\n      color: red;\n      font-weight: bold;\n    }\n    \n    .status-on-leave {\n      color: orange;\n      font-weight: bold;\n    }\n  `]\n})\nexport class EmployeesComponent implements OnInit {\n  employees: Employee[] = [];\n  filteredEmployees: Employee[] = [];\n  \n  selectedDepartment = '';\n  selectedStatus = '';\n  searchTerm = '';\n  \n  displayedColumns: string[] = ['employeeId', 'name', 'designation', 'department', 'joinDate', 'salary', 'status', 'contact'];\n\n  constructor(private snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.loadSampleData();\n    this.applyFilters();\n  }\n\n  loadSampleData() {\n    this.employees = [\n      {\n        id: 1,\n        employeeId: 'EMP001',\n        name: 'John Smith',\n        designation: 'Branch Manager',\n        department: 'Administration',\n        joinDate: '2022-01-15',\n        salary: 75000,\n        status: 'Active',\n        phone: '9876543210',\n        email: 'john.smith@company.com'\n      },\n      {\n        id: 2,\n        employeeId: 'EMP002',\n        name: 'Sarah Johnson',\n        designation: 'Accountant',\n        department: 'Finance',\n        joinDate: '2022-03-20',\n        salary: 45000,\n        status: 'Active',\n        phone: '9876543211',\n        email: 'sarah.johnson@company.com'\n      },\n      {\n        id: 3,\n        employeeId: 'EMP003',\n        name: 'Michael Brown',\n        designation: 'Operations Officer',\n        department: 'Operations',\n        joinDate: '2023-06-10',\n        salary: 35000,\n        status: 'On Leave',\n        phone: '9876543212',\n        email: 'michael.brown@company.com'\n      },\n      {\n        id: 4,\n        employeeId: 'EMP004',\n        name: 'Emily Davis',\n        designation: 'IT Support',\n        department: 'IT',\n        joinDate: '2023-01-05',\n        salary: 40000,\n        status: 'Active',\n        phone: '9876543213',\n        email: 'emily.davis@company.com'\n      },\n      {\n        id: 5,\n        employeeId: 'EMP005',\n        name: 'David Wilson',\n        designation: 'Cashier',\n        department: 'Operations',\n        joinDate: '2021-11-12',\n        salary: 25000,\n        status: 'Inactive',\n        phone: '9876543214',\n        email: 'david.wilson@company.com'\n      }\n    ];\n  }\n\n  applyFilters() {\n    this.filteredEmployees = this.employees.filter(employee => {\n      const matchesDepartment = !this.selectedDepartment || employee.department === this.selectedDepartment;\n      const matchesStatus = !this.selectedStatus || employee.status === this.selectedStatus;\n      const matchesSearch = !this.searchTerm || \n        employee.name.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n        employee.employeeId.toLowerCase().includes(this.searchTerm.toLowerCase());\n      \n      return matchesDepartment && matchesStatus && matchesSearch;\n    });\n  }\n\n  resetFilters() {\n    this.selectedDepartment = '';\n    this.selectedStatus = '';\n    this.searchTerm = '';\n    this.applyFilters();\n  }\n\n  getActiveCount(): number {\n    return this.filteredEmployees.filter(emp => emp.status === 'Active').length;\n  }\n\n  getTotalSalary(): number {\n    return this.filteredEmployees.reduce((total, emp) => total + emp.salary, 0);\n  }\n\n  getAverageSalary(): number {\n    return this.filteredEmployees.length > 0 ? this.getTotalSalary() / this.filteredEmployees.length : 0;\n  }\n\n  exportToExcel() {\n    this.snackBar.open('Exporting employee report to Excel...', 'Close', { duration: 3000 });\n    // Simulate Excel export\n    this.downloadFile('employees-report.xlsx', 'excel');\n  }\n\n  exportToCSV() {\n    this.snackBar.open('Exporting employee report to CSV...', 'Close', { duration: 3000 });\n    // Simulate CSV export\n    const csvContent = this.convertToCSV(this.filteredEmployees);\n    this.downloadFile('employees-report.csv', 'csv', csvContent);\n  }\n\n  exportToPDF() {\n    this.snackBar.open('Exporting employee report to PDF...', 'Close', { duration: 3000 });\n    // Simulate PDF export\n    this.downloadFile('employees-report.pdf', 'pdf');\n  }\n\n  printReport() {\n    this.snackBar.open('Printing employee report...', 'Close', { duration: 3000 });\n    // Simulate print functionality\n    window.print();\n  }\n\n  private convertToCSV(data: Employee[]): string {\n    const headers = ['Employee ID', 'Name', 'Designation', 'Department', 'Join Date', 'Salary', 'Status', 'Phone', 'Email'];\n    const csvRows = [headers.join(',')];\n    \n    data.forEach(emp => {\n      const row = [\n        emp.employeeId,\n        emp.name,\n        emp.designation,\n        emp.department,\n        emp.joinDate,\n        emp.salary.toString(),\n        emp.status,\n        emp.phone,\n        emp.email\n      ];\n      csvRows.push(row.join(','));\n    });\n    \n    return csvRows.join('\\n');\n  }\n\n  private downloadFile(filename: string, type: string, content?: string) {\n    // Simulate file download\n    console.log(`Downloading ${filename} as ${type}`);\n    if (content) {\n      console.log('File content:', content);\n    }\n  }\n}\n","size_bytes":13760},"attached_assets/extracted_frontend/fintcs/src/app/components/reports/loan/loan.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-loan-report',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Loan Reports</h1><mat-card><mat-card-content><p>Loan reports and analytics.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class LoanReportComponent {}\n","size_bytes":531},"attached_assets/extracted_frontend/fintcs/src/app/components/reports/opening-balance/opening-balance.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-opening-balance',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Opening Balance Report</h1><mat-card><mat-card-content><p>Opening balance reports.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class OpeningBalanceComponent {}\n","size_bytes":546},"attached_assets/extracted_frontend/fintcs/src/app/components/reports/voucher/voucher.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-voucher-report',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Voucher Reports</h1><mat-card><mat-card-content><p>Voucher reports and analysis.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class VoucherReportComponent {}\n","size_bytes":542},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/account-closure/account-closure.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-account-closure',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Account Closure</h1><mat-card><mat-card-content><p>Account closure processing.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class AccountClosureComponent {}\n","size_bytes":542},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/demand-process/demand-process.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-demand-process',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Demand Process</h1><mat-card><mat-card-content><p>Demand processing functionality.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DemandProcessComponent {}\n","size_bytes":544},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/deposit-payment/deposit-payment.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-deposit-payment',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Deposit Payment</h1><mat-card><mat-card-content><p>Deposit payment processing.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DepositPaymentComponent {}\n","size_bytes":542},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/deposit-receipt/deposit-receipt.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-deposit-receipt',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatButtonModule,\n    MatIconModule\n  ],\n  template: `\n    <div class=\"page-container p-6 space-y-6\">\n      <!-- Header -->\n      <div class=\"relative overflow-hidden rounded-2xl p-6 bg-gradient-to-br from-blue-600 via-cyan-600 to-teal-600 text-white shadow-xl\">\n        <div class=\"absolute inset-0 bg-black/10\"></div>\n        <div class=\"relative z-10\">\n          <div class=\"flex items-center space-x-4\">\n            <div class=\"p-3 bg-white/20 rounded-full backdrop-blur-sm\">\n              <mat-icon class=\"text-2xl\">receipt</mat-icon>\n            </div>\n            <div>\n              <h1 class=\"text-2xl font-bold\">Deposit Receipt</h1>\n              <p class=\"text-cyan-100 text-sm\">Create new deposit receipt transaction</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Member Information Section -->\n      <div class=\"form-section\">\n        <div class=\"form-section-header\">\n          <div class=\"flex items-center\">\n            <mat-icon class=\"mr-2\">person</mat-icon>\n            Member Information\n          </div>\n        </div>\n        <div class=\"form-section-content\">\n          <form [formGroup]=\"depositForm\">\n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Member ID</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"memberId\" placeholder=\"Enter member ID\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('memberId')?.errors?.['required'] && depositForm.get('memberId')?.touched\">\n                  Member ID is required\n                </div>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Member Name</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"memberName\" readonly>\n                </mat-form-field>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <!-- Deposit Details Section -->\n      <div class=\"form-section\">\n        <div class=\"form-section-header\">\n          <div class=\"flex items-center\">\n            <mat-icon class=\"mr-2\">account_balance_wallet</mat-icon>\n            Deposit Details\n          </div>\n        </div>\n        <div class=\"form-section-content\">\n          <form [formGroup]=\"depositForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Deposit Type</label>\n                <mat-form-field appearance=\"outline\">\n                  <mat-select formControlName=\"depositType\">\n                    <mat-option value=\"fixed\">Fixed Deposit</mat-option>\n                    <mat-option value=\"recurring\">Recurring Deposit</mat-option>\n                    <mat-option value=\"savings\">Savings Account</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('depositType')?.errors?.['required'] && depositForm.get('depositType')?.touched\">\n                  Deposit type is required\n                </div>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Amount (‚Çπ)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput type=\"number\" formControlName=\"amount\" (blur)=\"calculateMaturity()\" min=\"1000\" placeholder=\"0.00\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('amount')?.errors?.['required'] && depositForm.get('amount')?.touched\">\n                  Amount is required\n                </div>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('amount')?.errors?.['min'] && depositForm.get('amount')?.touched\">\n                  Minimum amount is ‚Çπ1,000\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-field-group three-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Interest Rate (%)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput type=\"number\" formControlName=\"interestRate\" readonly>\n                </mat-form-field>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Maturity Date</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput [matDatepicker]=\"mpicker\" formControlName=\"maturityDate\" readonly>\n                  <mat-datepicker-toggle matIconSuffix [for]=\"mpicker\"></mat-datepicker-toggle>\n                  <mat-datepicker #mpicker></mat-datepicker>\n                </mat-form-field>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Maturity Amount (‚Çπ)</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput type=\"number\" formControlName=\"maturityAmount\" readonly>\n                </mat-form-field>\n              </div>\n            </div>\n\n            <div class=\"form-field-group two-column\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Nominee</label>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput formControlName=\"nominee\" placeholder=\"Enter nominee name\">\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('nominee')?.errors?.['required'] && depositForm.get('nominee')?.touched\">\n                  Nominee is required\n                </div>\n              </div>\n\n              <div class=\"form-field-container\">\n                <label class=\"form-label required\">Status</label>\n                <mat-form-field appearance=\"outline\">\n                  <mat-select formControlName=\"status\">\n                    <mat-option value=\"Active\">Active</mat-option>\n                    <mat-option value=\"Matured\">Matured</mat-option>\n                    <mat-option value=\"Closed\">Closed</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <div class=\"form-error\" *ngIf=\"depositForm.get('status')?.errors?.['required'] && depositForm.get('status')?.touched\">\n                  Status is required\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-field-group\">\n              <div class=\"form-field-container\">\n                <label class=\"form-label\">Remarks</label>\n                <mat-form-field appearance=\"outline\">\n                  <textarea matInput formControlName=\"remarks\" rows=\"3\" placeholder=\"Enter any additional remarks\"></textarea>\n                </mat-form-field>\n              </div>\n            </div>\n\n            <div class=\"form-actions\">\n              <button mat-button type=\"button\" (click)=\"resetForm()\">\n                <mat-icon class=\"mr-1\">clear</mat-icon>\n                Clear\n              </button>\n              <button mat-button type=\"button\">\n                <mat-icon class=\"mr-1\">print</mat-icon>\n                Print Receipt\n              </button>\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"depositForm.invalid\">\n                <mat-icon class=\"mr-1\">save</mat-icon>\n                Save Receipt\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .page-container {\n      max-width: 1000px;\n      margin: 0 auto;\n      animation: fadeIn 0.6s ease-out;\n    }\n\n    @keyframes fadeIn {\n      from { opacity: 0; transform: translateY(10px); }\n      to { opacity: 1; transform: translateY(0); }\n    }\n\n    textarea {\n      resize: vertical;\n      min-height: 80px;\n    }\n\n    .form-section {\n      @apply bg-white p-6 rounded-lg shadow-md border border-gray-200;\n    }\n\n    .form-section-header {\n      @apply text-lg font-semibold mb-4 pb-2 border-b border-gray-300 flex items-center text-gray-700;\n    }\n\n    .form-section-content {\n      @apply space-y-6;\n    }\n\n    .form-field-group {\n      @apply grid gap-6;\n    }\n\n    .form-field-group.two-column {\n      @apply grid-cols-1 md:grid-cols-2;\n    }\n\n    .form-field-group.three-column {\n      @apply grid-cols-1 md:grid-cols-3;\n    }\n\n    .form-field-container {\n      @apply flex flex-col;\n    }\n\n    .form-label {\n      @apply block text-sm font-medium text-gray-700 mb-1;\n    }\n\n    .form-label.required::after {\n      content: ' *';\n      color: red;\n    }\n\n    mat-form-field {\n      @apply w-full;\n    }\n\n    .form-error {\n      @apply text-red-500 text-xs mt-1;\n    }\n\n    .form-actions {\n      @apply flex justify-end space-x-4 pt-6 border-t border-gray-200;\n    }\n  `]\n})\nexport class DepositReceiptComponent implements OnInit {\n  depositForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n\n  initializeForm() {\n    this.depositForm = this.fb.group({\n      memberId: ['', Validators.required],\n      memberName: [''],\n      depositType: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(1000)]],\n      interestRate: [{ value: '', disabled: true }],\n      maturityDate: [{ value: '', disabled: true }],\n      maturityAmount: [{ value: '', disabled: true }],\n      nominee: ['', Validators.required],\n      status: ['Active', Validators.required],\n      remarks: ['']\n    });\n  }\n\n  calculateMaturity() {\n    const amount = this.depositForm.get('amount')?.value;\n    const depositType = this.depositForm.get('depositType')?.value;\n\n    if (amount && depositType) {\n      // Mock calculation - in real app, this would call a service\n      let interestRate = 7.5;\n      let maturityMonths = 12;\n\n      switch (depositType) {\n        case 'fixed':\n          interestRate = 8.5;\n          maturityMonths = 24;\n          break;\n        case 'recurring':\n          interestRate = 7.0;\n          maturityMonths = 12;\n          break;\n        case 'savings':\n          interestRate = 4.0;\n          maturityMonths = 0;\n          break;\n      }\n\n      const maturityAmount = amount * (1 + (interestRate / 100) * (maturityMonths / 12));\n      const maturityDate = new Date();\n      maturityDate.setMonth(maturityDate.getMonth() + maturityMonths);\n\n      this.depositForm.patchValue({\n        interestRate: interestRate,\n        maturityDate: maturityDate,\n        maturityAmount: Math.round(maturityAmount)\n      });\n    }\n  }\n\n  onSubmit() {\n    if (this.depositForm.valid) {\n      console.log('Deposit receipt created:', this.depositForm.value);\n      // Here you would typically call a service to save the data\n    }\n  }\n\n  resetForm() {\n    this.depositForm.reset();\n    this.depositForm.patchValue({ status: 'Active' });\n  }\n}","size_bytes":11923},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/deposit-renew/deposit-renew.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-deposit-renew',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Deposit Renew</h1><mat-card><mat-card-content><p>Deposit renewal processing.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DepositRenewComponent {}\n","size_bytes":536},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/deposit-slip/deposit-slip.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-deposit-slip',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Deposit Slip</h1><mat-card><mat-card-content><p>Deposit slip generation and management.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class DepositSlipComponent {}\n","size_bytes":545},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/loan-taken/loan-taken.component.css":{"content":"\n/* Loan Taken Component Styles */\n\n/* Form Container */\n.form-container {\n  width: 100%;\n}\n\n/* Card Styles */\n.card {\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);\n}\n\n.card-header {\n  padding: 20px 24px;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.card-title {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.card-actions {\n  padding: 20px 24px;\n  border-top: 1px solid #e5e7eb;\n  background-color: #f9fafb;\n}\n\n/* Form Sections */\n.form-section {\n  margin-bottom: 32px;\n}\n\n.form-section-header {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 20px;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: white;\n  padding-bottom: 8px;\n  border-bottom: 2px solid #e5e7eb;\n}\n\n.form-section-content {\n  padding: 0 8px;\n}\n\n/* Form Layout */\n.form-row {\n  display: flex;\n  gap: 32px;\n  flex-wrap: wrap;\n}\n\n.form-column {\n  flex: 1;\n  min-width: 300px;\n}\n\n/* Form Grid */\n.form-grid {\n  display: grid;\n  gap: 20px;\n}\n\n.form-grid-2 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n\n.form-grid-3 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n\n@media (min-width: 768px) {\n  .form-grid-2 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n  \n  .form-grid-3 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n\n@media (min-width: 1024px) {\n  .form-grid-3 {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n\n/* Form Fields */\n.form-field {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  margin-bottom: 16px;\n}\n\n.form-label {\n  font-size: 0.875rem;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 4px;\n}\n\n.form-label-required::after {\n  content: \" *\";\n  color: #ef4444;\n}\n\n.form-input, .form-select, .form-textarea {\n  padding: 8px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 0.875rem;\n  transition: border-color 0.2s, box-shadow 0.2s;\n}\n\n.form-input:focus, .form-select:focus, .form-textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.form-input[readonly] {\n  background-color: #f9fafb;\n  color: #6b7280;\n}\n\n.calculation-field {\n  background-color: #f0f9ff !important;\n  border-color: #0ea5e9 !important;\n  font-weight: 600;\n}\n\n.form-error {\n  font-size: 0.75rem;\n  color: #ef4444;\n  margin-top: 4px;\n}\n\n.input-group {\n  display: flex;\n  gap: 8px;\n  align-items: stretch;\n}\n\n.input-group .form-input {\n  flex: 1;\n}\n\n/* Payment Mode */\n.payment-mode-group {\n  display: flex;\n  gap: 24px;\n  margin-bottom: 20px;\n}\n\n.payment-mode-option {\n  margin-right: 16px;\n}\n\n.cheque-details {\n  margin-top: 20px;\n  padding: 16px;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  border: 1px solid #e2e8f0;\n}\n\n/* Tabs */\n.member-tabs {\n  margin-top: 16px;\n}\n\n.tab-content {\n  padding: 20px 0;\n}\n\n.table-container {\n  background: white;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.member-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.member-table th {\n  background-color: #f8fafc;\n  padding: 12px;\n  text-align: left;\n  font-weight: 600;\n  color: #374151;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.member-table td {\n  padding: 12px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.member-table tbody tr:hover {\n  background-color: #f9fafb;\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 0.875rem;\n  font-weight: 500;\n  text-decoration: none;\n  border: 1px solid transparent;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.btn-primary {\n  background-color: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.btn-primary:hover {\n  background-color: #2563eb;\n  border-color: #2563eb;\n}\n\n.btn-secondary {\n  background-color: #6b7280;\n  color: white;\n  border-color: #6b7280;\n}\n\n.btn-secondary:hover {\n  background-color: #4b5563;\n  border-color: #4b5563;\n}\n\n.btn-warning {\n  background-color: #f59e0b;\n  color: white;\n  border-color: #f59e0b;\n}\n\n.btn-warning:hover {\n  background-color: #d97706;\n  border-color: #d97706;\n}\n\n.btn-danger {\n  background-color: #ef4444;\n  color: white;\n  border-color: #ef4444;\n}\n\n.btn-danger:hover {\n  background-color: #dc2626;\n  border-color: #dc2626;\n}\n\n.btn-outline {\n  background-color: transparent;\n  color: #374151;\n  border-color: #d1d5db;\n}\n\n.btn-outline:hover {\n  background-color: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.btn-sm {\n  padding: 4px 8px;\n  font-size: 0.75rem;\n}\n\n/* Utilities */\n.flex {\n  display: flex;\n}\n\n.justify-end {\n  justify-content: flex-end;\n}\n\n.gap-3 {\n  gap: 12px;\n}\n\n.mt-3 {\n  margin-top: 12px;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-gray-500 {\n  color: #6b7280;\n}\n\n/* Dialog Styles */\n.clickable-row {\n  cursor: pointer;\n}\n\n.clickable-row:hover {\n  background-color: #f5f5f5;\n}\n\n.form-label {\n  font-weight: 500;\n  color: #374151;\n  font-size: 0.875rem;\n}\n\n.form-label-required::after {\n  content: \"*\";\n  color: #ef4444;\n  margin-left: 4px;\n}\n\n.form-input, .form-select, .form-textarea {\n  padding: 10px 14px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 0.875rem;\n  transition: border-color 0.15s ease;\n  background-color: white;\n}\n\n.form-input:focus, .form-select:focus, .form-textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.form-input:read-only {\n  background-color: #f9fafb;\n  color: #6b7280;\n}\n\n.calculation-field {\n  background-color: #f0f9ff !important;\n  border-color: #3b82f6 !important;\n  font-weight: 600 !important;\n  color: #1e40af !important;\n}\n\n.form-textarea {\n  resize: vertical;\n  min-height: 80px;\n}\n\n.form-error {\n  color: #ef4444;\n  font-size: 0.75rem;\n  margin-top: 4px;\n}\n\n/* Input Group */\n.input-group {\n  display: flex;\n  gap: 8px;\n  align-items: stretch;\n}\n\n.input-group .form-input {\n  flex: 1;\n}\n\n/* Balance Grid */\n.balance-grid {\n  display: grid;\n  gap: 24px;\n  grid-template-columns: 1fr;\n}\n\n@media (min-width: 768px) {\n  .balance-grid {\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n.balance-column {\n  padding: 20px;\n  border: 2px solid #e5e7eb;\n  border-radius: 8px;\n  background-color: #f9fafb;\n}\n\n.balance-column-title {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #374151;\n  margin-bottom: 16px;\n  text-align: center;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #d1d5db;\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-weight: 500;\n  font-size: 0.875rem;\n  cursor: pointer;\n  transition: all 0.15s ease;\n  border: 1px solid transparent;\n}\n\n.btn-primary {\n  background-color: #3b82f6;\n  color: white;\n}\n\n.btn-primary:hover {\n  background-color: #2563eb;\n}\n\n.btn-secondary {\n  background-color: #6b7280;\n  color: white;\n}\n\n.btn-secondary:hover {\n  background-color: #4b5563;\n}\n\n.btn-outline {\n  background-color: transparent;\n  border-color: #d1d5db;\n  color: #374151;\n}\n\n.btn-outline:hover {\n  background-color: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.btn-outline-light {\n  background-color: rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  color: white;\n}\n\n.btn-outline-light:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n/* Utility Classes */\n.flex {\n  display: flex;\n}\n\n.justify-end {\n  justify-content: flex-end;\n}\n\n.gap-3 {\n  gap: 12px;\n}\n\n.mb-6 {\n  margin-bottom: 24px;\n}\n\n.mt-4 {\n  margin-top: 16px;\n}\n\n.p-6 {\n  padding: 24px;\n}\n\n.p-0 {\n  padding: 0;\n}\n\n/* Breadcrumb */\n.breadcrumb {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 12px;\n  font-size: 0.875rem;\n  color: #6b7280;\n}\n\n.breadcrumb-separator {\n  font-size: 16px;\n  width: 16px;\n  height: 16px;\n  color: #9ca3af;\n}\n\n.breadcrumb-active {\n  color: #374151;\n  font-weight: 500;\n}\n\n/* Content Header */\n.content-header {\n  padding-bottom: 16px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.text-page-title {\n  font-size: 1.875rem;\n  font-weight: 700;\n  color: #111827;\n  margin-bottom: 8px;\n}\n\n.text-body {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n/* Animation */\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n","size_bytes":8300},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/loan-taken/loan-taken.component.ts":{"content":"\nimport { Component, signal, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDialogModule, MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTableDataSource } from '@angular/material/table';\n\ninterface LoanSummary {\n  loanNo: string;\n  loanDate: Date;\n  amount: number;\n  member: string;\n  edpNo: string;\n}\n\ninterface Employee {\n  edpNo: string;\n  memberName: string;\n}\n\ninterface GivenTakenMember {\n  memNo: string;\n  name: string;\n}\n\n@Component({\n  selector: 'app-loan-taken',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatIconModule,\n    MatRadioModule,\n    MatDialogModule,\n    MatTableModule\n  ],\n  template: `\n    <div class=\"animate-fade-in\">\n      <!-- Page Header -->\n      <div class=\"content-header mb-6\">\n        <div class=\"breadcrumb\">\n          <span>Transaction</span>\n          <mat-icon class=\"breadcrumb-separator\">chevron_right</mat-icon>\n          <span class=\"breadcrumb-active\">Loan Taken</span>\n        </div>\n        <h1 class=\"text-page-title\">Loan Entry</h1>\n        <p class=\"text-body text-gray-600 dark:text-gray-400\">Manage loan applications and processing</p>\n      </div>\n\n      <!-- Main Loan Form -->\n      <form class=\"form-container\" [formGroup]=\"loanForm\">\n        <mat-card class=\"card\">\n          <!-- Card Header -->\n          <div class=\"card-header bg-gradient-to-r from-blue-600 to-purple-600\">\n            <div class=\"card-title\">\n              <mat-icon>account_balance</mat-icon>\n              <span>Loan Entry</span>\n            </div>\n          </div>\n\n          <mat-card-content class=\"p-0\">\n            <div class=\"p-6\">\n              <!-- Main Form Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>description</mat-icon>\n                  <span>Loan Information</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-row\">\n                    <!-- Left Column -->\n                    <div class=\"form-column\">\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">Loan Type</label>\n                        <select class=\"form-select\" formControlName=\"loanType\">\n                          <option value=\"\">Select loan type</option>\n                          <option value=\"General\">General Loan</option>\n                          <option value=\"Emergency\">Emergency Loan</option>\n                          <option value=\"Festival\">Festival Loan</option>\n                          <option value=\"Medical\">Medical Loan</option>\n                        </select>\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('loanType')?.invalid && loanForm.get('loanType')?.touched\">\n                          Loan type is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">Loan No.</label>\n                        <div class=\"input-group\">\n                          <input \n                            type=\"text\" \n                            class=\"form-input\"\n                            placeholder=\"Enter loan number\"\n                            formControlName=\"loanNo\">\n                          <button type=\"button\" class=\"btn btn-outline\" (click)=\"openLoanSummary()\">\n                            <mat-icon>search</mat-icon>\n                          </button>\n                        </div>\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('loanNo')?.invalid && loanForm.get('loanNo')?.touched\">\n                          Loan number is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">Loan Date</label>\n                        <input \n                          type=\"date\" \n                          class=\"form-input\"\n                          formControlName=\"loanDate\">\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('loanDate')?.invalid && loanForm.get('loanDate')?.touched\">\n                          Loan date is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">EDP No.</label>\n                        <div class=\"input-group\">\n                          <input \n                            type=\"text\" \n                            class=\"form-input\"\n                            placeholder=\"Enter EDP number\"\n                            formControlName=\"edpNo\">\n                          <button type=\"button\" class=\"btn btn-outline\" (click)=\"openEmployeeSearch()\">\n                            <mat-icon>search</mat-icon>\n                          </button>\n                        </div>\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('edpNo')?.invalid && loanForm.get('edpNo')?.touched\">\n                          EDP number is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Name</label>\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Auto-filled from employee search\"\n                          formControlName=\"name\"\n                          readonly>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">Loan Amount</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Enter loan amount\"\n                          formControlName=\"loanAmount\"\n                          (input)=\"calculateNetLoan()\">\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('loanAmount')?.invalid && loanForm.get('loanAmount')?.touched\">\n                          Loan amount is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Previous Loan (Remaining)</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Previous loan amount\"\n                          formControlName=\"previousLoan\"\n                          (input)=\"calculateNetLoan()\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Net Loan</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input calculation-field\"\n                          placeholder=\"Auto-calculated\"\n                          formControlName=\"netLoan\"\n                          readonly>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label form-label-required\">No. of Inst.</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Number of installments\"\n                          formControlName=\"noOfInstallments\"\n                          (input)=\"calculateInstallmentAmount()\">\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('noOfInstallments')?.invalid && loanForm.get('noOfInstallments')?.touched\">\n                          Number of installments is required\n                        </div>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Inst. Amount</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input calculation-field\"\n                          placeholder=\"Auto-calculated\"\n                          formControlName=\"installmentAmount\"\n                          readonly>\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Purpose</label>\n                        <textarea \n                          class=\"form-textarea\"\n                          placeholder=\"Enter purpose of loan\"\n                          rows=\"3\"\n                          formControlName=\"purpose\"></textarea>\n                      </div>\n\n                      <div class=\"form-field\" *ngIf=\"requiresAuthorization()\">\n                        <label class=\"form-label form-label-required\">Authorized By</label>\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Authorization required\"\n                          formControlName=\"authorizedBy\">\n                        <div class=\"form-error\" *ngIf=\"loanForm.get('authorizedBy')?.invalid && loanForm.get('authorizedBy')?.touched\">\n                          Authorization is required for this loan amount\n                        </div>\n                      </div>\n                    </div>\n\n                    <!-- Right Column -->\n                    <div class=\"form-column\">\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Share</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Share amount\"\n                          formControlName=\"share\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">CD</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"CD amount\"\n                          formControlName=\"cd\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Last Salary</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Last salary\"\n                          formControlName=\"lastSalary\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Share</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Share amount\"\n                          formControlName=\"shareRight\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">CD</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"CD amount\"\n                          formControlName=\"cdRight\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">MWF</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"MWF amount\"\n                          formControlName=\"mwf\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Pay Amount</label>\n                        <input \n                          type=\"number\" \n                          class=\"form-input\"\n                          placeholder=\"Pay amount\"\n                          formControlName=\"payAmount\">\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Payment Mode Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>payment</mat-icon>\n                  <span>Payment Mode</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <mat-radio-group formControlName=\"paymentMode\" class=\"payment-mode-group\">\n                    <mat-radio-button value=\"Cash\" class=\"payment-mode-option\">Cash</mat-radio-button>\n                    <mat-radio-button value=\"Cheque\" class=\"payment-mode-option\">Cheque</mat-radio-button>\n                    <mat-radio-button value=\"Opening\" class=\"payment-mode-option\">Opening</mat-radio-button>\n                  </mat-radio-group>\n\n                  <div class=\"cheque-details\" *ngIf=\"loanForm.get('paymentMode')?.value === 'Cheque'\">\n                    <div class=\"form-grid form-grid-3\">\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Bank Name</label>\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Enter bank name\"\n                          formControlName=\"bankName\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Cheque No.</label>\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Enter cheque number\"\n                          formControlName=\"chequeNo\">\n                      </div>\n\n                      <div class=\"form-field\">\n                        <label class=\"form-label\">Cheque Date</label>\n                        <input \n                          type=\"date\" \n                          class=\"form-input\"\n                          formControlName=\"chequeDate\">\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Tabs Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>swap_horiz</mat-icon>\n                  <span>Given & Taken Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <mat-tab-group class=\"member-tabs\">\n                    <mat-tab label=\"Given\">\n                      <div class=\"tab-content\">\n                        <div class=\"table-container\">\n                          <table class=\"member-table\">\n                            <thead>\n                              <tr>\n                                <th>Mem No</th>\n                                <th>Name</th>\n                                <th>Actions</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr *ngFor=\"let member of givenMembers; let i = index\">\n                                <td>{{member.memNo}}</td>\n                                <td>{{member.name}}</td>\n                                <td>\n                                  <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"removeGivenMember(i)\">\n                                    <mat-icon>delete</mat-icon>\n                                  </button>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"givenMembers.length === 0\">\n                                <td colspan=\"3\" class=\"text-center text-gray-500\">No members added</td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n                        <button type=\"button\" class=\"btn btn-primary mt-3\" (click)=\"addGivenMember()\">\n                          <mat-icon>add</mat-icon>\n                          Add Member\n                        </button>\n                      </div>\n                    </mat-tab>\n\n                    <mat-tab label=\"Taken\">\n                      <div class=\"tab-content\">\n                        <div class=\"table-container\">\n                          <table class=\"member-table\">\n                            <thead>\n                              <tr>\n                                <th>Mem No</th>\n                                <th>Name</th>\n                                <th>Actions</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr *ngFor=\"let member of takenMembers; let i = index\">\n                                <td>{{member.memNo}}</td>\n                                <td>{{member.name}}</td>\n                                <td>\n                                  <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"removeTakenMember(i)\">\n                                    <mat-icon>delete</mat-icon>\n                                  </button>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"takenMembers.length === 0\">\n                                <td colspan=\"3\" class=\"text-center text-gray-500\">No members added</td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n                        <button type=\"button\" class=\"btn btn-primary mt-3\" (click)=\"addTakenMember()\">\n                          <mat-icon>add</mat-icon>\n                          Add Member\n                        </button>\n                      </div>\n                    </mat-tab>\n                  </mat-tab-group>\n                </div>\n              </div>\n              <!-- Loan Basic Details Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>description</mat-icon>\n                  <span>Loan Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-3\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Loan Type</label>\n                      <select class=\"form-select\" formControlName=\"loanType\">\n                        <option value=\"\">Select loan type</option>\n                        <option value=\"General\">General Loan</option>\n                        <option value=\"Emergency\">Emergency Loan</option>\n                        <option value=\"Festival\">Festival Loan</option>\n                        <option value=\"Medical\">Medical Loan</option>\n                      </select>\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('loanType')?.invalid && loanForm.get('loanType')?.touched\">\n                        Loan type is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Loan No.</label>\n                      <input \n                        type=\"text\" \n                        class=\"form-input\"\n                        placeholder=\"Enter loan number\"\n                        formControlName=\"loanNo\">\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('loanNo')?.invalid && loanForm.get('loanNo')?.touched\">\n                        Loan number is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Loan Date</label>\n                      <input \n                        type=\"date\" \n                        class=\"form-input\"\n                        formControlName=\"loanDate\">\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('loanDate')?.invalid && loanForm.get('loanDate')?.touched\">\n                        Loan date is required\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Employee Details Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>person</mat-icon>\n                  <span>Employee Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-2\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">EDP No.</label>\n                      <div class=\"input-group\">\n                        <input \n                          type=\"text\" \n                          class=\"form-input\"\n                          placeholder=\"Enter EDP number\"\n                          formControlName=\"edpNo\">\n                        <button type=\"button\" class=\"btn btn-outline\" (click)=\"openEmployeeSearch()\">\n                          <mat-icon>search</mat-icon>\n                          Search\n                        </button>\n                      </div>\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('edpNo')?.invalid && loanForm.get('edpNo')?.touched\">\n                        EDP number is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Name</label>\n                      <input \n                        type=\"text\" \n                        class=\"form-input\"\n                        placeholder=\"Auto-filled from employee search\"\n                        formControlName=\"name\"\n                        readonly>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Loan Amount Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>payments</mat-icon>\n                  <span>Loan Amount & Terms</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-3\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Loan Amount</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter loan amount\"\n                        formControlName=\"loanAmount\"\n                        (input)=\"calculateNetLoan()\">\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('loanAmount')?.invalid && loanForm.get('loanAmount')?.touched\">\n                        Loan amount is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Previous Loan (Remaining)</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Auto-calculated\"\n                        formControlName=\"previousLoan\"\n                        readonly>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Net Loan</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input calculation-field\"\n                        placeholder=\"Auto-calculated\"\n                        formControlName=\"netLoan\"\n                        readonly>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">No. of Installments</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter number of installments\"\n                        formControlName=\"noOfInstallments\"\n                        (input)=\"calculateInstallmentAmount()\">\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('noOfInstallments')?.invalid && loanForm.get('noOfInstallments')?.touched\">\n                        Number of installments is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Installment Amount</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input calculation-field\"\n                        placeholder=\"Auto-calculated\"\n                        formControlName=\"installmentAmount\"\n                        readonly>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Last Salary</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter last salary\"\n                        formControlName=\"lastSalary\">\n                    </div>\n                  </div>\n\n                  <div class=\"form-field mt-4\">\n                    <label class=\"form-label\">Purpose</label>\n                    <textarea \n                      class=\"form-textarea\"\n                      placeholder=\"Enter purpose of loan\"\n                      rows=\"3\"\n                      formControlName=\"purpose\"></textarea>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Balance Information Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>account_balance_wallet</mat-icon>\n                  <span>Balance Information</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"balance-grid\">\n                    <div class=\"balance-column\">\n                      <h4 class=\"balance-column-title\">Current Balance</h4>\n                      <div class=\"form-grid form-grid-2\">\n                        <div class=\"form-field\">\n                          <label class=\"form-label\">Share</label>\n                          <input \n                            type=\"number\" \n                            class=\"form-input\"\n                            placeholder=\"Current share\"\n                            formControlName=\"shareLeft\">\n                        </div>\n                        <div class=\"form-field\">\n                          <label class=\"form-label\">CD (Credit Deposit)</label>\n                          <input \n                            type=\"number\" \n                            class=\"form-input\"\n                            placeholder=\"Current CD\"\n                            formControlName=\"cdLeft\">\n                        </div>\n                      </div>\n                    </div>\n\n                    <div class=\"balance-column\">\n                      <h4 class=\"balance-column-title\">After Loan</h4>\n                      <div class=\"form-grid form-grid-2\">\n                        <div class=\"form-field\">\n                          <label class=\"form-label\">Share</label>\n                          <input \n                            type=\"number\" \n                            class=\"form-input\"\n                            placeholder=\"Remaining share\"\n                            formControlName=\"shareRight\">\n                        </div>\n                        <div class=\"form-field\">\n                          <label class=\"form-label\">CD</label>\n                          <input \n                            type=\"number\" \n                            class=\"form-input\"\n                            placeholder=\"Remaining CD\"\n                            formControlName=\"cdRight\">\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div class=\"form-grid form-grid-2 mt-4\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">MWF</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter MWF amount\"\n                        formControlName=\"mwf\">\n                    </div>\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Pay Amount</label>\n                      <input \n                        type=\"number\" \n                        class=\"form-input\"\n                        placeholder=\"Enter pay amount\"\n                        formControlName=\"payAmount\">\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Authorization Section -->\n              <div class=\"form-section\" *ngIf=\"requiresAuthorization()\">\n                <div class=\"form-section-header\">\n                  <mat-icon>verified</mat-icon>\n                  <span>Authorization</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-field\">\n                    <label class=\"form-label form-label-required\">Authorized By</label>\n                    <select class=\"form-select\" formControlName=\"authorizedBy\">\n                      <option value=\"\">Select authorizing officer</option>\n                      <option value=\"Manager\">Manager</option>\n                      <option value=\"Assistant Manager\">Assistant Manager</option>\n                      <option value=\"President\">President</option>\n                      <option value=\"Secretary\">Secretary</option>\n                    </select>\n                    <div class=\"form-error\" *ngIf=\"loanForm.get('authorizedBy')?.invalid && loanForm.get('authorizedBy')?.touched\">\n                      Authorization is required for this loan amount\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Payment Details Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>payment</mat-icon>\n                  <span>Payment Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-3\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label form-label-required\">Payment Mode</label>\n                      <select class=\"form-select\" formControlName=\"paymentMode\">\n                        <option value=\"\">Select payment mode</option>\n                        <option value=\"Cash\">Cash</option>\n                        <option value=\"Cheque\">Cheque</option>\n                        <option value=\"Bank Transfer\">Bank Transfer</option>\n                      </select>\n                      <div class=\"form-error\" *ngIf=\"loanForm.get('paymentMode')?.invalid && loanForm.get('paymentMode')?.touched\">\n                        Payment mode is required\n                      </div>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Bank</label>\n                      <input \n                        type=\"text\" \n                        class=\"form-input\"\n                        placeholder=\"Enter bank name\"\n                        formControlName=\"bank\">\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Cheque No.</label>\n                      <input \n                        type=\"text\" \n                        class=\"form-input\"\n                        placeholder=\"Enter cheque number\"\n                        formControlName=\"chequeNo\">\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Cheque Date</label>\n                      <input \n                        type=\"date\" \n                        class=\"form-input\"\n                        formControlName=\"chequeDate\">\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Transaction Details Section -->\n              <div class=\"form-section\">\n                <div class=\"form-section-header\">\n                  <mat-icon>swap_horiz</mat-icon>\n                  <span>Transaction Details</span>\n                </div>\n                <div class=\"form-section-content\">\n                  <div class=\"form-grid form-grid-2\">\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Given</label>\n                      <select class=\"form-select\" formControlName=\"given\">\n                        <option value=\"\">Select member</option>\n                        <option value=\"M001 - John Doe\">M001 - John Doe</option>\n                        <option value=\"M002 - Jane Smith\">M002 - Jane Smith</option>\n                        <option value=\"M003 - Mike Johnson\">M003 - Mike Johnson</option>\n                      </select>\n                    </div>\n\n                    <div class=\"form-field\">\n                      <label class=\"form-label\">Taken</label>\n                      <select class=\"form-select\" formControlName=\"taken\">\n                        <option value=\"\">Select member</option>\n                        <option value=\"M001 - John Doe\">M001 - John Doe</option>\n                        <option value=\"M002 - Jane Smith\">M002 - Jane Smith</option>\n                        <option value=\"M003 - Mike Johnson\">M003 - Mike Johnson</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </mat-card-content>\n\n          <!-- Action Buttons -->\n          <div class=\"card-actions\">\n            <div class=\"flex justify-end gap-3\">\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onValidate()\">\n                <mat-icon>check_circle</mat-icon>\n                Validate\n              </button>\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSave()\">\n                <mat-icon>save</mat-icon>\n                Save\n              </button>\n              <button type=\"button\" class=\"btn btn-warning\" (click)=\"onClear()\">\n                <mat-icon>clear</mat-icon>\n                Clear\n              </button>\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onClose()\">\n                <mat-icon>close</mat-icon>\n                Close\n              </button>\n            </div>\n          </div>\n        </mat-card>\n      </form>\n    </div>\n  `,\n  styleUrl: './loan-taken.component.css'\n})\nexport class LoanTakenComponent {\n  loanForm: FormGroup;\n  givenMembers: GivenTakenMember[] = [];\n  takenMembers: GivenTakenMember[] = [];\n  \n  // Sample data\n  loanSummaryData: LoanSummary[] = [\n    { loanNo: 'L001', loanDate: new Date('2024-01-15'), amount: 50000, member: 'John Doe', edpNo: 'EMP001' },\n    { loanNo: 'L002', loanDate: new Date('2024-01-20'), amount: 75000, member: 'Jane Smith', edpNo: 'EMP002' },\n    { loanNo: 'L003', loanDate: new Date('2024-01-25'), amount: 30000, member: 'Mike Johnson', edpNo: 'EMP003' }\n  ];\n\n  employeeData: Employee[] = [\n    { edpNo: 'EMP001', memberName: 'John Doe' },\n    { edpNo: 'EMP002', memberName: 'Jane Smith' },\n    { edpNo: 'EMP003', memberName: 'Mike Johnson' },\n    { edpNo: 'EMP004', memberName: 'Sarah Wilson' },\n    { edpNo: 'EMP005', memberName: 'David Brown' }\n  ];\n\n  constructor(private fb: FormBuilder, private dialog: MatDialog) {\n    this.loanForm = this.fb.group({\n      loanType: ['', Validators.required],\n      loanNo: ['', Validators.required],\n      loanDate: [new Date().toISOString().split('T')[0], Validators.required],\n      edpNo: ['', Validators.required],\n      name: [''],\n      loanAmount: ['', [Validators.required, Validators.min(1)]],\n      previousLoan: [0],\n      netLoan: [0],\n      noOfInstallments: ['', [Validators.required, Validators.min(1)]],\n      installmentAmount: [0],\n      purpose: [''],\n      authorizedBy: [''],\n      paymentMode: ['Cash', Validators.required],\n      bankName: [''],\n      chequeNo: [''],\n      chequeDate: [''],\n      share: [0],\n      cd: [0],\n      shareRight: [0],\n      cdRight: [0],\n      lastSalary: [0],\n      mwf: [0],\n      payAmount: [0]\n    });\n  }\n\n  calculateNetLoan() {\n    const loanAmount = this.loanForm.get('loanAmount')?.value || 0;\n    const previousLoan = this.loanForm.get('previousLoan')?.value || 0;\n    const netLoan = loanAmount - previousLoan;\n    this.loanForm.patchValue({ netLoan });\n    this.calculateInstallmentAmount();\n  }\n\n  calculateInstallmentAmount() {\n    const netLoan = this.loanForm.get('netLoan')?.value || 0;\n    const noOfInstallments = this.loanForm.get('noOfInstallments')?.value || 1;\n    const installmentAmount = netLoan / noOfInstallments;\n    this.loanForm.patchValue({ installmentAmount: Math.round(installmentAmount) });\n  }\n\n  requiresAuthorization(): boolean {\n    const loanAmount = this.loanForm.get('loanAmount')?.value || 0;\n    return loanAmount > 100000; // Require authorization for loans above 1 lakh\n  }\n\n  addGivenMember() {\n    // In a real application, this would open a member selection dialog\n    const newMember: GivenTakenMember = {\n      memNo: 'M' + (this.givenMembers.length + 1).toString().padStart(3, '0'),\n      name: 'Member ' + (this.givenMembers.length + 1)\n    };\n    this.givenMembers.push(newMember);\n  }\n\n  removeGivenMember(index: number) {\n    this.givenMembers.splice(index, 1);\n  }\n\n  addTakenMember() {\n    // In a real application, this would open a member selection dialog\n    const newMember: GivenTakenMember = {\n      memNo: 'M' + (this.takenMembers.length + 1).toString().padStart(3, '0'),\n      name: 'Member ' + (this.takenMembers.length + 1)\n    };\n    this.takenMembers.push(newMember);\n  }\n\n  removeTakenMember(index: number) {\n    this.takenMembers.splice(index, 1);\n  }\n\n  openLoanSummary() {\n    const dialogRef = this.dialog.open(LoanSummaryDialog, {\n      width: '800px',\n      data: this.loanSummaryData\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.loanForm.patchValue({\n          loanNo: result.loanNo\n        });\n      }\n    });\n  }\n\n  openEmployeeSearch() {\n    const dialogRef = this.dialog.open(EmployeeSearchDialog, {\n      width: '600px',\n      data: this.employeeData\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.loanForm.patchValue({\n          edpNo: result.edpNo,\n          name: result.memberName\n        });\n      }\n    });\n  }\n\n  onValidate() {\n    this.markFormGroupTouched(this.loanForm);\n    if (this.loanForm.valid) {\n      alert('All fields are valid!');\n    } else {\n      alert('Please fill in all required fields.');\n    }\n  }\n\n  onSave() {\n    if (this.loanForm.valid) {\n      const formData = {\n        ...this.loanForm.value,\n        givenMembers: this.givenMembers,\n        takenMembers: this.takenMembers\n      };\n      console.log('Loan data:', formData);\n      alert('Loan data saved successfully!');\n    } else {\n      this.markFormGroupTouched(this.loanForm);\n      alert('Please fill in all required fields.');\n    }\n  }\n\n  onClear() {\n    this.loanForm.reset();\n    this.loanForm.patchValue({\n      loanDate: new Date().toISOString().split('T')[0],\n      paymentMode: 'Cash',\n      previousLoan: 0,\n      netLoan: 0,\n      installmentAmount: 0,\n      share: 0,\n      cd: 0,\n      shareRight: 0,\n      cdRight: 0,\n      lastSalary: 0,\n      mwf: 0,\n      payAmount: 0\n    });\n    this.givenMembers = [];\n    this.takenMembers = [];\n  }\n\n  onClose() {\n    if (confirm('Are you sure you want to close? Any unsaved changes will be lost.')) {\n      this.onClear();\n    }\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      control?.markAsTouched({ onlySelf: true });\n    });\n  }\n}\n\n// Loan Summary Dialog Component\n@Component({\n  selector: 'loan-summary-dialog',\n  standalone: true,\n  imports: [CommonModule, MatDialogModule, MatButtonModule, MatIconModule, MatTableModule, MatFormFieldModule, MatInputModule],\n  template: `\n    <div class=\"dialog-container\">\n      <div class=\"dialog-header\">\n        <h2 class=\"dialog-title\">\n          <mat-icon>list</mat-icon>\n          Loan Summary\n        </h2>\n        <button mat-icon-button (click)=\"close()\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n\n      <div class=\"dialog-content\">\n        <div class=\"search-container mb-4\">\n          <mat-form-field appearance=\"outline\" class=\"w-full\">\n            <mat-icon matPrefix>search</mat-icon>\n            <input matInput placeholder=\"Search loans...\" (input)=\"applyFilter()\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"table-container\">\n          <table mat-table [dataSource]=\"dataSource\" class=\"loan-summary-table\">\n            <ng-container matColumnDef=\"loanNo\">\n              <th mat-header-cell *matHeaderCellDef>Loan No.</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.loanNo}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"loanDate\">\n              <th mat-header-cell *matHeaderCellDef>Loan Date</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.loanDate | date:'dd/MM/yyyy'}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"amount\">\n              <th mat-header-cell *matHeaderCellDef>Amount</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.amount | currency:'INR':'symbol':'1.0-0'}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"member\">\n              <th mat-header-cell *matHeaderCellDef>Member</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.member}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"edpNo\">\n              <th mat-header-cell *matHeaderCellDef>EDP No.</th>\n              <td mat-cell *matCellDef=\"let loan\">{{loan.edpNo}}</td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" \n                class=\"clickable-row\" \n                (click)=\"selectLoan(row)\"></tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .dialog-container {\n      padding: 0;\n    }\n    .dialog-header {\n      padding: 20px 24px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .dialog-title {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      margin: 0;\n      font-size: 1.25rem;\n      font-weight: 600;\n    }\n    .dialog-content {\n      padding: 24px;\n    }\n    .table-container {\n      max-height: 400px;\n      overflow-y: auto;\n    }\n    .loan-summary-table {\n      width: 100%;\n    }\n    .w-full {\n      width: 100%;\n    }\n    .mb-4 {\n      margin-bottom: 16px;\n    }\n  `]\n})\nexport class LoanSummaryDialog {\n  displayedColumns: string[] = ['loanNo', 'loanDate', 'amount', 'member', 'edpNo'];\n  dataSource = new MatTableDataSource<LoanSummary>([]);\n  searchTerm = '';\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: LoanSummary[], private dialogRef: MatDialogRef<LoanSummaryDialog>) {\n    this.dataSource.data = data;\n  }\n\n  applyFilter() {\n    this.dataSource.filter = this.searchTerm.trim().toLowerCase();\n  }\n\n  selectLoan(loan: LoanSummary) {\n    this.dialogRef.close(loan);\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n\n// Employee Search Dialog Component\n@Component({\n  selector: 'employee-search-dialog',\n  standalone: true,\n  imports: [CommonModule, MatDialogModule, MatButtonModule, MatIconModule, MatTableModule, MatFormFieldModule, MatInputModule],\n  template: `\n    <div class=\"dialog-container\">\n      <div class=\"dialog-header\">\n        <h2 class=\"dialog-title\">\n          <mat-icon>search</mat-icon>\n          Employee Search\n        </h2>\n        <button mat-icon-button (click)=\"close()\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n\n      <div class=\"dialog-content\">\n        <div class=\"search-container mb-4\">\n          <mat-form-field appearance=\"outline\" class=\"w-full\">\n            <mat-icon matPrefix>search</mat-icon>\n            <input matInput placeholder=\"Search employees...\" (input)=\"applyFilter()\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"table-container\">\n          <table mat-table [dataSource]=\"dataSource\" class=\"employee-search-table\">\n            <ng-container matColumnDef=\"edpNo\">\n              <th mat-header-cell *matHeaderCellDef>EDP No.</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.edpNo}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"memberName\">\n              <th mat-header-cell *matHeaderCellDef>Member Name</th>\n              <td mat-cell *matCellDef=\"let employee\">{{employee.memberName}}</td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" \n                class=\"clickable-row\" \n                (click)=\"selectEmployee(row)\"></tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .dialog-container {\n      padding: 0;\n    }\n    .dialog-header {\n      padding: 20px 24px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .dialog-title {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      margin: 0;\n      font-size: 1.25rem;\n      font-weight: 600;\n    }\n    .dialog-content {\n      padding: 24px;\n    }\n    .table-container {\n      max-height: 400px;\n      overflow-y: auto;\n    }\n    .employee-search-table {\n      width: 100%;\n    }\n    .clickable-row {\n      cursor: pointer;\n    }\n    .clickable-row:hover {\n      background-color: #f5f5f5;\n    }\n    .w-full {\n      width: 100%;\n    }\n    .mb-4 {\n      margin-bottom: 16px;\n    }\n  `]\n})\nexport class EmployeeSearchDialog {\n  displayedColumns: string[] = ['edpNo', 'memberName'];\n  dataSource = new MatTableDataSource<Employee>([]);\n  searchTerm = '';\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Employee[], private dialogRef: MatDialogRef<EmployeeSearchDialog>) {\n    this.dataSource.data = data;\n  }\n\n  applyFilter() {\n    this.dataSource.filter = this.searchTerm.trim().toLowerCase();\n  }\n\n  selectEmployee(employee: Employee) {\n    this.dialogRef.close(employee);\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n","size_bytes":48143},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/monthly-demand/monthly-demand.component.css":{"content":"\n/* Monthly Demand Processing Styles */\n/* @import '../../../styles/forms.css';\n@import '../../../styles/cards.css';\n@import '../../../styles/buttons.css';\n@import '../../../styles/tables.css'; */\n\n.demand-tabs {\n  --mdc-tab-text-label-color-active: #1976d2;\n  --mdc-tab-indicator-active-indicator-color: #1976d2;\n}\n\n.demand-table {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.875rem;\n  margin: 0;\n}\n\n.demand-table th {\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n  color: #1e293b;\n  font-weight: 600;\n  padding: 12px 8px;\n  text-align: left;\n  border-bottom: 2px solid #e2e8f0;\n  white-space: nowrap;\n  font-size: 0.8rem;\n}\n\n.demand-table td {\n  padding: 10px 8px;\n  border-bottom: 1px solid #f1f5f9;\n  white-space: nowrap;\n}\n\n.demand-table tbody tr {\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.demand-table tbody tr:hover {\n  background-color: #f8fafc;\n}\n\n.demand-table tbody tr.selected-row {\n  background: linear-gradient(135deg, #dbeafe 0%, #e0f2fe 100%);\n  border-left: 4px solid #3b82f6;\n}\n\n.number-cell {\n  text-align: right;\n  font-family: 'Roboto Mono', monospace;\n  font-size: 0.8rem;\n}\n\n.interest-cell {\n  background-color: #fef3c7;\n  font-weight: 600;\n}\n\n.summary-panel {\n  padding: 16px 24px;\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n  border-top: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.summary-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n}\n\n.summary-item label {\n  font-size: 0.875rem;\n  color: #64748b;\n  font-weight: 500;\n}\n\n.total-amount {\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #1e293b;\n  font-family: 'Roboto Mono', monospace;\n}\n\n.closing-panel {\n  padding: 24px;\n}\n\n.closing-stats {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 16px;\n  margin-bottom: 24px;\n}\n\n.stat-card {\n  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.stat-value {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 4px;\n  font-family: 'Roboto Mono', monospace;\n}\n\n.stat-label {\n  font-size: 0.875rem;\n  color: #64748b;\n  font-weight: 500;\n}\n\n.closing-actions {\n  display: flex;\n  gap: 16px;\n  justify-content: center;\n}\n\n.interest-summary-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 16px;\n}\n\n.interest-summary-table th,\n.interest-summary-table td {\n  padding: 12px;\n  text-align: left;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.interest-summary-table th {\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n  font-weight: 600;\n}\n\n.total-row {\n  background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);\n  font-weight: 600;\n}\n\n.total-field {\n  background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);\n  font-weight: 700;\n  color: #166534;\n  font-family: 'Roboto Mono', monospace;\n}\n\n.btn-group {\n  display: flex;\n  gap: 12px;\n  align-items: center;\n}\n\n.card-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 24px;\n  border-top: 1px solid #e2e8f0;\n  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n}\n\n.form-grid-4 {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 16px;\n}\n\n@media (max-width: 1200px) {\n  .form-grid-4 {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .closing-stats {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@media (max-width: 768px) {\n  .form-grid-4 {\n    grid-template-columns: 1fr;\n  }\n  \n  .closing-stats {\n    grid-template-columns: 1fr;\n  }\n  \n  .summary-panel {\n    flex-direction: column;\n    gap: 16px;\n  }\n  \n  .card-actions {\n    flex-direction: column;\n    gap: 16px;\n  }\n  \n  .demand-table {\n    font-size: 0.75rem;\n  }\n  \n  .demand-table th,\n  .demand-table td {\n    padding: 8px 4px;\n  }\n}\n\n.table-container {\n  overflow-x: auto;\n  margin: 16px 0;\n}\n\n.tab-content {\n  padding: 16px;\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-in;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Print styles */\n@media print {\n  .card-actions,\n  .btn,\n  .mat-tab-header {\n    display: none !important;\n  }\n  \n  .demand-table {\n    font-size: 0.7rem;\n  }\n  \n  .demand-table th,\n  .demand-table td {\n    padding: 4px 2px;\n  }\n}\n","size_bytes":4457},"attached_assets/extracted_frontend/fintcs/src/app/components/transaction/monthly-demand/monthly-demand.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatDialogModule } from '@angular/material/dialog';\n\ninterface DemandRecord {\n  edpNo: string;\n  memberName: string;\n  loanAmt: number;\n  cd: number;\n  loan: number;\n  interest: number;\n  eLoan: number;\n  eInterest: number;\n  net: number;\n  intDue: number;\n  pInt: number;\n  pDed: number;\n  las: number;\n  int: number;\n  lasIntDue: number;\n}\n\ninterface LoanInterestRecord {\n  edpNo: string;\n  memberName: string;\n  loanIntAmt: number;\n}\n\n@Component({\n  selector: 'app-monthly-demand',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatIconModule,\n    MatTableModule,\n    MatDialogModule\n  ],\n  template: `\n    <div class=\"animate-fade-in\">\n      <!-- Page Header -->\n      <div class=\"content-header mb-6\">\n        <div class=\"breadcrumb\">\n          <span>Transaction</span>\n          <mat-icon class=\"breadcrumb-separator\">chevron_right</mat-icon>\n          <span class=\"breadcrumb-active\">Monthly Demand Processing</span>\n        </div>\n        <h1 class=\"text-page-title\">Monthly Demand Processing</h1>\n        <p class=\"text-body text-gray-600 dark:text-gray-400\">Process monthly loan demands and interest calculations</p>\n      </div>\n\n      <!-- Month Selection -->\n      <mat-card class=\"card mb-6\">\n        <div class=\"card-header bg-gradient-to-r from-blue-600 to-purple-600\">\n          <div class=\"card-title\">\n            <mat-icon>calendar_month</mat-icon>\n            <span>Month Selection</span>\n          </div>\n        </div>\n        <mat-card-content class=\"p-6\">\n          <div class=\"form-grid form-grid-3\">\n            <div class=\"form-field\">\n              <label class=\"form-label form-label-required\">Processing Month</label>\n              <select class=\"form-select\" [(ngModel)]=\"selectedMonth\" (change)=\"loadMonthData()\">\n                <option value=\"\">Select Month</option>\n                <option value=\"2024-01\">January 2024</option>\n                <option value=\"2024-02\">February 2024</option>\n                <option value=\"2024-03\">March 2024</option>\n                <option value=\"2024-04\">April 2024</option>\n                <option value=\"2024-05\">May 2024</option>\n                <option value=\"2024-06\">June 2024</option>\n                <option value=\"2024-07\">July 2024</option>\n                <option value=\"2024-08\">August 2024</option>\n                <option value=\"2024-09\">September 2024</option>\n                <option value=\"2024-10\">October 2024</option>\n                <option value=\"2024-11\">November 2024</option>\n                <option value=\"2024-12\">December 2024</option>\n              </select>\n            </div>\n            <div class=\"form-field\">\n              <label class=\"form-label\">Status</label>\n              <input type=\"text\" class=\"form-input\" [value]=\"monthStatus\" readonly>\n            </div>\n            <div class=\"form-field\">\n              <label class=\"form-label\">Last Processed</label>\n              <input type=\"text\" class=\"form-input\" [value]=\"lastProcessed\" readonly>\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n\n      <!-- Demand Table Section -->\n      <mat-card class=\"card mb-6\">\n        <div class=\"card-header bg-gradient-to-r from-green-600 to-blue-600\">\n          <div class=\"card-title\">\n            <mat-icon>table_view</mat-icon>\n            <span>Monthly Demand Table</span>\n          </div>\n          <div class=\"card-actions\">\n            <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"calculateInterest()\">\n              <mat-icon>calculate</mat-icon>\n              Calculate Interest\n            </button>\n            <button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"postInterest()\" [disabled]=\"!canPostInterest()\">\n              <mat-icon>post_add</mat-icon>\n              Interest Post\n            </button>\n          </div>\n        </div>\n\n        <mat-card-content class=\"p-0\">\n          <mat-tab-group class=\"demand-tabs\">\n            <mat-tab label=\"Demand Processing\">\n              <div class=\"tab-content\">\n                <div class=\"table-container\">\n                  <table class=\"demand-table\">\n                    <thead>\n                      <tr>\n                        <th>EDP No.</th>\n                        <th>Member Name</th>\n                        <th>Loan Amt</th>\n                        <th>CD</th>\n                        <th>Loan</th>\n                        <th>Interest</th>\n                        <th>E-Loan</th>\n                        <th>Interest...</th>\n                        <th>Net...</th>\n                        <th>IntDue</th>\n                        <th>PInt</th>\n                        <th>PDed</th>\n                        <th>LAS</th>\n                        <th>Int</th>\n                        <th>LASIntDue</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let record of demandRecords; let i = index\" [class.selected-row]=\"selectedRowIndex === i\" (click)=\"selectRow(i, record)\">\n                        <td>{{record.edpNo}}</td>\n                        <td>{{record.memberName}}</td>\n                        <td class=\"number-cell\">{{record.loanAmt | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.cd | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.loan | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell interest-cell\">{{record.interest | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.eLoan | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell interest-cell\">{{record.eInterest | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.net | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.intDue | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.pInt | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.pDed | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.las | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.int | currency:'INR':'symbol':'1.2-2'}}</td>\n                        <td class=\"number-cell\">{{record.lasIntDue | currency:'INR':'symbol':'1.2-2'}}</td>\n                      </tr>\n                      <tr *ngIf=\"demandRecords.length === 0\">\n                        <td colspan=\"15\" class=\"text-center text-gray-500 py-8\">No demand records found for selected month</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                \n                <!-- Total Interest Summary -->\n                <div class=\"summary-panel\">\n                  <div class=\"summary-item\">\n                    <label>Total Interest:</label>\n                    <span class=\"total-amount\">{{getTotalInterest() | currency:'INR':'symbol':'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Total E-Interest:</label>\n                    <span class=\"total-amount\">{{getTotalEInterest() | currency:'INR':'symbol':'1.2-2'}}</span>\n                  </div>\n                  <div class=\"summary-item\">\n                    <label>Total Amount Due:</label>\n                    <span class=\"total-amount\">{{getTotalAmountDue() | currency:'INR':'symbol':'1.2-2'}}</span>\n                  </div>\n                </div>\n              </div>\n            </mat-tab>\n\n            <mat-tab label=\"Month Closing\">\n              <div class=\"tab-content\">\n                <div class=\"closing-panel\">\n                  <div class=\"closing-stats\">\n                    <div class=\"stat-card\">\n                      <div class=\"stat-value\">{{demandRecords.length}}</div>\n                      <div class=\"stat-label\">Total Members</div>\n                    </div>\n                    <div class=\"stat-card\">\n                      <div class=\"stat-value\">{{getTotalInterest() | currency:'INR':'symbol':'1.0-0'}}</div>\n                      <div class=\"stat-label\">Total Interest</div>\n                    </div>\n                    <div class=\"stat-card\">\n                      <div class=\"stat-value\">{{getProcessedCount()}}</div>\n                      <div class=\"stat-label\">Processed</div>\n                    </div>\n                    <div class=\"stat-card\">\n                      <div class=\"stat-value\">{{getPendingCount()}}</div>\n                      <div class=\"stat-label\">Pending</div>\n                    </div>\n                  </div>\n\n                  <div class=\"closing-actions\">\n                    <button type=\"button\" class=\"btn btn-warning\" (click)=\"validateMonth()\">\n                      <mat-icon>check_circle</mat-icon>\n                      Validate Month\n                    </button>\n                    <button type=\"button\" class=\"btn btn-success\" (click)=\"closeMonth()\" [disabled]=\"!canCloseMonth()\">\n                      <mat-icon>lock</mat-icon>\n                      Close Month\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </mat-tab>\n\n            <mat-tab label=\"Loan Interest Summary\">\n              <div class=\"tab-content\">\n                <div class=\"table-container\">\n                  <table class=\"interest-summary-table\">\n                    <thead>\n                      <tr>\n                        <th>EDP No.</th>\n                        <th>Member Name</th>\n                        <th>Loan Int Amt</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let record of loanInterestRecords\">\n                        <td>{{record.edpNo}}</td>\n                        <td>{{record.memberName}}</td>\n                        <td class=\"number-cell\">{{record.loanIntAmt | currency:'INR':'symbol':'1.2-2'}}</td>\n                      </tr>\n                      <tr class=\"total-row\">\n                        <td colspan=\"2\"><strong>Total</strong></td>\n                        <td class=\"number-cell\"><strong>{{getLoanInterestTotal() | currency:'INR':'symbol':'1.2-2'}}</strong></td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </mat-tab>\n          </mat-tab-group>\n        </mat-card-content>\n      </mat-card>\n\n      <!-- Member Detail Fields Section -->\n      <form [formGroup]=\"memberForm\">\n        <mat-card class=\"card\">\n          <div class=\"card-header bg-gradient-to-r from-purple-600 to-pink-600\">\n            <div class=\"card-title\">\n              <mat-icon>person</mat-icon>\n              <span>Member Detail Entry</span>\n            </div>\n          </div>\n\n          <mat-card-content class=\"p-6\">\n            <div class=\"form-section\">\n              <div class=\"form-section-header\">\n                <mat-icon>account_circle</mat-icon>\n                <span>Basic Information</span>\n              </div>\n              <div class=\"form-section-content\">\n                <div class=\"form-grid form-grid-4\">\n                  <div class=\"form-field\">\n                    <label class=\"form-label form-label-required\">EDP No.</label>\n                    <input \n                      type=\"text\" \n                      class=\"form-input\"\n                      formControlName=\"edpNo\"\n                      placeholder=\"Enter EDP number\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Name</label>\n                    <input \n                      type=\"text\" \n                      class=\"form-input\"\n                      formControlName=\"name\"\n                      placeholder=\"Member name\"\n                      readonly>\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Loan</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"loan\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Emrg. Loan</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"emergencyLoan\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-section\">\n              <div class=\"form-section-header\">\n                <mat-icon>payments</mat-icon>\n                <span>Interest & Deductions</span>\n              </div>\n              <div class=\"form-section-content\">\n                <div class=\"form-grid form-grid-4\">\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Int Due</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"intDue\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">LAS Int Due</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"lasIntDue\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">CD</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"cd\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Interest</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"interest\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">P. Int</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"pInt\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">LAS</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"las\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">Interest</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"interestSecond\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n\n                  <div class=\"form-field\">\n                    <label class=\"form-label\">P. Ded</label>\n                    <input \n                      type=\"number\" \n                      class=\"form-input\"\n                      formControlName=\"pDed\"\n                      placeholder=\"0.00\"\n                      (input)=\"calculateTotals()\">\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-section\">\n              <div class=\"form-section-header\">\n                <mat-icon>calculate</mat-icon>\n                <span>Calculated Total</span>\n              </div>\n              <div class=\"form-section-content\">\n                <div class=\"form-field\">\n                  <label class=\"form-label\">Total Amount</label>\n                  <input \n                    type=\"number\" \n                    class=\"form-input total-field\"\n                    formControlName=\"totalAmount\"\n                    readonly>\n                </div>\n              </div>\n            </div>\n          </mat-card-content>\n\n          <!-- Action Buttons -->\n          <div class=\"card-actions\">\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"clearMemberForm()\">\n                <mat-icon>clear</mat-icon>\n                Clear\n              </button>\n              <button type=\"button\" class=\"btn btn-success\" (click)=\"exportToExcel()\">\n                <mat-icon>file_download</mat-icon>\n                Excel\n              </button>\n              <button type=\"button\" class=\"btn btn-info\" (click)=\"printDemandTable()\">\n                <mat-icon>print</mat-icon>\n                Print\n              </button>\n              <button type=\"button\" class=\"btn btn-warning\" (click)=\"printLoanDetails()\">\n                <mat-icon>description</mat-icon>\n                Print Loan\n              </button>\n            </div>\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"saveMemberData()\">\n                <mat-icon>save</mat-icon>\n                Save\n              </button>\n              <button type=\"button\" class=\"btn btn-danger\" (click)=\"resetAll()\">\n                <mat-icon>refresh</mat-icon>\n                Reset\n              </button>\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeForm()\">\n                <mat-icon>close</mat-icon>\n                Close\n              </button>\n            </div>\n          </div>\n        </mat-card>\n      </form>\n    </div>\n  `,\n  styleUrl: './monthly-demand.component.css'\n})\nexport class MonthlyDemandComponent implements OnInit {\n  memberForm: FormGroup;\n  selectedMonth = '';\n  monthStatus = 'Open';\n  lastProcessed = 'Not processed';\n  selectedRowIndex = -1;\n  \n  demandRecords: DemandRecord[] = [\n    {\n      edpNo: 'EMP001',\n      memberName: 'John Doe',\n      loanAmt: 50000,\n      cd: 5000,\n      loan: 45000,\n      interest: 2250,\n      eLoan: 10000,\n      eInterest: 500,\n      net: 42750,\n      intDue: 1750,\n      pInt: 500,\n      pDed: 1250,\n      las: 1000,\n      int: 50,\n      lasIntDue: 50\n    },\n    {\n      edpNo: 'EMP002',\n      memberName: 'Jane Smith',\n      loanAmt: 75000,\n      cd: 7500,\n      loan: 67500,\n      interest: 3375,\n      eLoan: 15000,\n      eInterest: 750,\n      net: 63750,\n      intDue: 2625,\n      pInt: 750,\n      pDed: 1875,\n      las: 1500,\n      int: 75,\n      lasIntDue: 75\n    },\n    {\n      edpNo: 'EMP003',\n      memberName: 'Mike Johnson',\n      loanAmt: 30000,\n      cd: 3000,\n      loan: 27000,\n      interest: 1350,\n      eLoan: 5000,\n      eInterest: 250,\n      net: 25650,\n      intDue: 1100,\n      pInt: 250,\n      pDed: 850,\n      las: 500,\n      int: 25,\n      lasIntDue: 25\n    }\n  ];\n\n  loanInterestRecords: LoanInterestRecord[] = [];\n\n  constructor(private fb: FormBuilder) {\n    this.memberForm = this.fb.group({\n      edpNo: ['', Validators.required],\n      name: [''],\n      loan: [0],\n      emergencyLoan: [0],\n      intDue: [0],\n      lasIntDue: [0],\n      cd: [0],\n      interest: [0],\n      pInt: [0],\n      las: [0],\n      interestSecond: [0],\n      pDed: [0],\n      totalAmount: [0]\n    });\n  }\n\n  ngOnInit() {\n    this.generateLoanInterestRecords();\n  }\n\n  loadMonthData() {\n    if (this.selectedMonth) {\n      // Simulate loading data for selected month\n      this.monthStatus = 'Open';\n      this.lastProcessed = 'Not processed';\n      console.log('Loading data for month:', this.selectedMonth);\n    }\n  }\n\n  selectRow(index: number, record: DemandRecord) {\n    this.selectedRowIndex = index;\n    this.memberForm.patchValue({\n      edpNo: record.edpNo,\n      name: record.memberName,\n      loan: record.loan,\n      emergencyLoan: record.eLoan,\n      intDue: record.intDue,\n      lasIntDue: record.lasIntDue,\n      cd: record.cd,\n      interest: record.interest,\n      pInt: record.pInt,\n      las: record.las,\n      interestSecond: record.int,\n      pDed: record.pDed\n    });\n    this.calculateTotals();\n  }\n\n  calculateInterest() {\n    // Simulate interest calculation\n    this.demandRecords.forEach(record => {\n      const interestRate = 0.05; // 5% monthly interest\n      record.interest = record.loan * interestRate;\n      record.eInterest = record.eLoan * interestRate;\n      record.intDue = record.interest - record.pInt;\n    });\n    this.generateLoanInterestRecords();\n    alert('Interest calculated for all members');\n  }\n\n  postInterest() {\n    if (this.canPostInterest()) {\n      // Simulate posting interest\n      alert(`Interest of ‚Çπ${this.getTotalInterest().toFixed(2)} posted successfully`);\n      this.monthStatus = 'Interest Posted';\n    }\n  }\n\n  canPostInterest(): boolean {\n    return this.selectedMonth !== '' && this.getTotalInterest() > 0;\n  }\n\n  validateMonth() {\n    // Simulate month validation\n    const validationErrors = [];\n    if (this.demandRecords.some(r => r.interest === 0)) {\n      validationErrors.push('Some members have zero interest');\n    }\n    \n    if (validationErrors.length > 0) {\n      alert('Validation errors found:\\n' + validationErrors.join('\\n'));\n    } else {\n      alert('Month validation successful');\n    }\n  }\n\n  closeMonth() {\n    if (this.canCloseMonth()) {\n      if (confirm('Are you sure you want to close this month? This action cannot be undone.')) {\n        this.monthStatus = 'Closed';\n        alert('Month closed successfully');\n      }\n    }\n  }\n\n  canCloseMonth(): boolean {\n    return this.monthStatus === 'Interest Posted';\n  }\n\n  calculateTotals() {\n    const formValues = this.memberForm.value;\n    const total = \n      (formValues.loan || 0) + \n      (formValues.emergencyLoan || 0) + \n      (formValues.intDue || 0) + \n      (formValues.lasIntDue || 0) + \n      (formValues.interest || 0) + \n      (formValues.interestSecond || 0);\n    \n    this.memberForm.patchValue({ totalAmount: total });\n  }\n\n  getTotalInterest(): number {\n    return this.demandRecords.reduce((sum, record) => sum + record.interest, 0);\n  }\n\n  getTotalEInterest(): number {\n    return this.demandRecords.reduce((sum, record) => sum + record.eInterest, 0);\n  }\n\n  getTotalAmountDue(): number {\n    return this.demandRecords.reduce((sum, record) => sum + record.intDue + record.lasIntDue, 0);\n  }\n\n  getProcessedCount(): number {\n    return this.demandRecords.filter(r => r.interest > 0).length;\n  }\n\n  getPendingCount(): number {\n    return this.demandRecords.filter(r => r.interest === 0).length;\n  }\n\n  generateLoanInterestRecords() {\n    this.loanInterestRecords = this.demandRecords.map(record => ({\n      edpNo: record.edpNo,\n      memberName: record.memberName,\n      loanIntAmt: record.interest + record.eInterest\n    }));\n  }\n\n  getLoanInterestTotal(): number {\n    return this.loanInterestRecords.reduce((sum, record) => sum + record.loanIntAmt, 0);\n  }\n\n  clearMemberForm() {\n    this.memberForm.reset();\n    this.selectedRowIndex = -1;\n  }\n\n  exportToExcel() {\n    // Simulate Excel export\n    const csvContent = this.generateCSVContent();\n    console.log('Exporting to Excel:', csvContent);\n    alert('Demand table exported to Excel successfully');\n  }\n\n  printDemandTable() {\n    window.print();\n  }\n\n  printLoanDetails() {\n    if (this.selectedRowIndex >= 0) {\n      const selectedRecord = this.demandRecords[this.selectedRowIndex];\n      console.log('Printing loan details for:', selectedRecord.memberName);\n      alert(`Printing loan details for ${selectedRecord.memberName}`);\n    } else {\n      alert('Please select a member first');\n    }\n  }\n\n  saveMemberData() {\n    if (this.memberForm.valid) {\n      const formData = this.memberForm.value;\n      if (this.selectedRowIndex >= 0) {\n        // Update existing record\n        const record = this.demandRecords[this.selectedRowIndex];\n        record.loan = formData.loan;\n        record.eLoan = formData.emergencyLoan;\n        record.cd = formData.cd;\n        record.interest = formData.interest;\n        record.intDue = formData.intDue;\n        record.lasIntDue = formData.lasIntDue;\n      }\n      alert('Member data saved successfully');\n    } else {\n      alert('Please fill all required fields');\n    }\n  }\n\n  resetAll() {\n    if (confirm('Are you sure you want to reset all data? This action cannot be undone.')) {\n      this.clearMemberForm();\n      this.selectedMonth = '';\n      this.monthStatus = 'Open';\n      this.lastProcessed = 'Not processed';\n      // Reset all calculations\n      this.demandRecords.forEach(record => {\n        record.interest = 0;\n        record.eInterest = 0;\n        record.intDue = 0;\n      });\n      this.generateLoanInterestRecords();\n    }\n  }\n\n  closeForm() {\n    if (confirm('Are you sure you want to close? Any unsaved changes will be lost.')) {\n      this.clearMemberForm();\n    }\n  }\n\n  private generateCSVContent(): string {\n    const headers = ['EDP No.', 'Member Name', 'Loan Amt', 'CD', 'Loan', 'Interest', 'E-Loan', 'Interest...', 'Net...', 'IntDue', 'PInt', 'PDed', 'LAS', 'Int', 'LASIntDue'];\n    const rows = this.demandRecords.map(record => [\n      record.edpNo, record.memberName, record.loanAmt, record.cd, record.loan,\n      record.interest, record.eLoan, record.eInterest, record.net, record.intDue,\n      record.pInt, record.pDed, record.las, record.int, record.lasIntDue\n    ]);\n    \n    return [headers, ...rows].map(row => row.join(',')).join('\\n');\n  }\n}\n","size_bytes":27212},"attached_assets/extracted_frontend/fintcs/src/app/components/file/security/admin-handover/admin-handover.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-admin-handover',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Admin Handover</h1><mat-card><mat-card-content><p>Administrative handover functionality.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class AdminHandoverComponent {}\n","size_bytes":550},"attached_assets/extracted_frontend/fintcs/src/app/components/file/security/authority/authority.component.ts":{"content":"\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { AuthService, UserRole } from '../../../../services/auth.service';\n\ninterface MenuPermission {\n  module: string;\n  menuName: string;\n  category: string;\n  view: boolean;\n  edit: boolean;\n  create: boolean;\n  delete: boolean;\n}\n\ninterface RolePermissions {\n  role: UserRole;\n  roleName: string;\n  permissions: MenuPermission[];\n}\n\n@Component({\n  selector: 'app-authority',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatCardModule, \n    MatTableModule, \n    MatCheckboxModule, \n    MatButtonModule,\n    MatTabsModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatExpansionModule\n  ],\n  template: `\n    <div class=\"authority-container\">\n      <mat-card class=\"header-card\">\n        <mat-card-header>\n          <mat-card-title>\n            <mat-icon>security</mat-icon>\n            Authority Management\n          </mat-card-title>\n          <mat-card-subtitle>Manage permissions for different user roles</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-actions>\n          <button mat-raised-button color=\"primary\" (click)=\"saveAllPermissions()\">\n            <mat-icon>save</mat-icon>\n            Save All Changes\n          </button>\n          <button mat-button (click)=\"resetToDefault()\">\n            <mat-icon>refresh</mat-icon>\n            Reset to Default\n          </button>\n        </mat-card-actions>\n      </mat-card>\n\n      <mat-tab-group class=\"role-tabs\">\n        <mat-tab *ngFor=\"let rolePermission of rolePermissions\" [label]=\"rolePermission.roleName\">\n          <div class=\"tab-content\">\n            <div class=\"role-actions\">\n              <button mat-button color=\"primary\" (click)=\"selectAllForRole(rolePermission)\">\n                <mat-icon>select_all</mat-icon>\n                Select All\n              </button>\n              <button mat-button color=\"warn\" (click)=\"deselectAllForRole(rolePermission)\">\n                <mat-icon>deselect</mat-icon>\n                Deselect All\n              </button>\n              <button mat-raised-button color=\"accent\" (click)=\"saveRolePermissions(rolePermission)\">\n                <mat-icon>save</mat-icon>\n                Save {{ rolePermission.roleName }}\n              </button>\n            </div>\n\n            <mat-accordion>\n              <mat-expansion-panel *ngFor=\"let category of getCategories()\" [expanded]=\"true\">\n                <mat-expansion-panel-header>\n                  <mat-panel-title>\n                    <mat-icon>{{ getCategoryIcon(category) }}</mat-icon>\n                    {{ category }}\n                  </mat-panel-title>\n                  <mat-panel-description>\n                    {{ getCategoryPermissions(rolePermission, category).length }} menus\n                  </mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <div class=\"permissions-table\">\n                  <table mat-table [dataSource]=\"getCategoryPermissions(rolePermission, category)\" class=\"permissions-mat-table\">\n                    <!-- Menu Name Column -->\n                    <ng-container matColumnDef=\"menuName\">\n                      <th mat-header-cell *matHeaderCellDef>Menu</th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"menu-name\">\n                        <mat-icon>{{ getMenuIcon(permission.module) }}</mat-icon>\n                        {{ permission.menuName }}\n                      </td>\n                    </ng-container>\n\n                    <!-- View Permission Column -->\n                    <ng-container matColumnDef=\"view\">\n                      <th mat-header-cell *matHeaderCellDef class=\"permission-header\">\n                        <mat-icon>visibility</mat-icon>\n                        View\n                      </th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"permission-cell\">\n                        <mat-checkbox \n                          [(ngModel)]=\"permission.view\"\n                          (change)=\"onPermissionChange(rolePermission, permission)\"\n                          color=\"primary\">\n                        </mat-checkbox>\n                      </td>\n                    </ng-container>\n\n                    <!-- Edit Permission Column -->\n                    <ng-container matColumnDef=\"edit\">\n                      <th mat-header-cell *matHeaderCellDef class=\"permission-header\">\n                        <mat-icon>edit</mat-icon>\n                        Edit\n                      </th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"permission-cell\">\n                        <mat-checkbox \n                          [(ngModel)]=\"permission.edit\"\n                          (change)=\"onPermissionChange(rolePermission, permission)\"\n                          color=\"accent\">\n                        </mat-checkbox>\n                      </td>\n                    </ng-container>\n\n                    <!-- Create Permission Column -->\n                    <ng-container matColumnDef=\"create\">\n                      <th mat-header-cell *matHeaderCellDef class=\"permission-header\">\n                        <mat-icon>add</mat-icon>\n                        Create\n                      </th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"permission-cell\">\n                        <mat-checkbox \n                          [(ngModel)]=\"permission.create\"\n                          (change)=\"onPermissionChange(rolePermission, permission)\"\n                          color=\"primary\">\n                        </mat-checkbox>\n                      </td>\n                    </ng-container>\n\n                    <!-- Delete Permission Column -->\n                    <ng-container matColumnDef=\"delete\">\n                      <th mat-header-cell *matHeaderCellDef class=\"permission-header\">\n                        <mat-icon>delete</mat-icon>\n                        Delete\n                      </th>\n                      <td mat-cell *matCellDef=\"let permission\" class=\"permission-cell\">\n                        <mat-checkbox \n                          [(ngModel)]=\"permission.delete\"\n                          (change)=\"onPermissionChange(rolePermission, permission)\"\n                          color=\"warn\">\n                        </mat-checkbox>\n                      </td>\n                    </ng-container>\n\n                    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n                  </table>\n                </div>\n              </mat-expansion-panel>\n            </mat-accordion>\n          </div>\n        </mat-tab>\n      </mat-tab-group>\n    </div>\n  `,\n  styles: [`\n    .authority-container {\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n\n    .header-card {\n      margin-bottom: 24px;\n    }\n\n    .header-card mat-card-header {\n      display: flex;\n      align-items: center;\n    }\n\n    .header-card mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n    }\n\n    .role-tabs {\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .tab-content {\n      padding: 24px;\n    }\n\n    .role-actions {\n      display: flex;\n      gap: 12px;\n      margin-bottom: 24px;\n      flex-wrap: wrap;\n    }\n\n    .permissions-table {\n      margin-top: 16px;\n    }\n\n    .permissions-mat-table {\n      width: 100%;\n      background: #fafafa;\n      border-radius: 8px;\n    }\n\n    .menu-name {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      font-weight: 500;\n      min-width: 200px;\n    }\n\n    .permission-header {\n      text-align: center;\n      font-weight: 600;\n      width: 100px;\n    }\n\n    .permission-header mat-icon {\n      vertical-align: middle;\n      margin-right: 4px;\n    }\n\n    .permission-cell {\n      text-align: center;\n      padding: 8px;\n    }\n\n    mat-expansion-panel {\n      margin-bottom: 16px;\n      border-radius: 8px !important;\n    }\n\n    mat-expansion-panel-header {\n      background: #f5f5f5;\n    }\n\n    mat-panel-title {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n    }\n\n    @media (max-width: 768px) {\n      .authority-container {\n        padding: 12px;\n      }\n      \n      .role-actions {\n        flex-direction: column;\n      }\n      \n      .role-actions button {\n        width: 100%;\n      }\n      \n      .permissions-mat-table {\n        font-size: 12px;\n      }\n      \n      .menu-name {\n        min-width: 150px;\n      }\n      \n      .permission-header {\n        width: 80px;\n      }\n    }\n\n    @media (max-width: 480px) {\n      .header-card mat-card-title {\n        font-size: 18px;\n      }\n      \n      .tab-content {\n        padding: 12px;\n      }\n      \n      .permissions-mat-table {\n        font-size: 11px;\n      }\n    }\n  `]\n})\nexport class AuthorityComponent implements OnInit {\n  displayedColumns: string[] = ['menuName', 'view', 'edit', 'create', 'delete'];\n  rolePermissions: RolePermissions[] = [];\n  hasChanges = false;\n\n  private allMenus: Omit<MenuPermission, 'view' | 'edit' | 'create' | 'delete'>[] = [\n    // File Menu\n    { module: 'society', menuName: 'Society', category: 'File' },\n    { module: 'authority', menuName: 'Authority', category: 'File - Security' },\n    { module: 'my-rights', menuName: 'My Rights', category: 'File - Security' },\n    { module: 'new-user', menuName: 'New User', category: 'File - Security' },\n    { module: 'retrieve-password', menuName: 'Retrieve Password', category: 'File - Security' },\n    { module: 'change-password', menuName: 'Change Password', category: 'File - Security' },\n    { module: 'admin-handover', menuName: 'Admin Handover', category: 'File - Security' },\n    { module: 'create-new-year', menuName: 'Create New Year', category: 'File' },\n    { module: 'edit-opening-balance', menuName: 'Edit Opening Balance', category: 'File' },\n\n    // Master Menu\n    { module: 'member-details', menuName: 'Member Details', category: 'Master' },\n    { module: 'table', menuName: 'Table', category: 'Master' },\n    { module: 'deposit-scheme', menuName: 'Deposit Scheme', category: 'Master' },\n    { module: 'interest-master', menuName: 'Interest Master', category: 'Master' },\n\n    // Transaction Menu\n    { module: 'deposit-receipt', menuName: 'Deposit Receipt', category: 'Transaction' },\n    { module: 'deposit-payment', menuName: 'Deposit Payment', category: 'Transaction' },\n    { module: 'deposit-slip', menuName: 'Deposit Slip', category: 'Transaction' },\n    { module: 'deposit-renew', menuName: 'Deposit Renew', category: 'Transaction' },\n    { module: 'account-closure', menuName: 'Account Closure', category: 'Transaction' },\n    { module: 'loan-taken', menuName: 'Loan Taken', category: 'Transaction' },\n    { module: 'demand-process', menuName: 'Demand Process', category: 'Transaction' },\n\n    // Accounts Menu\n    { module: 'cash-book', menuName: 'Cash Book', category: 'Accounts' },\n    { module: 'day-book', menuName: 'Day Book', category: 'Accounts' },\n    { module: 'ledger', menuName: 'Ledger', category: 'Accounts' },\n    { module: 'group', menuName: 'Group', category: 'Accounts' },\n    { module: 'trial-balance', menuName: 'Trial Balance', category: 'Accounts' },\n    { module: 'balance-sheet', menuName: 'Balance Sheet', category: 'Accounts' },\n    { module: 'profit-loss', menuName: 'Profit & Loss', category: 'Accounts' },\n    { module: 'receipt-payment', menuName: 'Receipt & Payment', category: 'Accounts' },\n    { module: 'voucher', menuName: 'Voucher', category: 'Accounts' },\n    { module: 'loan-receipt', menuName: 'Loan Receipt', category: 'Accounts' },\n\n    // Reports Menu\n    { module: 'opening-balance', menuName: 'Opening Balance', category: 'Reports' },\n    { module: 'closing-balance', menuName: 'Closing Balance', category: 'Reports' },\n    { module: 'employees', menuName: 'Employees', category: 'Reports' },\n    { module: 'loan', menuName: 'Loan', category: 'Reports' },\n    { module: 'voucher-report', menuName: 'Voucher Report', category: 'Reports' },\n\n    // Other\n    { module: 'statement', menuName: 'Statement', category: 'Other' },\n    { module: 'backup', menuName: 'Backup', category: 'System' },\n    { module: 'user-management', menuName: 'User Management', category: 'System' }\n  ];\n\n  constructor(\n    private authService: AuthService,\n    private snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit() {\n    this.initializeRolePermissions();\n  }\n\n  initializeRolePermissions() {\n    const roles = [\n      { role: UserRole.SOCIETY_ADMIN, roleName: 'Society Admin' },\n      { role: UserRole.ACCOUNTANT, roleName: 'Accountant' },\n      { role: UserRole.MEMBER, roleName: 'Member' }\n    ];\n\n    this.rolePermissions = roles.map(roleInfo => ({\n      role: roleInfo.role,\n      roleName: roleInfo.roleName,\n      permissions: this.allMenus.map(menu => ({\n        ...menu,\n        ...this.getDefaultPermissions(roleInfo.role, menu.module)\n      }))\n    }));\n  }\n\n  getDefaultPermissions(role: UserRole, module: string): Pick<MenuPermission, 'view' | 'edit' | 'create' | 'delete'> {\n    switch (role) {\n      case UserRole.SOCIETY_ADMIN:\n        return { view: true, edit: true, create: true, delete: true };\n      case UserRole.ACCOUNTANT:\n        if (['member-details', 'user-management', 'authority', 'admin-handover'].includes(module)) {\n          return { view: false, edit: false, create: false, delete: false };\n        }\n        return { view: true, edit: true, create: true, delete: false };\n      case UserRole.MEMBER:\n        if (['cash-book', 'statement'].includes(module)) {\n          return { view: true, edit: false, create: false, delete: false };\n        }\n        return { view: false, edit: false, create: false, delete: false };\n      default:\n        return { view: false, edit: false, create: false, delete: false };\n    }\n  }\n\n  getCategories(): string[] {\n    const categories = new Set(this.allMenus.map(menu => menu.category));\n    return Array.from(categories).sort();\n  }\n\n  getCategoryPermissions(rolePermission: RolePermissions, category: string): MenuPermission[] {\n    return rolePermission.permissions.filter(p => p.category === category);\n  }\n\n  getCategoryIcon(category: string): string {\n    const icons: { [key: string]: string } = {\n      'File': 'folder',\n      'File - Security': 'security',\n      'Master': 'storage',\n      'Transaction': 'swap_horiz',\n      'Accounts': 'account_balance',\n      'Reports': 'assessment',\n      'Other': 'more_horiz',\n      'System': 'settings'\n    };\n    return icons[category] || 'menu';\n  }\n\n  getMenuIcon(module: string): string {\n    const icons: { [key: string]: string } = {\n      'society': 'business',\n      'authority': 'admin_panel_settings',\n      'my-rights': 'verified_user',\n      'new-user': 'person_add',\n      'member-details': 'people',\n      'deposit-receipt': 'receipt',\n      'cash-book': 'account_balance_wallet',\n      'backup': 'backup',\n      'user-management': 'manage_accounts'\n    };\n    return icons[module] || 'description';\n  }\n\n  onPermissionChange(rolePermission: RolePermissions, permission: MenuPermission) {\n    this.hasChanges = true;\n  }\n\n  selectAllForRole(rolePermission: RolePermissions) {\n    rolePermission.permissions.forEach(permission => {\n      permission.view = true;\n      permission.edit = true;\n      permission.create = true;\n      permission.delete = true;\n    });\n    this.hasChanges = true;\n  }\n\n  deselectAllForRole(rolePermission: RolePermissions) {\n    rolePermission.permissions.forEach(permission => {\n      permission.view = false;\n      permission.edit = false;\n      permission.create = false;\n      permission.delete = false;\n    });\n    this.hasChanges = true;\n  }\n\n  saveRolePermissions(rolePermission: RolePermissions) {\n    // Here you would typically save to a backend service\n    console.log(`Saving permissions for ${rolePermission.roleName}:`, rolePermission.permissions);\n    \n    this.snackBar.open(\n      `Permissions saved for ${rolePermission.roleName}`,\n      'Close',\n      { duration: 3000, panelClass: ['success-snackbar'] }\n    );\n  }\n\n  saveAllPermissions() {\n    // Here you would typically save all role permissions to a backend service\n    console.log('Saving all permissions:', this.rolePermissions);\n    \n    this.snackBar.open(\n      'All permissions saved successfully',\n      'Close',\n      { duration: 3000, panelClass: ['success-snackbar'] }\n    );\n    \n    this.hasChanges = false;\n  }\n\n  resetToDefault() {\n    this.initializeRolePermissions();\n    this.hasChanges = false;\n    \n    this.snackBar.open(\n      'Permissions reset to default values',\n      'Close',\n      { duration: 3000, panelClass: ['info-snackbar'] }\n    );\n  }\n}\n","size_bytes":17307},"attached_assets/extracted_frontend/fintcs/src/app/components/file/security/change-password/change-password.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-change-password',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Change Password</h1><mat-card><mat-card-content><p>Password change form.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class ChangePasswordComponent {}\n","size_bytes":536},"attached_assets/extracted_frontend/fintcs/src/app/components/file/security/my-rights/my-rights.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-my-rights',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>My Rights</h1><mat-card><mat-card-content><p>User rights and permissions display.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class MyRightsComponent {}\n","size_bytes":533},"attached_assets/extracted_frontend/fintcs/src/app/components/file/security/new-user/new-user.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-new-user',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>New User</h1><mat-card><mat-card-content><p>New user creation form.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class NewUserComponent {}\n","size_bytes":517},"attached_assets/extracted_frontend/fintcs/src/app/components/file/security/retrieve-password/retrieve-password.component.ts":{"content":"\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-retrieve-password',\n  standalone: true,\n  imports: [CommonModule, MatCardModule],\n  template: `<div class=\"page-container\"><h1>Retrieve Password</h1><mat-card><mat-card-content><p>Password recovery functionality.</p></mat-card-content></mat-card></div>`,\n  styles: [`    .page-container { max-width: 800px; margin: 0 auto; }  `]\n})\nexport class RetrievePasswordComponent {}\n","size_bytes":553},"Enums/MemberStatus.cs":{"content":"namespace SocietyManagement.Enums\n{\n    public enum MemberStatus\n    {\n        Active = 1,\n        Inactive = 2\n    }\n}","size_bytes":119},"Models/DTOs/UpdateMemberDto.cs":{"content":"using System.ComponentModel.DataAnnotations;\nusing SocietyManagement.Enums;\n\nnamespace SocietyManagement.Models.DTOs\n{\n    public class UpdateMemberDto\n    {\n        // Basic Information\n        [Required]\n        [StringLength(100)]\n        public string Name { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100)]\n        public string FatherHusbandName { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string OfficeAddress { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string City { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string PhoneOffice { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string PhoneResidence { get; set; } = string.Empty;\n\n        [StringLength(20)]\n        public string Mobile { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string Designation { get; set; } = string.Empty;\n\n        [StringLength(500)]\n        public string ResidenceAddress { get; set; } = string.Empty;\n\n        public DateTime? DateOfBirth { get; set; }\n\n        public DateTime? DateOfJoiningSociety { get; set; }\n\n        [StringLength(255)]\n        [EmailAddress]\n        public string Email { get; set; } = string.Empty;\n\n        public DateTime DateOfJoining { get; set; }\n\n        public DateTime? DateOfResignation { get; set; }\n\n        // Nominee Information\n        [StringLength(100)]\n        public string NomineeName { get; set; } = string.Empty;\n\n        [StringLength(50)]\n        public string NomineeRelation { get; set; } = string.Empty;\n\n        // Opening Balance\n        public decimal OpeningBalanceAmount { get; set; }\n\n        [StringLength(10)]\n        public string OpeningBalanceType { get; set; } = \"Cr\";\n\n        // Bank Details\n        [StringLength(100)]\n        public string BankName { get; set; } = string.Empty;\n\n        [StringLength(100)]\n        public string PayableAt { get; set; } = string.Empty;\n\n        [StringLength(50)]\n        public string AccountNumber { get; set; } = string.Empty;\n\n        // Status\n        public MemberStatus Status { get; set; }\n\n        public DateTime StatusDate { get; set; }\n\n        // Deductions\n        public decimal ShareDeduction { get; set; }\n        public decimal WithdrawalDeduction { get; set; }\n        public decimal GeneralLoanInstalment { get; set; }\n        public decimal EmergencyLoanInstalment { get; set; }\n    }\n}","size_bytes":2462}},"version":1}